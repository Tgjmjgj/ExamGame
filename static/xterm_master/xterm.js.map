{"version":3,"file":"xterm.js","sources":["../src/xterm.ts","../src/ui/ScreenDprMonitor.ts","../src/ui/RenderDebouncer.ts","../src/ui/MouseZoneManager.ts","../src/ui/MouseHelper.ts","../src/ui/Lifecycle.ts","../src/ui/Clipboard.ts","../src/ui/CharMeasure.ts","../src/renderer/dom/DomRendererRowFactory.ts","../src/renderer/dom/DomRenderer.ts","../src/renderer/atlas/Types.ts","../src/renderer/atlas/StaticCharAtlas.ts","../src/renderer/atlas/NoneCharAtlas.ts","../src/renderer/atlas/LRUMap.ts","../src/renderer/atlas/DynamicCharAtlas.ts","../src/renderer/atlas/CharAtlasUtils.ts","../src/renderer/atlas/CharAtlasGenerator.ts","../src/renderer/atlas/CharAtlasCache.ts","../src/renderer/atlas/BaseCharAtlas.ts","../src/renderer/TextRenderLayer.ts","../src/renderer/SelectionRenderLayer.ts","../src/renderer/Renderer.ts","../src/renderer/LinkRenderLayer.ts","../src/renderer/GridCache.ts","../src/renderer/CursorRenderLayer.ts","../src/renderer/ColorManager.ts","../src/renderer/CharacterJoinerRegistry.ts","../src/renderer/BaseRenderLayer.ts","../src/public/Terminal.ts","../src/handlers/AltClickHandler.ts","../src/core/input/TextDecoder.ts","../src/core/input/Keyboard.ts","../src/core/data/Charsets.ts","../src/core/Platform.ts","../src/common/data/EscapeSequences.ts","../src/common/TypedArrayUtils.ts","../src/common/Lifecycle.ts","../src/common/EventEmitter.ts","../src/common/Clone.ts","../src/common/CircularList.ts","../src/Viewport.ts","../src/Terminal.ts","../src/Strings.ts","../src/SoundManager.ts","../src/SelectionModel.ts","../src/SelectionManager.ts","../src/Linkifier.ts","../src/InputHandler.ts","../src/EscapeSequenceParser.ts","../src/CompositionHelper.ts","../src/CharWidth.ts","../src/BufferSet.ts","../src/BufferReflow.ts","../src/BufferLine.ts","../src/Buffer.ts","../src/AccessibilityManager.ts","../node_modules/browser-pack/_prelude.js"],"sourcesContent":["/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n *\r\n * This file is the entry point for browserify.\r\n */\r\n\r\nimport { Terminal } from './public/Terminal';\r\n\r\nmodule.exports = Terminal;\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { Disposable } from '../common/Lifecycle';\r\n\r\nexport type ScreenDprListener = (newDevicePixelRatio?: number, oldDevicePixelRatio?: number) => void;\r\n\r\n/**\r\n * The screen device pixel ratio monitor allows listening for when the\r\n * window.devicePixelRatio value changes. This is done not with polling but with\r\n * the use of window.matchMedia to watch media queries. When the event fires,\r\n * the listener will be reattached using a different media query to ensure that\r\n * any further changes will register.\r\n *\r\n * The listener should fire on both window zoom changes and switching to a\r\n * monitor with a different DPI.\r\n */\r\nexport class ScreenDprMonitor extends Disposable {\r\n  private _currentDevicePixelRatio: number;\r\n  private _outerListener: (this: MediaQueryList, ev: MediaQueryListEvent) => any;\r\n  private _listener: ScreenDprListener;\r\n  private _resolutionMediaMatchList: MediaQueryList;\r\n\r\n  public setListener(listener: ScreenDprListener): void {\r\n    if (this._listener) {\r\n      this.clearListener();\r\n    }\r\n    this._listener = listener;\r\n    this._outerListener = () => {\r\n      this._listener(window.devicePixelRatio, this._currentDevicePixelRatio);\r\n      this._updateDpr();\r\n    };\r\n    this._updateDpr();\r\n  }\r\n\r\n  public dispose(): void {\r\n    super.dispose();\r\n    this.clearListener();\r\n  }\r\n\r\n  private _updateDpr(): void {\r\n    // Clear listeners for old DPR\r\n    if (this._resolutionMediaMatchList) {\r\n      this._resolutionMediaMatchList.removeListener(this._outerListener);\r\n    }\r\n    // Add listeners for new DPR\r\n    this._currentDevicePixelRatio = window.devicePixelRatio;\r\n    this._resolutionMediaMatchList = window.matchMedia(`screen and (resolution: ${window.devicePixelRatio}dppx)`);\r\n    this._resolutionMediaMatchList.addListener(this._outerListener);\r\n  }\r\n\r\n  public clearListener(): void {\r\n    if (!this._listener) {\r\n      return;\r\n    }\r\n    this._resolutionMediaMatchList.removeListener(this._outerListener);\r\n    this._listener = null;\r\n    this._outerListener = null;\r\n  }\r\n}\r\n","import { ITerminal } from '../Types';\r\nimport { IDisposable } from 'xterm';\r\n\r\n/**\r\n * Debounces calls to render terminal rows using animation frames.\r\n */\r\nexport class RenderDebouncer implements IDisposable {\r\n  private _rowStart: number;\r\n  private _rowEnd: number;\r\n  private _animationFrame: number = null;\r\n\r\n  constructor(\r\n    private _terminal: ITerminal,\r\n    private _callback: (start: number, end: number) => void\r\n  ) {\r\n  }\r\n\r\n  public dispose(): void {\r\n    if (this._animationFrame) {\r\n      window.cancelAnimationFrame(this._animationFrame);\r\n      this._animationFrame = null;\r\n    }\r\n  }\r\n\r\n  public refresh(rowStart: number, rowEnd: number): void {\r\n    // Get the min/max row start/end for the arg values\r\n    rowStart = rowStart !== null && rowStart !== undefined ? rowStart : 0;\r\n    rowEnd = rowEnd !== null && rowEnd !== undefined ? rowEnd : this._terminal.rows - 1;\r\n    // Check whether the row start/end values have already been set\r\n    const isRowStartSet = this._rowStart !== undefined && this._rowStart !== null;\r\n    const isRowEndSet = this._rowEnd !== undefined && this._rowEnd !== null;\r\n    // Set the properties to the updated values\r\n    this._rowStart = isRowStartSet ? Math.min(this._rowStart, rowStart) : rowStart;\r\n    this._rowEnd = isRowEndSet ? Math.max(this._rowEnd, rowEnd) : rowEnd;\r\n\r\n    if (this._animationFrame) {\r\n      return;\r\n    }\r\n\r\n    this._animationFrame = window.requestAnimationFrame(() => this._innerRefresh());\r\n  }\r\n\r\n  private _innerRefresh(): void {\r\n    // Clamp values\r\n    this._rowStart = Math.max(this._rowStart, 0);\r\n    this._rowEnd = Math.min(this._rowEnd, this._terminal.rows - 1);\r\n\r\n    // Run render callback\r\n    this._callback(this._rowStart, this._rowEnd);\r\n\r\n    // Reset debouncer\r\n    this._rowStart = null;\r\n    this._rowEnd = null;\r\n    this._animationFrame = null;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal } from '../Types';\r\nimport { IMouseZoneManager, IMouseZone } from './Types';\r\nimport { Disposable } from '../common/Lifecycle';\r\nimport { addDisposableDomListener } from './Lifecycle';\r\n\r\nconst HOVER_DURATION = 500;\r\n\r\n/**\r\n * The MouseZoneManager allows components to register zones within the terminal\r\n * that trigger hover and click callbacks.\r\n *\r\n * This class was intentionally made not so robust initially as the only case it\r\n * needed to support was single-line links which never overlap. Improvements can\r\n * be made in the future.\r\n */\r\nexport class MouseZoneManager extends Disposable implements IMouseZoneManager {\r\n  private _zones: IMouseZone[] = [];\r\n\r\n  private _areZonesActive: boolean = false;\r\n  private _mouseMoveListener: (e: MouseEvent) => any;\r\n  private _clickListener: (e: MouseEvent) => any;\r\n\r\n  private _tooltipTimeout: number = null;\r\n  private _currentZone: IMouseZone = null;\r\n  private _lastHoverCoords: [number, number] = [null, null];\r\n\r\n  constructor(\r\n    private _terminal: ITerminal\r\n  ) {\r\n    super();\r\n\r\n    this.register(addDisposableDomListener(this._terminal.element, 'mousedown', e => this._onMouseDown(e)));\r\n\r\n    // These events are expensive, only listen to it when mouse zones are active\r\n    this._mouseMoveListener = e => this._onMouseMove(e);\r\n    this._clickListener = e => this._onClick(e);\r\n  }\r\n\r\n  public dispose(): void {\r\n    super.dispose();\r\n    this._deactivate();\r\n  }\r\n\r\n  public add(zone: IMouseZone): void {\r\n    this._zones.push(zone);\r\n    if (this._zones.length === 1) {\r\n      this._activate();\r\n    }\r\n  }\r\n\r\n  public clearAll(start?: number, end?: number): void {\r\n    // Exit if there's nothing to clear\r\n    if (this._zones.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Clear all if start/end weren't set\r\n    if (!end) {\r\n      start = 0;\r\n      end = this._terminal.rows - 1;\r\n    }\r\n\r\n    // Iterate through zones and clear them out if they're within the range\r\n    for (let i = 0; i < this._zones.length; i++) {\r\n      const zone = this._zones[i];\r\n      if ((zone.y1 > start && zone.y1 <= end + 1) ||\r\n          (zone.y2 > start && zone.y2 <= end + 1) ||\r\n          (zone.y1 < start && zone.y2 > end + 1)) {\r\n        if (this._currentZone && this._currentZone === zone) {\r\n          this._currentZone.leaveCallback();\r\n          this._currentZone = null;\r\n        }\r\n        this._zones.splice(i--, 1);\r\n      }\r\n    }\r\n\r\n    // Deactivate the mouse zone manager if all the zones have been removed\r\n    if (this._zones.length === 0) {\r\n      this._deactivate();\r\n    }\r\n  }\r\n\r\n  private _activate(): void {\r\n    if (!this._areZonesActive) {\r\n      this._areZonesActive = true;\r\n      this._terminal.element.addEventListener('mousemove', this._mouseMoveListener);\r\n      this._terminal.element.addEventListener('click', this._clickListener);\r\n    }\r\n  }\r\n\r\n  private _deactivate(): void {\r\n    if (this._areZonesActive) {\r\n      this._areZonesActive = false;\r\n      this._terminal.element.removeEventListener('mousemove', this._mouseMoveListener);\r\n      this._terminal.element.removeEventListener('click', this._clickListener);\r\n    }\r\n  }\r\n\r\n  private _onMouseMove(e: MouseEvent): void {\r\n    // TODO: Ideally this would only clear the hover state when the mouse moves\r\n    // outside of the mouse zone\r\n    if (this._lastHoverCoords[0] !== e.pageX || this._lastHoverCoords[1] !== e.pageY) {\r\n      this._onHover(e);\r\n      // Record the current coordinates\r\n      this._lastHoverCoords = [e.pageX, e.pageY];\r\n    }\r\n  }\r\n\r\n  private _onHover(e: MouseEvent): void {\r\n    const zone = this._findZoneEventAt(e);\r\n\r\n    // Do nothing if the zone is the same\r\n    if (zone === this._currentZone) {\r\n      return;\r\n    }\r\n\r\n    // Fire the hover end callback and cancel any existing timer if a new zone\r\n    // is being hovered\r\n    if (this._currentZone) {\r\n      this._currentZone.leaveCallback();\r\n      this._currentZone = null;\r\n      if (this._tooltipTimeout) {\r\n        clearTimeout(this._tooltipTimeout);\r\n      }\r\n    }\r\n\r\n    // Exit if there is not zone\r\n    if (!zone) {\r\n      return;\r\n    }\r\n    this._currentZone = zone;\r\n\r\n    // Trigger the hover callback\r\n    if (zone.hoverCallback) {\r\n      zone.hoverCallback(e);\r\n    }\r\n\r\n    // Restart the tooltip timeout\r\n    this._tooltipTimeout = <number><any>setTimeout(() => this._onTooltip(e), HOVER_DURATION);\r\n  }\r\n\r\n  private _onTooltip(e: MouseEvent): void {\r\n    this._tooltipTimeout = null;\r\n    const zone = this._findZoneEventAt(e);\r\n    if (zone && zone.tooltipCallback) {\r\n      zone.tooltipCallback(e);\r\n    }\r\n  }\r\n\r\n  private _onMouseDown(e: MouseEvent): void {\r\n    // Ignore the event if there are no zones active\r\n    if (!this._areZonesActive) {\r\n      return;\r\n    }\r\n\r\n    // Find the active zone, prevent event propagation if found to prevent other\r\n    // components from handling the mouse event.\r\n    const zone = this._findZoneEventAt(e);\r\n    if (zone) {\r\n      if (zone.willLinkActivate(e)) {\r\n        e.preventDefault();\r\n        e.stopImmediatePropagation();\r\n      }\r\n    }\r\n  }\r\n\r\n  private _onClick(e: MouseEvent): void {\r\n    // Find the active zone and click it if found\r\n    const zone = this._findZoneEventAt(e);\r\n    if (zone) {\r\n      zone.clickCallback(e);\r\n      e.preventDefault();\r\n      e.stopImmediatePropagation();\r\n    }\r\n  }\r\n\r\n  private _findZoneEventAt(e: MouseEvent): IMouseZone {\r\n    const coords = this._terminal.mouseHelper.getCoords(e, this._terminal.screenElement, this._terminal.charMeasure, this._terminal.cols, this._terminal.rows);\r\n    if (!coords) {\r\n      return null;\r\n    }\r\n    const x = coords[0];\r\n    const y = coords[1];\r\n    for (let i = 0; i < this._zones.length; i++) {\r\n      const zone = this._zones[i];\r\n      if (zone.y1 === zone.y2) {\r\n        // Single line link\r\n        if (y === zone.y1 && x >= zone.x1 && x < zone.x2) {\r\n          return zone;\r\n        }\r\n      } else {\r\n        // Multi-line link\r\n        if ((y === zone.y1 && x >= zone.x1) ||\r\n            (y === zone.y2 && x < zone.x2) ||\r\n            (y > zone.y1 && y < zone.y2)) {\r\n          return zone;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport class MouseZone implements IMouseZone {\r\n  constructor(\r\n    public x1: number,\r\n    public y1: number,\r\n    public x2: number,\r\n    public y2: number,\r\n    public clickCallback: (e: MouseEvent) => any,\r\n    public hoverCallback: (e: MouseEvent) => any,\r\n    public tooltipCallback: (e: MouseEvent) => any,\r\n    public leaveCallback: () => void,\r\n    public willLinkActivate: (e: MouseEvent) => boolean\r\n  ) {\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ICharMeasure, IMouseHelper } from '../Types';\r\nimport { IRenderer } from '../renderer/Types';\r\n\r\nexport class MouseHelper implements IMouseHelper {\r\n  constructor(private _renderer: IRenderer) {}\r\n\r\n  public setRenderer(renderer: IRenderer): void {\r\n    this._renderer = renderer;\r\n  }\r\n\r\n  public static getCoordsRelativeToElement(event: {clientX: number, clientY: number}, element: HTMLElement): [number, number] {\r\n    const rect = element.getBoundingClientRect();\r\n    return [event.clientX - rect.left, event.clientY - rect.top];\r\n  }\r\n\r\n  /**\r\n   * Gets coordinates within the terminal for a particular mouse event. The result\r\n   * is returned as an array in the form [x, y] instead of an object as it's a\r\n   * little faster and this function is used in some low level code.\r\n   * @param event The mouse event.\r\n   * @param element The terminal's container element.\r\n   * @param charMeasure The char measure object used to determine character sizes.\r\n   * @param colCount The number of columns in the terminal.\r\n   * @param rowCount The number of rows n the terminal.\r\n   * @param isSelection Whether the request is for the selection or not. This will\r\n   * apply an offset to the x value such that the left half of the cell will\r\n   * select that cell and the right half will select the next cell.\r\n   */\r\n  public getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, charMeasure: ICharMeasure, colCount: number, rowCount: number, isSelection?: boolean): [number, number] {\r\n    // Coordinates cannot be measured if charMeasure has not been initialized\r\n    if (!charMeasure.width || !charMeasure.height) {\r\n      return null;\r\n    }\r\n\r\n    const coords = MouseHelper.getCoordsRelativeToElement(event, element);\r\n    if (!coords) {\r\n      return null;\r\n    }\r\n\r\n    coords[0] = Math.ceil((coords[0] + (isSelection ? this._renderer.dimensions.actualCellWidth / 2 : 0)) / this._renderer.dimensions.actualCellWidth);\r\n    coords[1] = Math.ceil(coords[1] / this._renderer.dimensions.actualCellHeight);\r\n\r\n    // Ensure coordinates are within the terminal viewport. Note that selections\r\n    // need an addition point of precision to cover the end point (as characters\r\n    // cover half of one char and half of the next).\r\n    coords[0] = Math.min(Math.max(coords[0], 1), colCount + (isSelection ? 1 : 0));\r\n    coords[1] = Math.min(Math.max(coords[1], 1), rowCount);\r\n\r\n    return coords;\r\n  }\r\n\r\n  /**\r\n   * Gets coordinates within the terminal for a particular mouse event, wrapping\r\n   * them to the bounds of the terminal and adding 32 to both the x and y values\r\n   * as expected by xterm.\r\n   * @param event The mouse event.\r\n   * @param element The terminal's container element.\r\n   * @param charMeasure The char measure object used to determine character sizes.\r\n   * @param colCount The number of columns in the terminal.\r\n   * @param rowCount The number of rows in the terminal.\r\n   */\r\n  public getRawByteCoords(event: MouseEvent, element: HTMLElement, charMeasure: ICharMeasure, colCount: number, rowCount: number): { x: number, y: number } {\r\n    const coords = this.getCoords(event, element, charMeasure, colCount, rowCount);\r\n    let x = coords[0];\r\n    let y = coords[1];\r\n\r\n    // xterm sends raw bytes and starts at 32 (SP) for each.\r\n    x += 32;\r\n    y += 32;\r\n\r\n    return { x, y };\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IDisposable } from 'xterm';\r\n\r\n/**\r\n * Adds a disposable listener to a node in the DOM, returning the disposable.\r\n * @param type The event type.\r\n * @param handler The handler for the listener.\r\n */\r\nexport function addDisposableDomListener(\r\n  node: Element | Window | Document,\r\n  type: string,\r\n  handler: (e: any) => void,\r\n  useCapture?: boolean\r\n): IDisposable {\r\n  node.addEventListener(type, handler, useCapture);\r\n  return {\r\n    dispose: () => {\r\n      if (!handler) {\r\n        // Already disposed\r\n        return;\r\n      }\r\n      node.removeEventListener(type, handler, useCapture);\r\n      node = null;\r\n      handler = null;\r\n    }\r\n  };\r\n}\r\n","/**\r\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal, ISelectionManager } from '../Types';\r\n\r\ninterface IWindow extends Window {\r\n  clipboardData?: {\r\n    getData(format: string): string;\r\n    setData(format: string, data: string): void;\r\n  };\r\n}\r\n\r\ndeclare var window: IWindow;\r\n\r\n/**\r\n * Prepares text to be pasted into the terminal by normalizing the line endings\r\n * @param text The pasted text that needs processing before inserting into the terminal\r\n */\r\nexport function prepareTextForTerminal(text: string): string {\r\n  return text.replace(/\\r?\\n/g, '\\r');\r\n}\r\n\r\n/**\r\n * Bracket text for paste, if necessary, as per https://cirw.in/blog/bracketed-paste\r\n * @param text The pasted text to bracket\r\n */\r\nexport function bracketTextForPaste(text: string, bracketedPasteMode: boolean): string {\r\n  if (bracketedPasteMode) {\r\n    return '\\x1b[200~' + text + '\\x1b[201~';\r\n  }\r\n  return text;\r\n}\r\n\r\n/**\r\n * Binds copy functionality to the given terminal.\r\n * @param ev The original copy event to be handled\r\n */\r\nexport function copyHandler(ev: ClipboardEvent, term: ITerminal, selectionManager: ISelectionManager): void {\r\n  if (term.browser.isMSIE) {\r\n    window.clipboardData.setData('Text', selectionManager.selectionText);\r\n  } else {\r\n    ev.clipboardData.setData('text/plain', selectionManager.selectionText);\r\n  }\r\n\r\n  // Prevent or the original text will be copied.\r\n  ev.preventDefault();\r\n}\r\n\r\n/**\r\n * Redirect the clipboard's data to the terminal's input handler.\r\n * @param ev The original paste event to be handled\r\n * @param term The terminal on which to apply the handled paste event\r\n */\r\nexport function pasteHandler(ev: ClipboardEvent, term: ITerminal): void {\r\n  ev.stopPropagation();\r\n\r\n  let text: string;\r\n\r\n  const dispatchPaste = function(text: string): void {\r\n    text = prepareTextForTerminal(text);\r\n    text = bracketTextForPaste(text, term.bracketedPasteMode);\r\n    term.handler(text);\r\n    term.textarea.value = '';\r\n    term.emit('paste', text);\r\n    term.cancel(ev);\r\n  };\r\n\r\n  if (term.browser.isMSIE) {\r\n    if (window.clipboardData) {\r\n      text = window.clipboardData.getData('Text');\r\n      dispatchPaste(text);\r\n    }\r\n  } else {\r\n    if (ev.clipboardData) {\r\n      text = ev.clipboardData.getData('text/plain');\r\n      dispatchPaste(text);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Moves the textarea under the mouse cursor and focuses it.\r\n * @param ev The original right click event to be handled.\r\n * @param textarea The terminal's textarea.\r\n */\r\nexport function moveTextAreaUnderMouseCursor(ev: MouseEvent, textarea: HTMLTextAreaElement): void {\r\n  // Bring textarea at the cursor position\r\n  textarea.style.position = 'fixed';\r\n  textarea.style.width = '20px';\r\n  textarea.style.height = '20px';\r\n  textarea.style.left = (ev.clientX - 10) + 'px';\r\n  textarea.style.top = (ev.clientY - 10) + 'px';\r\n  textarea.style.zIndex = '1000';\r\n\r\n  textarea.focus();\r\n\r\n  // Reset the terminal textarea's styling\r\n  // Timeout needs to be long enough for click event to be handled.\r\n  setTimeout(() => {\r\n    textarea.style.position = null;\r\n    textarea.style.width = null;\r\n    textarea.style.height = null;\r\n    textarea.style.left = null;\r\n    textarea.style.top = null;\r\n    textarea.style.zIndex = null;\r\n  }, 200);\r\n}\r\n\r\n/**\r\n * Bind to right-click event and allow right-click copy and paste.\r\n * @param ev The original right click event to be handled.\r\n * @param textarea The terminal's textarea.\r\n * @param selectionManager The terminal's selection manager.\r\n * @param shouldSelectWord If true and there is no selection the current word will be selected\r\n */\r\nexport function rightClickHandler(ev: MouseEvent, textarea: HTMLTextAreaElement, selectionManager: ISelectionManager, shouldSelectWord: boolean): void {\r\n  moveTextAreaUnderMouseCursor(ev, textarea);\r\n\r\n  if (shouldSelectWord && !selectionManager.isClickInSelection(ev)) {\r\n    selectionManager.selectWordAtCursor(ev);\r\n  }\r\n\r\n  // Get textarea ready to copy from the context menu\r\n  textarea.value = selectionManager.selectionText;\r\n  textarea.select();\r\n}\r\n","/**\r\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ICharMeasure, ITerminalOptions } from '../Types';\r\nimport { EventEmitter } from '../common/EventEmitter';\r\n\r\n/**\r\n * Utility class that measures the size of a character. Measurements are done in\r\n * the DOM rather than with a canvas context because support for extracting the\r\n * height of characters is patchy across browsers.\r\n */\r\nexport class CharMeasure extends EventEmitter implements ICharMeasure {\r\n  private _document: Document;\r\n  private _parentElement: HTMLElement;\r\n  private _measureElement: HTMLElement;\r\n  private _width: number;\r\n  private _height: number;\r\n\r\n  constructor(document: Document, parentElement: HTMLElement) {\r\n    super();\r\n    this._document = document;\r\n    this._parentElement = parentElement;\r\n    this._measureElement = this._document.createElement('span');\r\n    this._measureElement.classList.add('xterm-char-measure-element');\r\n    this._measureElement.textContent = 'W';\r\n    this._measureElement.setAttribute('aria-hidden', 'true');\r\n    this._parentElement.appendChild(this._measureElement);\r\n  }\r\n\r\n  public get width(): number {\r\n    return this._width;\r\n  }\r\n\r\n  public get height(): number {\r\n    return this._height;\r\n  }\r\n\r\n  public measure(options: ITerminalOptions): void {\r\n    this._measureElement.style.fontFamily = options.fontFamily;\r\n    this._measureElement.style.fontSize = `${options.fontSize}px`;\r\n    const geometry = this._measureElement.getBoundingClientRect();\r\n    // The element is likely currently display:none, we should retain the\r\n    // previous value.\r\n    if (geometry.width === 0 || geometry.height === 0) {\r\n      return;\r\n    }\r\n    const adjustedHeight = Math.ceil(geometry.height);\r\n    if (this._width !== geometry.width || this._height !== adjustedHeight) {\r\n      this._width = geometry.width;\r\n      this._height = adjustedHeight;\r\n      this.emit('charsizechanged');\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_ATTR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_CODE_INDEX, NULL_CELL_CODE, WHITESPACE_CELL_CHAR } from '../../Buffer';\r\nimport { FLAGS } from '../Types';\r\nimport { IBufferLine } from '../../Types';\r\nimport { DEFAULT_COLOR, INVERTED_DEFAULT_COLOR } from '../atlas/Types';\r\n\r\nexport const BOLD_CLASS = 'xterm-bold';\r\nexport const ITALIC_CLASS = 'xterm-italic';\r\nexport const CURSOR_CLASS = 'xterm-cursor';\r\nexport const CURSOR_STYLE_BLOCK_CLASS = 'xterm-cursor-block';\r\nexport const CURSOR_STYLE_BAR_CLASS = 'xterm-cursor-bar';\r\nexport const CURSOR_STYLE_UNDERLINE_CLASS = 'xterm-cursor-underline';\r\n\r\nexport class DomRendererRowFactory {\r\n  constructor(\r\n    private _document: Document\r\n  ) {\r\n  }\r\n\r\n  public createRow(lineData: IBufferLine, isCursorRow: boolean, cursorStyle: string | undefined, cursorX: number, cellWidth: number, cols: number): DocumentFragment {\r\n    const fragment = this._document.createDocumentFragment();\r\n\r\n    // Find the line length first, this prevents the need to output a bunch of\r\n    // empty cells at the end. This cannot easily be integrated into the main\r\n    // loop below because of the colCount feature (which can be removed after we\r\n    // properly support reflow and disallow data to go beyond the right-side of\r\n    // the viewport).\r\n    let lineLength = 0;\r\n    for (let x = Math.min(lineData.length, cols) - 1; x >= 0; x--) {\r\n      const charData = lineData.get(x);\r\n      const code = charData[CHAR_DATA_CODE_INDEX];\r\n      if (code !== NULL_CELL_CODE || (isCursorRow && x === cursorX)) {\r\n        lineLength = x + 1;\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (let x = 0; x < lineLength; x++) {\r\n      const charData = lineData.get(x);\r\n      const char = charData[CHAR_DATA_CHAR_INDEX] || WHITESPACE_CELL_CHAR;\r\n      const attr = charData[CHAR_DATA_ATTR_INDEX];\r\n      const width = charData[CHAR_DATA_WIDTH_INDEX];\r\n\r\n      // The character to the left is a wide character, drawing is owned by the char at x-1\r\n      if (width === 0) {\r\n        continue;\r\n      }\r\n\r\n      const charElement = this._document.createElement('span');\r\n      if (width > 1) {\r\n        charElement.style.width = `${cellWidth * width}px`;\r\n      }\r\n\r\n      const flags = attr >> 18;\r\n      let bg = attr & 0x1ff;\r\n      let fg = (attr >> 9) & 0x1ff;\r\n\r\n      if (isCursorRow && x === cursorX) {\r\n        charElement.classList.add(CURSOR_CLASS);\r\n\r\n        switch (cursorStyle) {\r\n          case 'bar':\r\n            charElement.classList.add(CURSOR_STYLE_BAR_CLASS);\r\n            break;\r\n          case 'underline':\r\n            charElement.classList.add(CURSOR_STYLE_UNDERLINE_CLASS);\r\n            break;\r\n          default:\r\n            charElement.classList.add(CURSOR_STYLE_BLOCK_CLASS);\r\n            break;\r\n        }\r\n      }\r\n\r\n      // If inverse flag is on, the foreground should become the background.\r\n      if (flags & FLAGS.INVERSE) {\r\n        const temp = bg;\r\n        bg = fg;\r\n        fg = temp;\r\n        if (fg === DEFAULT_COLOR) {\r\n          fg = INVERTED_DEFAULT_COLOR;\r\n        }\r\n        if (bg === DEFAULT_COLOR) {\r\n          bg = INVERTED_DEFAULT_COLOR;\r\n        }\r\n      }\r\n\r\n      if (flags & FLAGS.BOLD) {\r\n        // Convert the FG color to the bold variant. This should not happen when\r\n        // the fg is the inverse default color as there is no bold variant.\r\n        if (fg < 8) {\r\n          fg += 8;\r\n        }\r\n        charElement.classList.add(BOLD_CLASS);\r\n      }\r\n\r\n      if (flags & FLAGS.ITALIC) {\r\n        charElement.classList.add(ITALIC_CLASS);\r\n      }\r\n\r\n      charElement.textContent = char;\r\n      if (fg !== DEFAULT_COLOR) {\r\n        charElement.classList.add(`xterm-fg-${fg}`);\r\n      }\r\n      if (bg !== DEFAULT_COLOR) {\r\n        charElement.classList.add(`xterm-bg-${bg}`);\r\n      }\r\n      fragment.appendChild(charElement);\r\n    }\r\n    return fragment;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IRenderer, IRenderDimensions, IColorSet } from '../Types';\r\nimport { ILinkHoverEvent, ITerminal, CharacterJoinerHandler, LinkHoverEventTypes } from '../../Types';\r\nimport { ITheme } from 'xterm';\r\nimport { EventEmitter } from '../../common/EventEmitter';\r\nimport { ColorManager } from '../ColorManager';\r\nimport { RenderDebouncer } from '../../ui/RenderDebouncer';\r\nimport { BOLD_CLASS, ITALIC_CLASS, CURSOR_CLASS, CURSOR_STYLE_BLOCK_CLASS, CURSOR_STYLE_BAR_CLASS, CURSOR_STYLE_UNDERLINE_CLASS, DomRendererRowFactory } from './DomRendererRowFactory';\r\nimport { INVERTED_DEFAULT_COLOR } from '../atlas/Types';\r\n\r\nconst TERMINAL_CLASS_PREFIX = 'xterm-dom-renderer-owner-';\r\nconst ROW_CONTAINER_CLASS = 'xterm-rows';\r\nconst FG_CLASS_PREFIX = 'xterm-fg-';\r\nconst BG_CLASS_PREFIX = 'xterm-bg-';\r\nconst FOCUS_CLASS = 'xterm-focus';\r\nconst SELECTION_CLASS = 'xterm-selection';\r\n\r\nlet nextTerminalId = 1;\r\n\r\n// TODO: Pull into an addon when TS composite projects allow easier sharing of code (not just\r\n// interfaces) between core and addons\r\n\r\n/**\r\n * A fallback renderer for when canvas is slow. This is not meant to be\r\n * particularly fast or feature complete, more just stable and usable for when\r\n * canvas is not an option.\r\n */\r\nexport class DomRenderer extends EventEmitter implements IRenderer {\r\n  private _renderDebouncer: RenderDebouncer;\r\n  private _rowFactory: DomRendererRowFactory;\r\n  private _terminalClass: number = nextTerminalId++;\r\n\r\n  private _themeStyleElement: HTMLStyleElement;\r\n  private _dimensionsStyleElement: HTMLStyleElement;\r\n  private _rowContainer: HTMLElement;\r\n  private _rowElements: HTMLElement[] = [];\r\n  private _selectionContainer: HTMLElement;\r\n\r\n  public dimensions: IRenderDimensions;\r\n  public colorManager: ColorManager;\r\n\r\n  constructor(private _terminal: ITerminal, theme: ITheme | undefined) {\r\n    super();\r\n    const allowTransparency = this._terminal.options.allowTransparency;\r\n    this.colorManager = new ColorManager(document, allowTransparency);\r\n    this.setTheme(theme);\r\n\r\n    this._rowContainer = document.createElement('div');\r\n    this._rowContainer.classList.add(ROW_CONTAINER_CLASS);\r\n    this._rowContainer.style.lineHeight = 'normal';\r\n    this._rowContainer.setAttribute('aria-hidden', 'true');\r\n    this._refreshRowElements(this._terminal.cols, this._terminal.rows);\r\n    this._selectionContainer = document.createElement('div');\r\n    this._selectionContainer.classList.add(SELECTION_CLASS);\r\n    this._selectionContainer.setAttribute('aria-hidden', 'true');\r\n\r\n    this.dimensions = {\r\n      scaledCharWidth: null,\r\n      scaledCharHeight: null,\r\n      scaledCellWidth: null,\r\n      scaledCellHeight: null,\r\n      scaledCharLeft: null,\r\n      scaledCharTop: null,\r\n      scaledCanvasWidth: null,\r\n      scaledCanvasHeight: null,\r\n      canvasWidth: null,\r\n      canvasHeight: null,\r\n      actualCellWidth: null,\r\n      actualCellHeight: null\r\n    };\r\n    this._updateDimensions();\r\n\r\n    this._renderDebouncer = new RenderDebouncer(this._terminal, this._renderRows.bind(this));\r\n    this._rowFactory = new DomRendererRowFactory(document);\r\n\r\n    this._terminal.element.classList.add(TERMINAL_CLASS_PREFIX + this._terminalClass);\r\n    this._terminal.screenElement.appendChild(this._rowContainer);\r\n    this._terminal.screenElement.appendChild(this._selectionContainer);\r\n\r\n    this._terminal.linkifier.on(LinkHoverEventTypes.HOVER, (e: ILinkHoverEvent) => this._onLinkHover(e));\r\n    this._terminal.linkifier.on(LinkHoverEventTypes.LEAVE, (e: ILinkHoverEvent) => this._onLinkLeave(e));\r\n  }\r\n\r\n  public dispose(): void {\r\n    this._terminal.element.classList.remove(TERMINAL_CLASS_PREFIX + this._terminalClass);\r\n    this._terminal.screenElement.removeChild(this._rowContainer);\r\n    this._terminal.screenElement.removeChild(this._selectionContainer);\r\n    this._terminal.screenElement.removeChild(this._themeStyleElement);\r\n    this._terminal.screenElement.removeChild(this._dimensionsStyleElement);\r\n    super.dispose();\r\n  }\r\n\r\n  private _updateDimensions(): void {\r\n    this.dimensions.scaledCharWidth = Math.floor(this._terminal.charMeasure.width * window.devicePixelRatio);\r\n    this.dimensions.scaledCharHeight = Math.ceil(this._terminal.charMeasure.height * window.devicePixelRatio);\r\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.options.letterSpacing);\r\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.options.lineHeight);\r\n    this.dimensions.scaledCharLeft = 0;\r\n    this.dimensions.scaledCharTop = 0;\r\n    this.dimensions.scaledCanvasWidth = this.dimensions.scaledCellWidth * this._terminal.cols;\r\n    this.dimensions.scaledCanvasHeight = this.dimensions.scaledCellHeight * this._terminal.rows;\r\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio);\r\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio);\r\n    this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._terminal.cols;\r\n    this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._terminal.rows;\r\n\r\n    this._rowElements.forEach(element => {\r\n      element.style.width = `${this.dimensions.canvasWidth}px`;\r\n      element.style.height = `${this.dimensions.actualCellHeight}px`;\r\n      element.style.lineHeight = `${this.dimensions.actualCellHeight}px`;\r\n      // Make sure rows don't overflow onto following row\r\n      element.style.overflow = 'hidden';\r\n    });\r\n\r\n    if (!this._dimensionsStyleElement) {\r\n      this._dimensionsStyleElement = document.createElement('style');\r\n      this._terminal.screenElement.appendChild(this._dimensionsStyleElement);\r\n    }\r\n\r\n    const styles =\r\n        `${this._terminalSelector} .${ROW_CONTAINER_CLASS} span {` +\r\n        ` display: inline-block;` +\r\n        ` height: 100%;` +\r\n        ` vertical-align: top;` +\r\n        ` width: ${this.dimensions.actualCellWidth}px` +\r\n        `}`;\r\n\r\n    this._dimensionsStyleElement.innerHTML = styles;\r\n\r\n    this._selectionContainer.style.height = (<any>this._terminal)._viewportElement.style.height;\r\n    this._terminal.screenElement.style.width = `${this.dimensions.canvasWidth}px`;\r\n    this._terminal.screenElement.style.height = `${this.dimensions.canvasHeight}px`;\r\n  }\r\n\r\n  public setTheme(theme: ITheme | undefined): IColorSet {\r\n    if (theme) {\r\n      this.colorManager.setTheme(theme);\r\n    }\r\n\r\n    if (!this._themeStyleElement) {\r\n      this._themeStyleElement = document.createElement('style');\r\n      this._terminal.screenElement.appendChild(this._themeStyleElement);\r\n    }\r\n\r\n    // Base CSS\r\n    let styles =\r\n        `${this._terminalSelector} .${ROW_CONTAINER_CLASS} {` +\r\n        ` color: ${this.colorManager.colors.foreground.css};` +\r\n        ` background-color: ${this.colorManager.colors.background.css};` +\r\n        ` font-family: ${this._terminal.getOption('fontFamily')};` +\r\n        ` font-size: ${this._terminal.getOption('fontSize')}px;` +\r\n        `}`;\r\n    // Text styles\r\n    styles +=\r\n        `${this._terminalSelector} span:not(.${BOLD_CLASS}) {` +\r\n        ` font-weight: ${this._terminal.options.fontWeight};` +\r\n        `}` +\r\n        `${this._terminalSelector} span.${BOLD_CLASS} {` +\r\n        ` font-weight: ${this._terminal.options.fontWeightBold};` +\r\n        `}` +\r\n        `${this._terminalSelector} span.${ITALIC_CLASS} {` +\r\n        ` font-style: italic;` +\r\n        `}`;\r\n    // Cursor\r\n    styles +=\r\n        `${this._terminalSelector} .${ROW_CONTAINER_CLASS}:not(.${FOCUS_CLASS}) .${CURSOR_CLASS} {` +\r\n        ` outline: 1px solid ${this.colorManager.colors.cursor.css};` +\r\n        ` outline-offset: -1px;` +\r\n        `}` +\r\n        `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_BLOCK_CLASS} {` +\r\n        ` background-color: ${this.colorManager.colors.cursor.css};` +\r\n        ` color: ${this.colorManager.colors.cursorAccent.css};` +\r\n        `}` +\r\n        `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_BAR_CLASS} {` +\r\n        ` box-shadow: 1px 0 0 ${this.colorManager.colors.cursor.css} inset;` +\r\n        `}` +\r\n        `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_UNDERLINE_CLASS} {` +\r\n        ` box-shadow: 0 -1px 0 ${this.colorManager.colors.cursor.css} inset;` +\r\n        `}`;\r\n    // Selection\r\n    styles +=\r\n        `${this._terminalSelector} .${SELECTION_CLASS} {` +\r\n        ` position: absolute;` +\r\n        ` top: 0;` +\r\n        ` left: 0;` +\r\n        ` z-index: 1;` +\r\n        ` pointer-events: none;` +\r\n        `}` +\r\n        `${this._terminalSelector} .${SELECTION_CLASS} div {` +\r\n        ` position: absolute;` +\r\n        ` background-color: ${this.colorManager.colors.selection.css};` +\r\n        `}`;\r\n    // Colors\r\n    this.colorManager.colors.ansi.forEach((c, i) => {\r\n      styles +=\r\n          `${this._terminalSelector} .${FG_CLASS_PREFIX}${i} { color: ${c.css}; }` +\r\n          `${this._terminalSelector} .${BG_CLASS_PREFIX}${i} { background-color: ${c.css}; }`;\r\n    });\r\n    styles +=\r\n        `${this._terminalSelector} .${FG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { color: ${this.colorManager.colors.background.css}; }` +\r\n        `${this._terminalSelector} .${BG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { background-color: ${this.colorManager.colors.foreground.css}; }`;\r\n\r\n    this._themeStyleElement.innerHTML = styles;\r\n    return this.colorManager.colors;\r\n  }\r\n\r\n  public onWindowResize(devicePixelRatio: number): void {\r\n    this._updateDimensions();\r\n  }\r\n\r\n  private _refreshRowElements(cols: number, rows: number): void {\r\n    // Add missing elements\r\n    for (let i = this._rowElements.length; i <= rows; i++) {\r\n      const row = document.createElement('div');\r\n      this._rowContainer.appendChild(row);\r\n      this._rowElements.push(row);\r\n    }\r\n    // Remove excess elements\r\n    while (this._rowElements.length > rows) {\r\n      this._rowContainer.removeChild(this._rowElements.pop());\r\n    }\r\n  }\r\n\r\n  public onResize(cols: number, rows: number): void {\r\n    this._refreshRowElements(cols, rows);\r\n    this._updateDimensions();\r\n  }\r\n\r\n  public onCharSizeChanged(): void {\r\n    this._updateDimensions();\r\n  }\r\n\r\n  public onBlur(): void {\r\n    this._rowContainer.classList.remove(FOCUS_CLASS);\r\n  }\r\n\r\n  public onFocus(): void {\r\n    this._rowContainer.classList.add(FOCUS_CLASS);\r\n  }\r\n\r\n  public onSelectionChanged(start: [number, number], end: [number, number], columnSelectMode: boolean): void {\r\n    // Remove all selections\r\n    while (this._selectionContainer.children.length) {\r\n      this._selectionContainer.removeChild(this._selectionContainer.children[0]);\r\n    }\r\n\r\n    // Selection does not exist\r\n    if (!start || !end) {\r\n      return;\r\n    }\r\n\r\n    // Translate from buffer position to viewport position\r\n    const viewportStartRow = start[1] - this._terminal.buffer.ydisp;\r\n    const viewportEndRow = end[1] - this._terminal.buffer.ydisp;\r\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\r\n    const viewportCappedEndRow = Math.min(viewportEndRow, this._terminal.rows - 1);\r\n\r\n    // No need to draw the selection\r\n    if (viewportCappedStartRow >= this._terminal.rows || viewportCappedEndRow < 0) {\r\n      return;\r\n    }\r\n\r\n    // Create the selections\r\n    const documentFragment = document.createDocumentFragment();\r\n\r\n    if (columnSelectMode) {\r\n      documentFragment.appendChild(\r\n        this._createSelectionElement(viewportCappedStartRow, start[0], end[0], viewportCappedEndRow - viewportCappedStartRow + 1)\r\n      );\r\n    } else {\r\n      // Draw first row\r\n      const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\r\n      const endCol = viewportCappedStartRow === viewportCappedEndRow ? end[0] : this._terminal.cols;\r\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow, startCol, endCol));\r\n      // Draw middle rows\r\n      const middleRowsCount = viewportCappedEndRow - viewportCappedStartRow - 1;\r\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow + 1, 0, this._terminal.cols, middleRowsCount));\r\n      // Draw final row\r\n      if (viewportCappedStartRow !== viewportCappedEndRow) {\r\n        // Only draw viewportEndRow if it's not the same as viewporttartRow\r\n        const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : this._terminal.cols;\r\n        documentFragment.appendChild(this._createSelectionElement(viewportCappedEndRow, 0, endCol));\r\n      }\r\n    }\r\n    this._selectionContainer.appendChild(documentFragment);\r\n  }\r\n\r\n  /**\r\n   * Creates a selection element at the specified position.\r\n   * @param row The row of the selection.\r\n   * @param colStart The start column.\r\n   * @param colEnd The end columns.\r\n   */\r\n  private _createSelectionElement(row: number, colStart: number, colEnd: number, rowCount: number = 1): HTMLElement {\r\n    const element = document.createElement('div');\r\n    element.style.height = `${rowCount * this.dimensions.actualCellHeight}px`;\r\n    element.style.top = `${row * this.dimensions.actualCellHeight}px`;\r\n    element.style.left = `${colStart * this.dimensions.actualCellWidth}px`;\r\n    element.style.width = `${this.dimensions.actualCellWidth * (colEnd - colStart)}px`;\r\n    return element;\r\n  }\r\n\r\n  public onCursorMove(): void {\r\n    // No-op, the cursor is drawn when rows are drawn\r\n  }\r\n\r\n  public onOptionsChanged(): void {\r\n    // Force a refresh\r\n    this._updateDimensions();\r\n    this.setTheme(undefined);\r\n    this._terminal.refresh(0, this._terminal.rows - 1);\r\n  }\r\n\r\n  public clear(): void {\r\n    this._rowElements.forEach(e => e.innerHTML = '');\r\n  }\r\n\r\n  public refreshRows(start: number, end: number): void {\r\n    this._renderDebouncer.refresh(start, end);\r\n  }\r\n\r\n  private _renderRows(start: number, end: number): void {\r\n    const terminal = this._terminal;\r\n\r\n    const cursorAbsoluteY = terminal.buffer.ybase + terminal.buffer.y;\r\n    const cursorX = this._terminal.buffer.x;\r\n\r\n    for (let y = start; y <= end; y++) {\r\n      const rowElement = this._rowElements[y];\r\n      rowElement.innerHTML = '';\r\n\r\n      const row = y + terminal.buffer.ydisp;\r\n      const lineData = terminal.buffer.lines.get(row);\r\n      const cursorStyle = terminal.options.cursorStyle;\r\n      rowElement.appendChild(this._rowFactory.createRow(lineData, row === cursorAbsoluteY, cursorStyle, cursorX, this.dimensions.actualCellWidth, terminal.cols));\r\n    }\r\n\r\n    this._terminal.emit('refresh', {start, end});\r\n  }\r\n\r\n  private get _terminalSelector(): string {\r\n    return `.${TERMINAL_CLASS_PREFIX}${this._terminalClass}`;\r\n  }\r\n\r\n  public registerCharacterJoiner(handler: CharacterJoinerHandler): number { return -1; }\r\n  public deregisterCharacterJoiner(joinerId: number): boolean { return false; }\r\n\r\n  private _onLinkHover(e: ILinkHoverEvent): void {\r\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, true);\r\n  }\r\n\r\n  private _onLinkLeave(e: ILinkHoverEvent): void {\r\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, false);\r\n  }\r\n\r\n  private _setCellUnderline(x: number, x2: number, y: number, y2: number, cols: number, enabled: boolean): void {\r\n    while (x !== x2 || y !== y2) {\r\n      const row = this._rowElements[y];\r\n      if (!row) {\r\n        return;\r\n      }\r\n      const span = <HTMLElement>row.children[x];\r\n      if (span) {\r\n        span.style.textDecoration = enabled ? 'underline' : 'none';\r\n      }\r\n      if (++x >= cols) {\r\n        x = 0;\r\n        y++;\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { FontWeight } from 'xterm';\r\nimport { IColorSet } from '../Types';\r\n\r\nexport const DEFAULT_COLOR = 256;\r\nexport const INVERTED_DEFAULT_COLOR = 257;\r\nexport const DIM_OPACITY = 0.5;\r\n\r\nexport const CHAR_ATLAS_CELL_SPACING = 1;\r\n\r\nexport interface IGlyphIdentifier {\r\n  chars: string;\r\n  code: number;\r\n  bg: number;\r\n  fg: number;\r\n  bold: boolean;\r\n  dim: boolean;\r\n  italic: boolean;\r\n}\r\n\r\nexport interface ICharAtlasConfig {\r\n  type: 'none' | 'static' | 'dynamic';\r\n  devicePixelRatio: number;\r\n  fontSize: number;\r\n  fontFamily: string;\r\n  fontWeight: FontWeight;\r\n  fontWeightBold: FontWeight;\r\n  scaledCharWidth: number;\r\n  scaledCharHeight: number;\r\n  allowTransparency: boolean;\r\n  colors: IColorSet;\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { DIM_OPACITY, IGlyphIdentifier, DEFAULT_COLOR, ICharAtlasConfig, CHAR_ATLAS_CELL_SPACING } from './Types';\r\nimport { generateStaticCharAtlasTexture } from './CharAtlasGenerator';\r\nimport BaseCharAtlas from './BaseCharAtlas';\r\nimport { is256Color } from './CharAtlasUtils';\r\n\r\nexport default class StaticCharAtlas extends BaseCharAtlas {\r\n  private _texture: HTMLCanvasElement | ImageBitmap;\r\n\r\n  constructor(private _document: Document, private _config: ICharAtlasConfig) {\r\n    super();\r\n  }\r\n\r\n  private _canvasFactory = (width: number, height: number) => {\r\n    const canvas = this._document.createElement('canvas');\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    // This is useful for debugging\r\n    // document.body.appendChild(canvas);\r\n\r\n    return canvas;\r\n  }\r\n\r\n  protected _doWarmUp(): void {\r\n    const result = generateStaticCharAtlasTexture(window, this._canvasFactory, this._config);\r\n    if (result instanceof HTMLCanvasElement) {\r\n      this._texture = result;\r\n    } else {\r\n      result.then(texture => {\r\n        this._texture = texture;\r\n      });\r\n    }\r\n  }\r\n\r\n  private _isCached(glyph: IGlyphIdentifier, colorIndex: number): boolean {\r\n    const isAscii = glyph.code < 256;\r\n    // A color is basic if it is one of the 4 bit ANSI colors.\r\n    const isBasicColor = glyph.fg < 16;\r\n    const isDefaultColor = glyph.fg === DEFAULT_COLOR;\r\n    const isDefaultBackground = glyph.bg === DEFAULT_COLOR;\r\n    return isAscii && (isBasicColor || isDefaultColor) && isDefaultBackground && !glyph.italic;\r\n  }\r\n\r\n  public draw(\r\n    ctx: CanvasRenderingContext2D,\r\n    glyph: IGlyphIdentifier,\r\n    x: number,\r\n    y: number\r\n  ): boolean {\r\n    // we're not warmed up yet\r\n    if (this._texture === null || this._texture === undefined) {\r\n      return false;\r\n    }\r\n\r\n    let colorIndex = 0;\r\n    if (is256Color(glyph.fg)) {\r\n      colorIndex = 2 + glyph.fg + (glyph.bold ? 16 : 0);\r\n    } else if (glyph.fg === DEFAULT_COLOR) {\r\n      // If default color and bold\r\n      if (glyph.bold) {\r\n        colorIndex = 1;\r\n      }\r\n    }\r\n    if (!this._isCached(glyph, colorIndex)) {\r\n      return false;\r\n    }\r\n\r\n    ctx.save();\r\n\r\n    // ImageBitmap's draw about twice as fast as from a canvas\r\n    const charAtlasCellWidth = this._config.scaledCharWidth + CHAR_ATLAS_CELL_SPACING;\r\n    const charAtlasCellHeight = this._config.scaledCharHeight + CHAR_ATLAS_CELL_SPACING;\r\n\r\n    // Apply alpha to dim the character\r\n    if (glyph.dim) {\r\n      ctx.globalAlpha = DIM_OPACITY;\r\n    }\r\n\r\n    ctx.drawImage(\r\n      this._texture,\r\n      glyph.code * charAtlasCellWidth,\r\n      colorIndex * charAtlasCellHeight,\r\n      charAtlasCellWidth,\r\n      this._config.scaledCharHeight,\r\n      x,\r\n      y,\r\n      charAtlasCellWidth,\r\n      this._config.scaledCharHeight\r\n    );\r\n\r\n    ctx.restore();\r\n\r\n    return true;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n *\r\n * A dummy CharAtlas implementation that always fails to draw characters.\r\n */\r\n\r\nimport { IGlyphIdentifier, ICharAtlasConfig } from './Types';\r\nimport BaseCharAtlas from './BaseCharAtlas';\r\n\r\nexport default class NoneCharAtlas extends BaseCharAtlas {\r\n  constructor(document: Document, config: ICharAtlasConfig) {\r\n    super();\r\n  }\r\n\r\n  public draw(\r\n    ctx: CanvasRenderingContext2D,\r\n    glyph: IGlyphIdentifier,\r\n    x: number,\r\n    y: number\r\n  ): boolean {\r\n    return false;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\ninterface ILinkedListNode<T> {\r\n  prev: ILinkedListNode<T>;\r\n  next: ILinkedListNode<T>;\r\n  key: number;\r\n  value: T;\r\n}\r\n\r\nexport default class LRUMap<T> {\r\n  private _map: { [key: number]: ILinkedListNode<T> } = {};\r\n  private _head: ILinkedListNode<T> = null;\r\n  private _tail: ILinkedListNode<T> = null;\r\n  private _nodePool: ILinkedListNode<T>[] = [];\r\n  public size: number = 0;\r\n\r\n  constructor(public capacity: number) { }\r\n\r\n  private _unlinkNode(node: ILinkedListNode<T>): void {\r\n    const prev = node.prev;\r\n    const next = node.next;\r\n    if (node === this._head) {\r\n      this._head = next;\r\n    }\r\n    if (node === this._tail) {\r\n      this._tail = prev;\r\n    }\r\n    if (prev !== null) {\r\n      prev.next = next;\r\n    }\r\n    if (next !== null) {\r\n      next.prev = prev;\r\n    }\r\n  }\r\n\r\n  private _appendNode(node: ILinkedListNode<T>): void {\r\n    const tail = this._tail;\r\n    if (tail !== null) {\r\n      tail.next = node;\r\n    }\r\n    node.prev = tail;\r\n    node.next = null;\r\n    this._tail = node;\r\n    if (this._head === null) {\r\n      this._head = node;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preallocate a bunch of linked-list nodes. Allocating these nodes ahead of time means that\r\n   * they're more likely to live next to each other in memory, which seems to improve performance.\r\n   *\r\n   * Each empty object only consumes about 60 bytes of memory, so this is pretty cheap, even for\r\n   * large maps.\r\n   */\r\n  public prealloc(count: number): void {\r\n    const nodePool = this._nodePool;\r\n    for (let i = 0; i < count; i++) {\r\n      nodePool.push({\r\n        prev: null,\r\n        next: null,\r\n        key: null,\r\n        value: null\r\n      });\r\n    }\r\n  }\r\n\r\n  public get(key: number): T | null {\r\n    // This is unsafe: We're assuming our keyspace doesn't overlap with Object.prototype. However,\r\n    // it's faster than calling hasOwnProperty, and in our case, it would never overlap.\r\n    const node = this._map[key];\r\n    if (node !== undefined) {\r\n      this._unlinkNode(node);\r\n      this._appendNode(node);\r\n      return node.value;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Gets a value from a key without marking it as the most recently used item.\r\n   */\r\n  public peekValue(key: number): T | null {\r\n    const node = this._map[key];\r\n    if (node !== undefined) {\r\n      return node.value;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public peek(): T | null {\r\n    const head = this._head;\r\n    return head === null ? null : head.value;\r\n  }\r\n\r\n  public set(key: number, value: T): void {\r\n    // This is unsafe: See note above.\r\n    let node = this._map[key];\r\n    if (node !== undefined) {\r\n      // already exists, we just need to mutate it and move it to the end of the list\r\n      node = this._map[key];\r\n      this._unlinkNode(node);\r\n      node.value = value;\r\n    } else if (this.size >= this.capacity) {\r\n      // we're out of space: recycle the head node, move it to the tail\r\n      node = this._head;\r\n      this._unlinkNode(node);\r\n      delete this._map[node.key];\r\n      node.key = key;\r\n      node.value = value;\r\n      this._map[key] = node;\r\n    } else {\r\n      // make a new element\r\n      const nodePool = this._nodePool;\r\n      if (nodePool.length > 0) {\r\n        // use a preallocated node if we can\r\n        node = nodePool.pop();\r\n        node.key = key;\r\n        node.value = value;\r\n      } else {\r\n        node = {\r\n          prev: null,\r\n          next: null,\r\n          key,\r\n          value\r\n        };\r\n      }\r\n      this._map[key] = node;\r\n      this.size++;\r\n    }\r\n    this._appendNode(node);\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { DIM_OPACITY, IGlyphIdentifier, INVERTED_DEFAULT_COLOR, ICharAtlasConfig } from './Types';\r\nimport BaseCharAtlas from './BaseCharAtlas';\r\nimport { DEFAULT_ANSI_COLORS } from '../ColorManager';\r\nimport { clearColor } from './CharAtlasGenerator';\r\nimport LRUMap from './LRUMap';\r\nimport { isFirefox, isSafari } from '../../core/Platform';\r\nimport { IColor } from '../Types';\r\n\r\n// In practice we're probably never going to exhaust a texture this large. For debugging purposes,\r\n// however, it can be useful to set this to a really tiny value, to verify that LRU eviction works.\r\nconst TEXTURE_WIDTH = 1024;\r\nconst TEXTURE_HEIGHT = 1024;\r\n\r\nconst TRANSPARENT_COLOR = {\r\n  css: 'rgba(0, 0, 0, 0)',\r\n  rgba: 0\r\n};\r\n\r\n// Drawing to the cache is expensive: If we have to draw more than this number of glyphs to the\r\n// cache in a single frame, give up on trying to cache anything else, and try to finish the current\r\n// frame ASAP.\r\n//\r\n// This helps to limit the amount of damage a program can do when it would otherwise thrash the\r\n// cache.\r\nconst FRAME_CACHE_DRAW_LIMIT = 100;\r\n\r\n/**\r\n * The number of milliseconds to wait before generating the ImageBitmap, this is to debounce/batch\r\n * the operation as window.createImageBitmap is asynchronous.\r\n */\r\nconst GLYPH_BITMAP_COMMIT_DELAY = 100;\r\n\r\ninterface IGlyphCacheValue {\r\n  index: number;\r\n  isEmpty: boolean;\r\n  inBitmap: boolean;\r\n}\r\n\r\nexport function getGlyphCacheKey(glyph: IGlyphIdentifier): number {\r\n  // Note that this only returns a valid key when code < 256\r\n  // Layout:\r\n  // 0b00000000000000000000000000000001: italic (1)\r\n  // 0b00000000000000000000000000000010: dim (1)\r\n  // 0b00000000000000000000000000000100: bold (1)\r\n  // 0b00000000000000000000111111111000: fg (9)\r\n  // 0b00000000000111111111000000000000: bg (9)\r\n  // 0b00011111111000000000000000000000: code (8)\r\n  // 0b11100000000000000000000000000000: unused (3)\r\n  return glyph.code << 21 | glyph.bg << 12 | glyph.fg << 3 | (glyph.bold ? 0 : 4) + (glyph.dim ? 0 : 2) + (glyph.italic ? 0 : 1);\r\n}\r\n\r\nexport default class DynamicCharAtlas extends BaseCharAtlas {\r\n  // An ordered map that we're using to keep track of where each glyph is in the atlas texture.\r\n  // It's ordered so that we can determine when to remove the old entries.\r\n  private _cacheMap: LRUMap<IGlyphCacheValue>;\r\n\r\n  // The texture that the atlas is drawn to\r\n  private _cacheCanvas: HTMLCanvasElement;\r\n  private _cacheCtx: CanvasRenderingContext2D;\r\n\r\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\r\n  private _tmpCtx: CanvasRenderingContext2D;\r\n\r\n  // The number of characters stored in the atlas by width/height\r\n  private _width: number;\r\n  private _height: number;\r\n\r\n  private _drawToCacheCount: number = 0;\r\n\r\n  // An array of glyph keys that are waiting on the bitmap to be generated.\r\n  private _glyphsWaitingOnBitmap: IGlyphCacheValue[] = [];\r\n\r\n  // The timeout that is used to batch bitmap generation so it's not requested for every new glyph.\r\n  private _bitmapCommitTimeout: number | null = null;\r\n\r\n  // The bitmap to draw from, this is much faster on other browsers than others.\r\n  private _bitmap: ImageBitmap | null = null;\r\n\r\n  constructor(document: Document, private _config: ICharAtlasConfig) {\r\n    super();\r\n    this._cacheCanvas = document.createElement('canvas');\r\n    this._cacheCanvas.width = TEXTURE_WIDTH;\r\n    this._cacheCanvas.height = TEXTURE_HEIGHT;\r\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\r\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\r\n    // set.\r\n    this._cacheCtx = this._cacheCanvas.getContext('2d', {alpha: true});\r\n\r\n    const tmpCanvas = document.createElement('canvas');\r\n    tmpCanvas.width = this._config.scaledCharWidth;\r\n    tmpCanvas.height = this._config.scaledCharHeight;\r\n    this._tmpCtx = tmpCanvas.getContext('2d', {alpha: this._config.allowTransparency});\r\n\r\n    this._width = Math.floor(TEXTURE_WIDTH / this._config.scaledCharWidth);\r\n    this._height = Math.floor(TEXTURE_HEIGHT / this._config.scaledCharHeight);\r\n    const capacity = this._width * this._height;\r\n    this._cacheMap = new LRUMap(capacity);\r\n    this._cacheMap.prealloc(capacity);\r\n\r\n    // This is useful for debugging\r\n    // document.body.appendChild(this._cacheCanvas);\r\n  }\r\n\r\n  public dispose(): void {\r\n    if (this._bitmapCommitTimeout !== null) {\r\n      window.clearTimeout(this._bitmapCommitTimeout);\r\n      this._bitmapCommitTimeout = null;\r\n    }\r\n  }\r\n\r\n  public beginFrame(): void {\r\n    this._drawToCacheCount = 0;\r\n  }\r\n\r\n  public draw(\r\n    ctx: CanvasRenderingContext2D,\r\n    glyph: IGlyphIdentifier,\r\n    x: number,\r\n    y: number\r\n  ): boolean {\r\n    // Space is always an empty cell, special case this as it's so common\r\n    if (glyph.code === 32) {\r\n      return true;\r\n    }\r\n\r\n    // Exit early for uncachable glyphs\r\n    if (!this._canCache(glyph)) {\r\n      return false;\r\n    }\r\n\r\n    const glyphKey = getGlyphCacheKey(glyph);\r\n    const cacheValue = this._cacheMap.get(glyphKey);\r\n    if (cacheValue !== null && cacheValue !== undefined) {\r\n      this._drawFromCache(ctx, cacheValue, x, y);\r\n      return true;\r\n    } else if (this._drawToCacheCount < FRAME_CACHE_DRAW_LIMIT) {\r\n      let index;\r\n      if (this._cacheMap.size < this._cacheMap.capacity) {\r\n        index = this._cacheMap.size;\r\n      } else {\r\n        // we're out of space, so our call to set will delete this item\r\n        index = this._cacheMap.peek().index;\r\n      }\r\n      const cacheValue = this._drawToCache(glyph, index);\r\n      this._cacheMap.set(glyphKey, cacheValue);\r\n      this._drawFromCache(ctx, cacheValue, x, y);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private _canCache(glyph: IGlyphIdentifier): boolean {\r\n    // Only cache ascii and extended characters for now, to be safe. In the future, we could do\r\n    // something more complicated to determine the expected width of a character.\r\n    //\r\n    // If we switch the renderer over to webgl at some point, we may be able to use blending modes\r\n    // to draw overlapping glyphs from the atlas:\r\n    // https://github.com/servo/webrender/issues/464#issuecomment-255632875\r\n    // https://webglfundamentals.org/webgl/lessons/webgl-text-texture.html\r\n    return glyph.code < 256;\r\n  }\r\n\r\n  private _toCoordinateX(index: number): number {\r\n    return (index % this._width) * this._config.scaledCharWidth;\r\n  }\r\n\r\n  private _toCoordinateY(index: number): number {\r\n    return Math.floor(index / this._width) * this._config.scaledCharHeight;\r\n  }\r\n\r\n  private _drawFromCache(\r\n    ctx: CanvasRenderingContext2D,\r\n    cacheValue: IGlyphCacheValue,\r\n    x: number,\r\n    y: number\r\n  ): void {\r\n    // We don't actually need to do anything if this is whitespace.\r\n    if (cacheValue.isEmpty) {\r\n      return;\r\n    }\r\n    const cacheX = this._toCoordinateX(cacheValue.index);\r\n    const cacheY = this._toCoordinateY(cacheValue.index);\r\n    ctx.drawImage(\r\n      cacheValue.inBitmap ? this._bitmap : this._cacheCanvas,\r\n      cacheX,\r\n      cacheY,\r\n      this._config.scaledCharWidth,\r\n      this._config.scaledCharHeight,\r\n      x,\r\n      y,\r\n      this._config.scaledCharWidth,\r\n      this._config.scaledCharHeight\r\n    );\r\n  }\r\n\r\n  private _getColorFromAnsiIndex(idx: number): IColor {\r\n    if (idx < this._config.colors.ansi.length) {\r\n      return this._config.colors.ansi[idx];\r\n    }\r\n    return DEFAULT_ANSI_COLORS[idx];\r\n  }\r\n\r\n  private _getBackgroundColor(glyph: IGlyphIdentifier): IColor {\r\n    if (this._config.allowTransparency) {\r\n      // The background color might have some transparency, so we need to render it as fully\r\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\r\n      // around the anti-aliased edges of the glyph, and it would look too dark.\r\n      return TRANSPARENT_COLOR;\r\n    } else if (glyph.bg === INVERTED_DEFAULT_COLOR) {\r\n      return this._config.colors.foreground;\r\n    } else if (glyph.bg < 256) {\r\n      return this._getColorFromAnsiIndex(glyph.bg);\r\n    }\r\n    return this._config.colors.background;\r\n  }\r\n\r\n  private _getForegroundColor(glyph: IGlyphIdentifier): IColor {\r\n    if (glyph.fg === INVERTED_DEFAULT_COLOR) {\r\n      return this._config.colors.background;\r\n    } else if (glyph.fg < 256) {\r\n      // 256 color support\r\n      return this._getColorFromAnsiIndex(glyph.fg);\r\n    }\r\n    return this._config.colors.foreground;\r\n  }\r\n\r\n  // TODO: We do this (or something similar) in multiple places. We should split this off\r\n  // into a shared function.\r\n  private _drawToCache(glyph: IGlyphIdentifier, index: number): IGlyphCacheValue {\r\n    this._drawToCacheCount++;\r\n\r\n    this._tmpCtx.save();\r\n\r\n    // draw the background\r\n    const backgroundColor = this._getBackgroundColor(glyph);\r\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha, regardless of\r\n    // transparency in backgroundColor\r\n    this._tmpCtx.globalCompositeOperation = 'copy';\r\n    this._tmpCtx.fillStyle = backgroundColor.css;\r\n    this._tmpCtx.fillRect(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight);\r\n    this._tmpCtx.globalCompositeOperation = 'source-over';\r\n\r\n    // draw the foreground/glyph\r\n    const fontWeight = glyph.bold ? this._config.fontWeightBold : this._config.fontWeight;\r\n    const fontStyle = glyph.italic ? 'italic' : '';\r\n    this._tmpCtx.font =\r\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\r\n    this._tmpCtx.textBaseline = 'middle';\r\n\r\n    this._tmpCtx.fillStyle = this._getForegroundColor(glyph).css;\r\n\r\n    // Apply alpha to dim the character\r\n    if (glyph.dim) {\r\n      this._tmpCtx.globalAlpha = DIM_OPACITY;\r\n    }\r\n    // Draw the character\r\n    this._tmpCtx.fillText(glyph.chars, 0, this._config.scaledCharHeight / 2);\r\n    this._tmpCtx.restore();\r\n\r\n    // clear the background from the character to avoid issues with drawing over the previous\r\n    // character if it extends past it's bounds\r\n    const imageData = this._tmpCtx.getImageData(\r\n      0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight\r\n    );\r\n    let isEmpty = false;\r\n    if (!this._config.allowTransparency) {\r\n      isEmpty = clearColor(imageData, backgroundColor);\r\n    }\r\n\r\n    // copy the data from imageData to _cacheCanvas\r\n    const x = this._toCoordinateX(index);\r\n    const y = this._toCoordinateY(index);\r\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\r\n    this._cacheCtx.putImageData(imageData, x, y);\r\n\r\n    // Add the glyph and queue it to the bitmap (if the browser supports it)\r\n    const cacheValue = {\r\n      index,\r\n      isEmpty,\r\n      inBitmap: false\r\n    };\r\n    this._addGlyphToBitmap(cacheValue);\r\n\r\n    return cacheValue;\r\n  }\r\n\r\n  private _addGlyphToBitmap(cacheValue: IGlyphCacheValue): void {\r\n    // Support is patchy for createImageBitmap at the moment, pass a canvas back\r\n    // if support is lacking as drawImage works there too. Firefox is also\r\n    // included here as ImageBitmap appears both buggy and has horrible\r\n    // performance (tested on v55).\r\n    if (!('createImageBitmap' in window) || isFirefox || isSafari) {\r\n      return;\r\n    }\r\n\r\n    // Add the glyph to the queue\r\n    this._glyphsWaitingOnBitmap.push(cacheValue);\r\n\r\n    // Check if bitmap generation timeout already exists\r\n    if (this._bitmapCommitTimeout !== null) {\r\n      return;\r\n    }\r\n\r\n    this._bitmapCommitTimeout = window.setTimeout(() => this._generateBitmap(), GLYPH_BITMAP_COMMIT_DELAY);\r\n  }\r\n\r\n  private _generateBitmap(): void {\r\n    const glyphsMovingToBitmap = this._glyphsWaitingOnBitmap;\r\n    this._glyphsWaitingOnBitmap = [];\r\n    window.createImageBitmap(this._cacheCanvas).then(bitmap => {\r\n      // Set bitmap\r\n      this._bitmap = bitmap;\r\n\r\n      // Mark all new glyphs as in bitmap, excluding glyphs that came in after\r\n      // the bitmap was requested\r\n      for (let i = 0; i < glyphsMovingToBitmap.length; i++) {\r\n        const value = glyphsMovingToBitmap[i];\r\n        // It doesn't matter if the value was already evicted, it will be\r\n        // released from memory after this block if so.\r\n        value.inBitmap = true;\r\n      }\r\n    });\r\n    this._bitmapCommitTimeout = null;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal } from '../../Types';\r\nimport { IColorSet } from '../Types';\r\nimport { DEFAULT_COLOR, ICharAtlasConfig } from './Types';\r\n\r\nexport function generateConfig(scaledCharWidth: number, scaledCharHeight: number, terminal: ITerminal, colors: IColorSet): ICharAtlasConfig {\r\n  // null out some fields that don't matter\r\n  const clonedColors = <IColorSet>{\r\n    foreground: colors.foreground,\r\n    background: colors.background,\r\n    cursor: null,\r\n    cursorAccent: null,\r\n    selection: null,\r\n    // For the static char atlas, we only use the first 16 colors, but we need all 256 for the\r\n    // dynamic character atlas.\r\n    ansi: colors.ansi.slice(0, 16)\r\n  };\r\n  return {\r\n    type: terminal.options.experimentalCharAtlas,\r\n    devicePixelRatio: window.devicePixelRatio,\r\n    scaledCharWidth,\r\n    scaledCharHeight,\r\n    fontFamily: terminal.options.fontFamily,\r\n    fontSize: terminal.options.fontSize,\r\n    fontWeight: terminal.options.fontWeight,\r\n    fontWeightBold: terminal.options.fontWeightBold,\r\n    allowTransparency: terminal.options.allowTransparency,\r\n    colors: clonedColors\r\n  };\r\n}\r\n\r\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\r\n  for (let i = 0; i < a.colors.ansi.length; i++) {\r\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\r\n      return false;\r\n    }\r\n  }\r\n  return a.type === b.type &&\r\n      a.devicePixelRatio === b.devicePixelRatio &&\r\n      a.fontFamily === b.fontFamily &&\r\n      a.fontSize === b.fontSize &&\r\n      a.fontWeight === b.fontWeight &&\r\n      a.fontWeightBold === b.fontWeightBold &&\r\n      a.allowTransparency === b.allowTransparency &&\r\n      a.scaledCharWidth === b.scaledCharWidth &&\r\n      a.scaledCharHeight === b.scaledCharHeight &&\r\n      a.colors.foreground === b.colors.foreground &&\r\n      a.colors.background === b.colors.background;\r\n}\r\n\r\nexport function is256Color(colorCode: number): boolean {\r\n  return colorCode < DEFAULT_COLOR;\r\n}\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { FontWeight } from 'xterm';\r\nimport { isFirefox, isSafari } from '../../core/Platform';\r\nimport { IColor } from '../Types';\r\nimport { ICharAtlasConfig, CHAR_ATLAS_CELL_SPACING } from './Types';\r\n\r\n/**\r\n * Generates a char atlas.\r\n * @param context The window or worker context.\r\n * @param canvasFactory A function to generate a canvas with a width or height.\r\n * @param config The config for the new char atlas.\r\n */\r\nexport function generateStaticCharAtlasTexture(context: Window, canvasFactory: (width: number, height: number) => HTMLCanvasElement, config: ICharAtlasConfig): HTMLCanvasElement | Promise<ImageBitmap> {\r\n  const cellWidth = config.scaledCharWidth + CHAR_ATLAS_CELL_SPACING;\r\n  const cellHeight = config.scaledCharHeight + CHAR_ATLAS_CELL_SPACING;\r\n  const canvas = canvasFactory(\r\n    /*255 ascii chars*/255 * cellWidth,\r\n    (/*default+default bold*/2 + /*0-15*/16 + /*0-15 bold*/16) * cellHeight\r\n  );\r\n  const ctx = canvas.getContext('2d', {alpha: config.allowTransparency});\r\n\r\n  ctx.fillStyle = config.colors.background.css;\r\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n  ctx.save();\r\n  ctx.fillStyle = config.colors.foreground.css;\r\n  ctx.font = getFont(config.fontWeight, config);\r\n  ctx.textBaseline = 'middle';\r\n\r\n  // Default color\r\n  for (let i = 0; i < 256; i++) {\r\n    ctx.save();\r\n    ctx.beginPath();\r\n    ctx.rect(i * cellWidth, 0, cellWidth, cellHeight);\r\n    ctx.clip();\r\n    ctx.fillText(String.fromCharCode(i), i * cellWidth, cellHeight / 2);\r\n    ctx.restore();\r\n  }\r\n  // Default color bold\r\n  ctx.save();\r\n  ctx.font = getFont(config.fontWeightBold, config);\r\n  for (let i = 0; i < 256; i++) {\r\n    ctx.save();\r\n    ctx.beginPath();\r\n    ctx.rect(i * cellWidth, cellHeight, cellWidth, cellHeight);\r\n    ctx.clip();\r\n    ctx.fillText(String.fromCharCode(i), i * cellWidth, cellHeight * 1.5);\r\n    ctx.restore();\r\n  }\r\n  ctx.restore();\r\n\r\n  // Colors 0-15\r\n  ctx.font = getFont(config.fontWeight, config);\r\n  for (let colorIndex = 0; colorIndex < 16; colorIndex++) {\r\n    const y = (colorIndex + 2) * cellHeight;\r\n    // Draw ascii characters\r\n    for (let i = 0; i < 256; i++) {\r\n      ctx.save();\r\n      ctx.beginPath();\r\n      ctx.rect(i * cellWidth, y, cellWidth, cellHeight);\r\n      ctx.clip();\r\n      ctx.fillStyle = config.colors.ansi[colorIndex].css;\r\n      ctx.fillText(String.fromCharCode(i), i * cellWidth, y + cellHeight / 2);\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  // Colors 0-15 bold\r\n  ctx.font = getFont(config.fontWeightBold, config);\r\n  for (let colorIndex = 0; colorIndex < 16; colorIndex++) {\r\n    const y = (colorIndex + 2 + 16) * cellHeight;\r\n    // Draw ascii characters\r\n    for (let i = 0; i < 256; i++) {\r\n      ctx.save();\r\n      ctx.beginPath();\r\n      ctx.rect(i * cellWidth, y, cellWidth, cellHeight);\r\n      ctx.clip();\r\n      ctx.fillStyle = config.colors.ansi[colorIndex].css;\r\n      ctx.fillText(String.fromCharCode(i), i * cellWidth, y + cellHeight / 2);\r\n      ctx.restore();\r\n    }\r\n  }\r\n  ctx.restore();\r\n\r\n  // Support is patchy for createImageBitmap at the moment, pass a canvas back\r\n  // if support is lacking as drawImage works there too. Firefox is also\r\n  // included here as ImageBitmap appears both buggy and has horrible\r\n  // performance (tested on v55).\r\n  if (!('createImageBitmap' in context) || isFirefox || isSafari) {\r\n    // Don't attempt to clear background colors if createImageBitmap is not supported\r\n    return canvas;\r\n  }\r\n\r\n  const charAtlasImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n  // Remove the background color from the image so characters may overlap\r\n  clearColor(charAtlasImageData, config.colors.background);\r\n\r\n  return context.createImageBitmap(charAtlasImageData);\r\n}\r\n\r\n/**\r\n * Makes a partiicular rgb color in an ImageData completely transparent.\r\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\r\n */\r\nexport function clearColor(imageData: ImageData, color: IColor): boolean {\r\n  let isEmpty = true;\r\n  const r = color.rgba >>> 24;\r\n  const g = color.rgba >>> 16 & 0xFF;\r\n  const b = color.rgba >>> 8 & 0xFF;\r\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\r\n    if (imageData.data[offset] === r &&\r\n        imageData.data[offset + 1] === g &&\r\n        imageData.data[offset + 2] === b) {\r\n      imageData.data[offset + 3] = 0;\r\n    } else {\r\n      isEmpty = false;\r\n    }\r\n  }\r\n  return isEmpty;\r\n}\r\n\r\nfunction getFont(fontWeight: FontWeight, config: ICharAtlasConfig): string {\r\n  return `${fontWeight} ${config.fontSize * config.devicePixelRatio}px ${config.fontFamily}`;\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal } from '../../Types';\r\nimport { IColorSet } from '../Types';\r\nimport { generateConfig, configEquals } from './CharAtlasUtils';\r\nimport BaseCharAtlas from './BaseCharAtlas';\r\nimport DynamicCharAtlas from './DynamicCharAtlas';\r\nimport NoneCharAtlas from './NoneCharAtlas';\r\nimport StaticCharAtlas from './StaticCharAtlas';\r\nimport { ICharAtlasConfig } from './Types';\r\n\r\nconst charAtlasImplementations = {\r\n  'none': NoneCharAtlas,\r\n  'static': StaticCharAtlas,\r\n  'dynamic': DynamicCharAtlas\r\n};\r\n\r\ninterface ICharAtlasCacheEntry {\r\n  atlas: BaseCharAtlas;\r\n  config: ICharAtlasConfig;\r\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\r\n  // this may cause memory leaks.\r\n  ownedBy: ITerminal[];\r\n}\r\n\r\nconst charAtlasCache: ICharAtlasCacheEntry[] = [];\r\n\r\n/**\r\n * Acquires a char atlas, either generating a new one or returning an existing\r\n * one that is in use by another terminal.\r\n * @param terminal The terminal.\r\n * @param colors The colors to use.\r\n */\r\nexport function acquireCharAtlas(\r\n  terminal: ITerminal,\r\n  colors: IColorSet,\r\n  scaledCharWidth: number,\r\n  scaledCharHeight: number\r\n): BaseCharAtlas {\r\n  const newConfig = generateConfig(scaledCharWidth, scaledCharHeight, terminal, colors);\r\n\r\n  // Check to see if the terminal already owns this config\r\n  for (let i = 0; i < charAtlasCache.length; i++) {\r\n    const entry = charAtlasCache[i];\r\n    const ownedByIndex = entry.ownedBy.indexOf(terminal);\r\n    if (ownedByIndex >= 0) {\r\n      if (configEquals(entry.config, newConfig)) {\r\n        return entry.atlas;\r\n      }\r\n      // The configs differ, release the terminal from the entry\r\n      if (entry.ownedBy.length === 1) {\r\n        entry.atlas.dispose();\r\n        charAtlasCache.splice(i, 1);\r\n      } else {\r\n        entry.ownedBy.splice(ownedByIndex, 1);\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Try match a char atlas from the cache\r\n  for (let i = 0; i < charAtlasCache.length; i++) {\r\n    const entry = charAtlasCache[i];\r\n    if (configEquals(entry.config, newConfig)) {\r\n      // Add the terminal to the cache entry and return\r\n      entry.ownedBy.push(terminal);\r\n      return entry.atlas;\r\n    }\r\n  }\r\n\r\n  const newEntry: ICharAtlasCacheEntry = {\r\n    atlas: new charAtlasImplementations[terminal.options.experimentalCharAtlas](\r\n      document,\r\n      newConfig\r\n    ),\r\n    config: newConfig,\r\n    ownedBy: [terminal]\r\n  };\r\n  charAtlasCache.push(newEntry);\r\n  return newEntry.atlas;\r\n}\r\n\r\n/**\r\n * Removes a terminal reference from the cache, allowing its memory to be freed.\r\n * @param terminal The terminal to remove.\r\n */\r\nexport function removeTerminalFromCache(terminal: ITerminal): void {\r\n  for (let i = 0; i < charAtlasCache.length; i++) {\r\n    const index = charAtlasCache[i].ownedBy.indexOf(terminal);\r\n    if (index !== -1) {\r\n      if (charAtlasCache[i].ownedBy.length === 1) {\r\n        // Remove the cache entry if it's the only terminal\r\n        charAtlasCache[i].atlas.dispose();\r\n        charAtlasCache.splice(i, 1);\r\n      } else {\r\n        // Remove the reference from the cache entry\r\n        charAtlasCache[i].ownedBy.splice(index, 1);\r\n      }\r\n      break;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IGlyphIdentifier } from './Types';\r\nimport { IDisposable } from 'xterm';\r\n\r\nexport default abstract class BaseCharAtlas implements IDisposable {\r\n  private _didWarmUp: boolean = false;\r\n\r\n  public dispose(): void { }\r\n\r\n  /**\r\n   * Perform any work needed to warm the cache before it can be used. May be called multiple times.\r\n   * Implement _doWarmUp instead if you only want to get called once.\r\n   */\r\n  public warmUp(): void {\r\n    if (!this._didWarmUp) {\r\n      this._doWarmUp();\r\n      this._didWarmUp = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform any work needed to warm the cache before it can be used. Used by the default\r\n   * implementation of warmUp(), and will only be called once.\r\n   */\r\n  protected _doWarmUp(): void { }\r\n\r\n  /**\r\n   * Called when we start drawing a new frame.\r\n   *\r\n   * TODO: We rely on this getting called by TextRenderLayer. This should really be called by\r\n   * Renderer instead, but we need to make Renderer the source-of-truth for the char atlas, instead\r\n   * of BaseRenderLayer.\r\n   */\r\n  public beginFrame(): void { }\r\n\r\n  /**\r\n   * May be called before warmUp finishes, however it is okay for the implementation to\r\n   * do nothing and return false in that case.\r\n   *\r\n   * @param ctx Where to draw the character onto.\r\n   * @param glyph Information about what to draw\r\n   * @param x The position on the context to start drawing at\r\n   * @param y The position on the context to start drawing at\r\n   * @returns The success state. True if we drew the character.\r\n   */\r\n  public abstract draw(\r\n    ctx: CanvasRenderingContext2D,\r\n    glyph: IGlyphIdentifier,\r\n    x: number,\r\n    y: number\r\n  ): boolean;\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { CHAR_DATA_ATTR_INDEX, CHAR_DATA_CODE_INDEX, CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, NULL_CELL_CODE, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_CODE } from '../Buffer';\r\nimport { FLAGS, IColorSet, IRenderDimensions, ICharacterJoinerRegistry } from './Types';\r\nimport { CharData, ITerminal } from '../Types';\r\nimport { INVERTED_DEFAULT_COLOR, DEFAULT_COLOR } from './atlas/Types';\r\nimport { GridCache } from './GridCache';\r\nimport { BaseRenderLayer } from './BaseRenderLayer';\r\nimport { is256Color } from './atlas/CharAtlasUtils';\r\n\r\n/**\r\n * This CharData looks like a null character, which will forc a clear and render\r\n * when the character changes (a regular space ' ' character may not as it's\r\n * drawn state is a cleared cell).\r\n */\r\n// const OVERLAP_OWNED_CHAR_DATA: CharData = [null, '', 0, -1];\r\n\r\nexport class TextRenderLayer extends BaseRenderLayer {\r\n  private _state: GridCache<CharData>;\r\n  private _characterWidth: number;\r\n  private _characterFont: string;\r\n  private _characterOverlapCache: { [key: string]: boolean } = {};\r\n  private _characterJoinerRegistry: ICharacterJoinerRegistry;\r\n\r\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet, characterJoinerRegistry: ICharacterJoinerRegistry, alpha: boolean) {\r\n    super(container, 'text', zIndex, alpha, colors);\r\n    this._state = new GridCache<CharData>();\r\n    this._characterJoinerRegistry = characterJoinerRegistry;\r\n  }\r\n\r\n  public resize(terminal: ITerminal, dim: IRenderDimensions): void {\r\n    super.resize(terminal, dim);\r\n\r\n    // Clear the character width cache if the font or width has changed\r\n    const terminalFont = this._getFont(terminal, false, false);\r\n    if (this._characterWidth !== dim.scaledCharWidth || this._characterFont !== terminalFont) {\r\n      this._characterWidth = dim.scaledCharWidth;\r\n      this._characterFont = terminalFont;\r\n      this._characterOverlapCache = {};\r\n    }\r\n    // Resizing the canvas discards the contents of the canvas so clear state\r\n    this._state.clear();\r\n    this._state.resize(terminal.cols, terminal.rows);\r\n  }\r\n\r\n  public reset(terminal: ITerminal): void {\r\n    this._state.clear();\r\n    this.clearAll();\r\n  }\r\n\r\n  private _forEachCell(\r\n    terminal: ITerminal,\r\n    firstRow: number,\r\n    lastRow: number,\r\n    joinerRegistry: ICharacterJoinerRegistry | null,\r\n    callback: (\r\n      code: number,\r\n      chars: string,\r\n      width: number,\r\n      x: number,\r\n      y: number,\r\n      fg: number,\r\n      bg: number,\r\n      flags: number\r\n    ) => void\r\n  ): void {\r\n    for (let y = firstRow; y <= lastRow; y++) {\r\n      const row = y + terminal.buffer.ydisp;\r\n      const line = terminal.buffer.lines.get(row);\r\n      const joinedRanges = joinerRegistry ? joinerRegistry.getJoinedCharacters(row) : [];\r\n      for (let x = 0; x < terminal.cols; x++) {\r\n        const charData = line.get(x);\r\n        let code: number = <number>charData[CHAR_DATA_CODE_INDEX] || WHITESPACE_CELL_CODE;\r\n\r\n        // Can either represent character(s) for a single cell or multiple cells\r\n        // if indicated by a character joiner.\r\n        let chars: string = charData[CHAR_DATA_CHAR_INDEX] || WHITESPACE_CELL_CHAR;\r\n        const attr: number = charData[CHAR_DATA_ATTR_INDEX];\r\n        let width: number = charData[CHAR_DATA_WIDTH_INDEX];\r\n\r\n        // If true, indicates that the current character(s) to draw were joined.\r\n        let isJoined = false;\r\n        let lastCharX = x;\r\n\r\n        // The character to the left is a wide character, drawing is owned by\r\n        // the char at x-1\r\n        if (width === 0) {\r\n          continue;\r\n        }\r\n\r\n        // Process any joined character ranges as needed. Because of how the\r\n        // ranges are produced, we know that they are valid for the characters\r\n        // and attributes of our input.\r\n        if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\r\n          isJoined = true;\r\n          const range = joinedRanges.shift();\r\n\r\n          // We already know the exact start and end column of the joined range,\r\n          // so we get the string and width representing it directly\r\n          chars = terminal.buffer.translateBufferLineToString(\r\n            row,\r\n            true,\r\n            range[0],\r\n            range[1]\r\n          );\r\n          width = range[1] - range[0];\r\n          code = Infinity;\r\n\r\n          // Skip over the cells occupied by this range in the loop\r\n          lastCharX = range[1] - 1;\r\n        }\r\n\r\n        // If the character is an overlapping char and the character to the\r\n        // right is a space, take ownership of the cell to the right. We skip\r\n        // this check for joined characters because their rendering likely won't\r\n        // yield the same result as rendering the last character individually.\r\n        if (!isJoined && this._isOverlapping(charData)) {\r\n          // If the character is overlapping, we want to force a re-render on every\r\n          // frame. This is specifically to work around the case where two\r\n          // overlaping chars `a` and `b` are adjacent, the cursor is moved to b and a\r\n          // space is added. Without this, the first half of `b` would never\r\n          // get removed, and `a` would not re-render because it thinks it's\r\n          // already in the correct state.\r\n          // this._state.cache[x][y] = OVERLAP_OWNED_CHAR_DATA;\r\n          if (lastCharX < line.length - 1 && line.get(lastCharX + 1)[CHAR_DATA_CODE_INDEX] === NULL_CELL_CODE) {\r\n            width = 2;\r\n            // this._clearChar(x + 1, y);\r\n            // The overlapping char's char data will force a clear and render when the\r\n            // overlapping char is no longer to the left of the character and also when\r\n            // the space changes to another character.\r\n            // this._state.cache[x + 1][y] = OVERLAP_OWNED_CHAR_DATA;\r\n          }\r\n        }\r\n\r\n        const flags = attr >> 18;\r\n        let bg = attr & 0x1ff;\r\n        let fg = (attr >> 9) & 0x1ff;\r\n\r\n        // If inverse flag is on, the foreground should become the background.\r\n        if (flags & FLAGS.INVERSE) {\r\n          const temp = bg;\r\n          bg = fg;\r\n          fg = temp;\r\n          if (fg === DEFAULT_COLOR) {\r\n            fg = INVERTED_DEFAULT_COLOR;\r\n          }\r\n          if (bg === DEFAULT_COLOR) {\r\n            bg = INVERTED_DEFAULT_COLOR;\r\n          }\r\n        }\r\n\r\n        callback(\r\n          code,\r\n          chars,\r\n          width,\r\n          x,\r\n          y,\r\n          fg,\r\n          bg,\r\n          flags\r\n        );\r\n\r\n        x = lastCharX;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws the background for a specified range of columns. Tries to batch adjacent cells of the\r\n   * same color together to reduce draw calls.\r\n   */\r\n  private _drawBackground(terminal: ITerminal, firstRow: number, lastRow: number): void {\r\n    const ctx = this._ctx;\r\n    const cols = terminal.cols;\r\n    let startX: number = 0;\r\n    let startY: number = 0;\r\n    let prevFillStyle: string | null = null;\r\n\r\n    ctx.save();\r\n\r\n    this._forEachCell(terminal, firstRow, lastRow, null, (code, chars, width, x, y, fg, bg, flags) => {\r\n      // libvte and xterm both draw the background (but not foreground) of invisible characters,\r\n      // so we should too.\r\n      let nextFillStyle = null; // null represents default background color\r\n      if (bg === INVERTED_DEFAULT_COLOR) {\r\n        nextFillStyle = this._colors.foreground.css;\r\n      } else if (is256Color(bg)) {\r\n        nextFillStyle = this._colors.ansi[bg].css;\r\n      }\r\n\r\n      if (prevFillStyle === null) {\r\n        // This is either the first iteration, or the default background was set. Either way, we\r\n        // don't need to draw anything.\r\n        startX = x;\r\n        startY = y;\r\n      } if (y !== startY) {\r\n        // our row changed, draw the previous row\r\n        ctx.fillStyle = prevFillStyle;\r\n        this.fillCells(startX, startY, cols - startX, 1);\r\n        startX = x;\r\n        startY = y;\r\n      } else if (prevFillStyle !== nextFillStyle) {\r\n        // our color changed, draw the previous characters in this row\r\n        ctx.fillStyle = prevFillStyle;\r\n        this.fillCells(startX, startY, x - startX, 1);\r\n        startX = x;\r\n        startY = y;\r\n      }\r\n\r\n      prevFillStyle = nextFillStyle;\r\n    });\r\n\r\n    // flush the last color we encountered\r\n    if (prevFillStyle !== null) {\r\n      ctx.fillStyle = prevFillStyle;\r\n      this.fillCells(startX, startY, cols - startX, 1);\r\n    }\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  private _drawForeground(terminal: ITerminal, firstRow: number, lastRow: number): void {\r\n    this._forEachCell(terminal, firstRow, lastRow, this._characterJoinerRegistry, (code, chars, width, x, y, fg, bg, flags) => {\r\n      if (flags & FLAGS.INVISIBLE) {\r\n        return;\r\n      }\r\n      if (flags & FLAGS.UNDERLINE) {\r\n        this._ctx.save();\r\n        if (fg === INVERTED_DEFAULT_COLOR) {\r\n          this._ctx.fillStyle = this._colors.background.css;\r\n        } else if (is256Color(fg)) {\r\n          // 256 color support\r\n          this._ctx.fillStyle = this._colors.ansi[fg].css;\r\n        } else {\r\n          this._ctx.fillStyle = this._colors.foreground.css;\r\n        }\r\n        this.fillBottomLineAtCells(x, y, width);\r\n        this._ctx.restore();\r\n      }\r\n      this.drawChars(\r\n        terminal, chars, code,\r\n        width, x, y,\r\n        fg, bg,\r\n        !!(flags & FLAGS.BOLD), !!(flags & FLAGS.DIM), !!(flags & FLAGS.ITALIC)\r\n      );\r\n    });\r\n  }\r\n\r\n  public onGridChanged(terminal: ITerminal, firstRow: number, lastRow: number): void {\r\n    // Resize has not been called yet\r\n    if (this._state.cache.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (this._charAtlas) {\r\n      this._charAtlas.beginFrame();\r\n    }\r\n\r\n    this.clearCells(0, firstRow, terminal.cols, lastRow - firstRow + 1);\r\n    this._drawBackground(terminal, firstRow, lastRow);\r\n    this._drawForeground(terminal, firstRow, lastRow);\r\n  }\r\n\r\n  public onOptionsChanged(terminal: ITerminal): void {\r\n    this.setTransparency(terminal, terminal.options.allowTransparency);\r\n  }\r\n\r\n  /**\r\n   * Whether a character is overlapping to the next cell.\r\n   */\r\n  private _isOverlapping(charData: CharData): boolean {\r\n    // Only single cell characters can be overlapping, rendering issues can\r\n    // occur without this check\r\n    if (charData[CHAR_DATA_WIDTH_INDEX] !== 1) {\r\n      return false;\r\n    }\r\n\r\n    // We assume that any ascii character will not overlap\r\n    const code = charData[CHAR_DATA_CODE_INDEX];\r\n    if (code < 256) {\r\n      return false;\r\n    }\r\n\r\n    // Deliver from cache if available\r\n    const char = charData[CHAR_DATA_CHAR_INDEX];\r\n    if (this._characterOverlapCache.hasOwnProperty(char)) {\r\n      return this._characterOverlapCache[char];\r\n    }\r\n\r\n    // Setup the font\r\n    this._ctx.save();\r\n    this._ctx.font = this._characterFont;\r\n\r\n    // Measure the width of the character, but Math.floor it\r\n    // because that is what the renderer does when it calculates\r\n    // the character dimensions we are comparing against\r\n    const overlaps = Math.floor(this._ctx.measureText(char).width) > this._characterWidth;\r\n\r\n    // Restore the original context\r\n    this._ctx.restore();\r\n\r\n    // Cache and return\r\n    this._characterOverlapCache[char] = overlaps;\r\n    return overlaps;\r\n  }\r\n\r\n  /**\r\n   * Clear the charcater at the cell specified.\r\n   * @param x The column of the char.\r\n   * @param y The row of the char.\r\n   */\r\n  // private _clearChar(x: number, y: number): void {\r\n  //   let colsToClear = 1;\r\n  //   // Clear the adjacent character if it was wide\r\n  //   const state = this._state.cache[x][y];\r\n  //   if (state && state[CHAR_DATA_WIDTH_INDEX] === 2) {\r\n  //     colsToClear = 2;\r\n  //   }\r\n  //   this.clearCells(x, y, colsToClear, 1);\r\n  // }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal } from '../Types';\r\nimport { IColorSet, IRenderDimensions } from './Types';\r\nimport { BaseRenderLayer } from './BaseRenderLayer';\r\n\r\ninterface ISelectionState {\r\n  start: [number, number];\r\n  end: [number, number];\r\n  columnSelectMode: boolean;\r\n  ydisp: number;\r\n}\r\n\r\nexport class SelectionRenderLayer extends BaseRenderLayer {\r\n  private _state: ISelectionState;\r\n\r\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet) {\r\n    super(container, 'selection', zIndex, true, colors);\r\n    this._clearState();\r\n  }\r\n\r\n  private _clearState(): void {\r\n    this._state = {\r\n      start: null,\r\n      end: null,\r\n      columnSelectMode: null,\r\n      ydisp: null\r\n    };\r\n  }\r\n\r\n  public resize(terminal: ITerminal, dim: IRenderDimensions): void {\r\n    super.resize(terminal, dim);\r\n    // Resizing the canvas discards the contents of the canvas so clear state\r\n    this._clearState();\r\n  }\r\n\r\n  public reset(terminal: ITerminal): void {\r\n    if (this._state.start && this._state.end) {\r\n      this._clearState();\r\n      this.clearAll();\r\n    }\r\n  }\r\n\r\n  public onSelectionChanged(terminal: ITerminal, start: [number, number], end: [number, number], columnSelectMode: boolean): void {\r\n    // Selection has not changed\r\n    if (!this._didStateChange(start, end, columnSelectMode, terminal.buffer.ydisp)) {\r\n      return;\r\n    }\r\n\r\n    // Remove all selections\r\n    this.clearAll();\r\n\r\n    // Selection does not exist\r\n    if (!start || !end) {\r\n      return;\r\n    }\r\n\r\n    // Translate from buffer position to viewport position\r\n    const viewportStartRow = start[1] - terminal.buffer.ydisp;\r\n    const viewportEndRow = end[1] - terminal.buffer.ydisp;\r\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\r\n    const viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\r\n\r\n    // No need to draw the selection\r\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\r\n      return;\r\n    }\r\n\r\n    this._ctx.fillStyle = this._colors.selection.css;\r\n\r\n    if (columnSelectMode) {\r\n      const startCol = start[0];\r\n      const width = end[0] - startCol;\r\n      const height = viewportCappedEndRow - viewportCappedStartRow + 1;\r\n      this.fillCells(startCol, viewportCappedStartRow, width, height);\r\n    } else {\r\n      // Draw first row\r\n      const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\r\n      const startRowEndCol = viewportCappedStartRow === viewportCappedEndRow ? end[0] : terminal.cols;\r\n      this.fillCells(startCol, viewportCappedStartRow, startRowEndCol - startCol, 1);\r\n\r\n      // Draw middle rows\r\n      const middleRowsCount = Math.max(viewportCappedEndRow - viewportCappedStartRow - 1, 0);\r\n      this.fillCells(0, viewportCappedStartRow + 1, terminal.cols, middleRowsCount);\r\n\r\n      // Draw final row\r\n      if (viewportCappedStartRow !== viewportCappedEndRow) {\r\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\r\n        const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : terminal.cols;\r\n        this.fillCells(0, viewportCappedEndRow, endCol, 1);\r\n      }\r\n    }\r\n\r\n    // Save state for next render\r\n    this._state.start = [start[0], start[1]];\r\n    this._state.end = [end[0], end[1]];\r\n    this._state.columnSelectMode = columnSelectMode;\r\n    this._state.ydisp = terminal.buffer.ydisp;\r\n  }\r\n\r\n  private _didStateChange(start: [number, number], end: [number, number], columnSelectMode: boolean, ydisp: number): boolean {\r\n    return !this._areCoordinatesEqual(start, this._state.start) ||\r\n      !this._areCoordinatesEqual(end, this._state.end) ||\r\n      columnSelectMode !== this._state.columnSelectMode ||\r\n      ydisp !== this._state.ydisp;\r\n  }\r\n\r\n  private _areCoordinatesEqual(coord1: [number, number], coord2: [number, number]): boolean {\r\n    if (!coord1 || !coord2) {\r\n      return false;\r\n    }\r\n\r\n    return coord1[0] === coord2[0] && coord1[1] === coord2[1];\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { TextRenderLayer } from './TextRenderLayer';\r\nimport { SelectionRenderLayer } from './SelectionRenderLayer';\r\nimport { CursorRenderLayer } from './CursorRenderLayer';\r\nimport { ColorManager } from './ColorManager';\r\nimport { IRenderLayer, IColorSet, IRenderer, IRenderDimensions, ICharacterJoinerRegistry } from './Types';\r\nimport { ITerminal, CharacterJoinerHandler } from '../Types';\r\nimport { LinkRenderLayer } from './LinkRenderLayer';\r\nimport { EventEmitter } from '../common/EventEmitter';\r\nimport { RenderDebouncer } from '../ui/RenderDebouncer';\r\nimport { ScreenDprMonitor } from '../ui/ScreenDprMonitor';\r\nimport { ITheme } from 'xterm';\r\nimport { CharacterJoinerRegistry } from '../renderer/CharacterJoinerRegistry';\r\n\r\nexport class Renderer extends EventEmitter implements IRenderer {\r\n  private _renderDebouncer: RenderDebouncer;\r\n\r\n  private _renderLayers: IRenderLayer[];\r\n  private _devicePixelRatio: number;\r\n  private _screenDprMonitor: ScreenDprMonitor;\r\n  private _isPaused: boolean = false;\r\n  private _needsFullRefresh: boolean = false;\r\n  private _characterJoinerRegistry: ICharacterJoinerRegistry;\r\n\r\n  public colorManager: ColorManager;\r\n  public dimensions: IRenderDimensions;\r\n\r\n  constructor(private _terminal: ITerminal, theme: ITheme) {\r\n    super();\r\n    const allowTransparency = this._terminal.options.allowTransparency;\r\n    this.colorManager = new ColorManager(document, allowTransparency);\r\n    this._characterJoinerRegistry = new CharacterJoinerRegistry(_terminal);\r\n    if (theme) {\r\n      this.colorManager.setTheme(theme);\r\n    }\r\n\r\n    this._renderLayers = [\r\n      new TextRenderLayer(this._terminal.screenElement, 0, this.colorManager.colors, this._characterJoinerRegistry, allowTransparency),\r\n      new SelectionRenderLayer(this._terminal.screenElement, 1, this.colorManager.colors),\r\n      new LinkRenderLayer(this._terminal.screenElement, 2, this.colorManager.colors, this._terminal),\r\n      new CursorRenderLayer(this._terminal.screenElement, 3, this.colorManager.colors)\r\n    ];\r\n    this.dimensions = {\r\n      scaledCharWidth: null,\r\n      scaledCharHeight: null,\r\n      scaledCellWidth: null,\r\n      scaledCellHeight: null,\r\n      scaledCharLeft: null,\r\n      scaledCharTop: null,\r\n      scaledCanvasWidth: null,\r\n      scaledCanvasHeight: null,\r\n      canvasWidth: null,\r\n      canvasHeight: null,\r\n      actualCellWidth: null,\r\n      actualCellHeight: null\r\n    };\r\n    this._devicePixelRatio = window.devicePixelRatio;\r\n    this._updateDimensions();\r\n    this.onOptionsChanged();\r\n\r\n    this._renderDebouncer = new RenderDebouncer(this._terminal, this._renderRows.bind(this));\r\n    this._screenDprMonitor = new ScreenDprMonitor();\r\n    this._screenDprMonitor.setListener(() => this.onWindowResize(window.devicePixelRatio));\r\n    this.register(this._screenDprMonitor);\r\n\r\n    // Detect whether IntersectionObserver is detected and enable renderer pause\r\n    // and resume based on terminal visibility if so\r\n    if ('IntersectionObserver' in window) {\r\n      const observer = new IntersectionObserver(e => this.onIntersectionChange(e[0]), { threshold: 0 });\r\n      observer.observe(this._terminal.element);\r\n      this.register({ dispose: () => observer.disconnect() });\r\n    }\r\n  }\r\n\r\n  public dispose(): void {\r\n    super.dispose();\r\n    this._renderLayers.forEach(l => l.dispose());\r\n  }\r\n\r\n  public onIntersectionChange(entry: IntersectionObserverEntry): void {\r\n    this._isPaused = entry.intersectionRatio === 0;\r\n    if (!this._isPaused && this._needsFullRefresh) {\r\n      this._terminal.refresh(0, this._terminal.rows - 1);\r\n    }\r\n  }\r\n\r\n  public onWindowResize(devicePixelRatio: number): void {\r\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\r\n    // and the terminal needs to refreshed\r\n    if (this._devicePixelRatio !== devicePixelRatio) {\r\n      this._devicePixelRatio = devicePixelRatio;\r\n      this.onResize(this._terminal.cols, this._terminal.rows);\r\n    }\r\n  }\r\n\r\n  public setTheme(theme: ITheme): IColorSet {\r\n    this.colorManager.setTheme(theme);\r\n\r\n    // Clear layers and force a full render\r\n    this._renderLayers.forEach(l => {\r\n      l.onThemeChanged(this._terminal, this.colorManager.colors);\r\n      l.reset(this._terminal);\r\n    });\r\n\r\n    if (this._isPaused) {\r\n      this._needsFullRefresh = true;\r\n    } else {\r\n      this._terminal.refresh(0, this._terminal.rows - 1);\r\n    }\r\n\r\n    return this.colorManager.colors;\r\n  }\r\n\r\n  public onResize(cols: number, rows: number): void {\r\n    // Update character and canvas dimensions\r\n    this._updateDimensions();\r\n\r\n    // Resize all render layers\r\n    this._renderLayers.forEach(l => l.resize(this._terminal, this.dimensions));\r\n\r\n    // Force a refresh\r\n    if (this._isPaused) {\r\n      this._needsFullRefresh = true;\r\n    } else {\r\n      this._terminal.refresh(0, this._terminal.rows - 1);\r\n    }\r\n\r\n    // Resize the screen\r\n    this._terminal.screenElement.style.width = `${this.dimensions.canvasWidth}px`;\r\n    this._terminal.screenElement.style.height = `${this.dimensions.canvasHeight}px`;\r\n\r\n    this.emit('resize', {\r\n      width: this.dimensions.canvasWidth,\r\n      height: this.dimensions.canvasHeight\r\n    });\r\n  }\r\n\r\n  public onCharSizeChanged(): void {\r\n    this.onResize(this._terminal.cols, this._terminal.rows);\r\n  }\r\n\r\n  public onBlur(): void {\r\n    this._runOperation(l => l.onBlur(this._terminal));\r\n  }\r\n\r\n  public onFocus(): void {\r\n    this._runOperation(l => l.onFocus(this._terminal));\r\n  }\r\n\r\n  public onSelectionChanged(start: [number, number], end: [number, number], columnSelectMode: boolean = false): void {\r\n    this._runOperation(l => l.onSelectionChanged(this._terminal, start, end, columnSelectMode));\r\n  }\r\n\r\n  public onCursorMove(): void {\r\n    this._runOperation(l => l.onCursorMove(this._terminal));\r\n  }\r\n\r\n  public onOptionsChanged(): void {\r\n    this.colorManager.allowTransparency = this._terminal.options.allowTransparency;\r\n    this._runOperation(l => l.onOptionsChanged(this._terminal));\r\n  }\r\n\r\n  public clear(): void {\r\n    this._runOperation(l => l.reset(this._terminal));\r\n  }\r\n\r\n  private _runOperation(operation: (layer: IRenderLayer) => void): void {\r\n    if (this._isPaused) {\r\n      this._needsFullRefresh = true;\r\n    } else {\r\n      this._renderLayers.forEach(l => operation(l));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Queues a refresh between two rows (inclusive), to be done on next animation\r\n   * frame.\r\n   * @param start The start row.\r\n   * @param end The end row.\r\n   */\r\n  public refreshRows(start: number, end: number): void {\r\n    if (this._isPaused) {\r\n      this._needsFullRefresh = true;\r\n      return;\r\n    }\r\n    this._renderDebouncer.refresh(start, end);\r\n  }\r\n\r\n  /**\r\n   * Performs the refresh loop callback, calling refresh only if a refresh is\r\n   * necessary before queueing up the next one.\r\n   */\r\n  private _renderRows(start: number, end: number): void {\r\n    this._renderLayers.forEach(l => l.onGridChanged(this._terminal, start, end));\r\n    this._terminal.emit('refresh', { start, end });\r\n  }\r\n\r\n  /**\r\n   * Recalculates the character and canvas dimensions.\r\n   */\r\n  private _updateDimensions(): void {\r\n    // Perform a new measure if the CharMeasure dimensions are not yet available\r\n    if (!this._terminal.charMeasure.width || !this._terminal.charMeasure.height) {\r\n      return;\r\n    }\r\n\r\n    // Calculate the scaled character width. Width is floored as it must be\r\n    // drawn to an integer grid in order for the CharAtlas \"stamps\" to not be\r\n    // blurry. When text is drawn to the grid not using the CharAtlas, it is\r\n    // clipped to ensure there is no overlap with the next cell.\r\n    this.dimensions.scaledCharWidth = Math.floor(this._terminal.charMeasure.width * window.devicePixelRatio);\r\n\r\n    // Calculate the scaled character height. Height is ceiled in case\r\n    // devicePixelRatio is a floating point number in order to ensure there is\r\n    // enough space to draw the character to the cell.\r\n    this.dimensions.scaledCharHeight = Math.ceil(this._terminal.charMeasure.height * window.devicePixelRatio);\r\n\r\n    // Calculate the scaled cell height, if lineHeight is not 1 then the value\r\n    // will be floored because since lineHeight can never be lower then 1, there\r\n    // is a guarentee that the scaled line height will always be larger than\r\n    // scaled char height.\r\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.options.lineHeight);\r\n\r\n    // Calculate the y coordinate within a cell that text should draw from in\r\n    // order to draw in the center of a cell.\r\n    this.dimensions.scaledCharTop = this._terminal.options.lineHeight === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\r\n\r\n    // Calculate the scaled cell width, taking the letterSpacing into account.\r\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.options.letterSpacing);\r\n\r\n    // Calculate the x coordinate with a cell that text should draw from in\r\n    // order to draw in the center of a cell.\r\n    this.dimensions.scaledCharLeft = Math.floor(this._terminal.options.letterSpacing / 2);\r\n\r\n    // Recalculate the canvas dimensions; scaled* define the actual number of\r\n    // pixel in the canvas\r\n    this.dimensions.scaledCanvasHeight = this._terminal.rows * this.dimensions.scaledCellHeight;\r\n    this.dimensions.scaledCanvasWidth = this._terminal.cols * this.dimensions.scaledCellWidth;\r\n\r\n    // The the size of the canvas on the page. It's very important that this\r\n    // rounds to nearest integer and not ceils as browsers often set\r\n    // window.devicePixelRatio as something like 1.100000023841858, when it's\r\n    // actually 1.1. Ceiling causes blurriness as the backing canvas image is 1\r\n    // pixel too large for the canvas element size.\r\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio);\r\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio);\r\n\r\n    // Get the _actual_ dimensions of an individual cell. This needs to be\r\n    // derived from the canvasWidth/Height calculated above which takes into\r\n    // account window.devicePixelRatio. CharMeasure.width/height by itself is\r\n    // insufficient when the page is not at 100% zoom level as CharMeasure is\r\n    // measured in CSS pixels, but the actual char size on the canvas can\r\n    // differ.\r\n    this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._terminal.rows;\r\n    this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._terminal.cols;\r\n  }\r\n\r\n  public registerCharacterJoiner(handler: CharacterJoinerHandler): number {\r\n    return this._characterJoinerRegistry.registerCharacterJoiner(handler);\r\n  }\r\n\r\n  public deregisterCharacterJoiner(joinerId: number): boolean {\r\n    return this._characterJoinerRegistry.deregisterCharacterJoiner(joinerId);\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ILinkHoverEvent, ITerminal, ILinkifierAccessor, LinkHoverEventTypes } from '../Types';\r\nimport { IColorSet, IRenderDimensions } from './Types';\r\nimport { BaseRenderLayer } from './BaseRenderLayer';\r\nimport { INVERTED_DEFAULT_COLOR } from './atlas/Types';\r\nimport { is256Color } from './atlas/CharAtlasUtils';\r\n\r\nexport class LinkRenderLayer extends BaseRenderLayer {\r\n  private _state: ILinkHoverEvent = null;\r\n\r\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet, terminal: ILinkifierAccessor) {\r\n    super(container, 'link', zIndex, true, colors);\r\n    terminal.linkifier.on(LinkHoverEventTypes.HOVER, (e: ILinkHoverEvent) => this._onLinkHover(e));\r\n    terminal.linkifier.on(LinkHoverEventTypes.LEAVE, (e: ILinkHoverEvent) => this._onLinkLeave(e));\r\n  }\r\n\r\n  public resize(terminal: ITerminal, dim: IRenderDimensions): void {\r\n    super.resize(terminal, dim);\r\n    // Resizing the canvas discards the contents of the canvas so clear state\r\n    this._state = null;\r\n  }\r\n\r\n  public reset(terminal: ITerminal): void {\r\n    this._clearCurrentLink();\r\n  }\r\n\r\n  private _clearCurrentLink(): void {\r\n    if (this._state) {\r\n      this.clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\r\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\r\n      if (middleRowCount > 0) {\r\n        this.clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\r\n      }\r\n      this.clearCells(0, this._state.y2, this._state.x2, 1);\r\n      this._state = null;\r\n    }\r\n  }\r\n\r\n  private _onLinkHover(e: ILinkHoverEvent): void {\r\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\r\n      this._ctx.fillStyle = this._colors.background.css;\r\n    } else if (is256Color(e.fg)) {\r\n      // 256 color support\r\n      this._ctx.fillStyle = this._colors.ansi[e.fg].css;\r\n    } else {\r\n      this._ctx.fillStyle = this._colors.foreground.css;\r\n    }\r\n\r\n    if (e.y1 === e.y2) {\r\n      // Single line link\r\n      this.fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\r\n    } else {\r\n      // Multi-line link\r\n      this.fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\r\n      for (let y = e.y1 + 1; y < e.y2; y++) {\r\n        this.fillBottomLineAtCells(0, y, e.cols);\r\n      }\r\n      this.fillBottomLineAtCells(0, e.y2, e.x2);\r\n    }\r\n    this._state = e;\r\n  }\r\n\r\n  private _onLinkLeave(e: ILinkHoverEvent): void {\r\n    this._clearCurrentLink();\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nexport class GridCache<T> {\r\n  public cache: T[][];\r\n\r\n  public constructor() {\r\n    this.cache = [];\r\n  }\r\n\r\n  public resize(width: number, height: number): void {\r\n    for (let x = 0; x < width; x++) {\r\n      if (this.cache.length <= x) {\r\n        this.cache.push([]);\r\n      }\r\n      for (let y = this.cache[x].length; y < height; y++) {\r\n        this.cache[x].push(null);\r\n      }\r\n      this.cache[x].length = height;\r\n    }\r\n    this.cache.length = width;\r\n  }\r\n\r\n  public clear(): void {\r\n    for (let x = 0; x < this.cache.length; x++) {\r\n      for (let y = 0; y < this.cache[x].length; y++) {\r\n        this.cache[x][y] = null;\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { CHAR_DATA_WIDTH_INDEX } from '../Buffer';\r\nimport { IColorSet, IRenderDimensions } from './Types';\r\nimport { BaseRenderLayer } from './BaseRenderLayer';\r\nimport { CharData, ITerminal } from '../Types';\r\n\r\ninterface ICursorState {\r\n  x: number;\r\n  y: number;\r\n  isFocused: boolean;\r\n  style: string;\r\n  width: number;\r\n}\r\n\r\n/**\r\n * The time between cursor blinks.\r\n */\r\nconst BLINK_INTERVAL = 600;\r\n\r\nexport class CursorRenderLayer extends BaseRenderLayer {\r\n  private _state: ICursorState;\r\n  private _cursorRenderers: {[key: string]: (terminal: ITerminal, x: number, y: number, charData: CharData) => void};\r\n  private _cursorBlinkStateManager: CursorBlinkStateManager;\r\n\r\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet) {\r\n    super(container, 'cursor', zIndex, true, colors);\r\n    this._state = {\r\n      x: null,\r\n      y: null,\r\n      isFocused: null,\r\n      style: null,\r\n      width: null\r\n    };\r\n    this._cursorRenderers = {\r\n      'bar': this._renderBarCursor.bind(this),\r\n      'block': this._renderBlockCursor.bind(this),\r\n      'underline': this._renderUnderlineCursor.bind(this)\r\n    };\r\n    // TODO: Consider initial options? Maybe onOptionsChanged should be called at the end of open?\r\n  }\r\n\r\n  public resize(terminal: ITerminal, dim: IRenderDimensions): void {\r\n    super.resize(terminal, dim);\r\n    // Resizing the canvas discards the contents of the canvas so clear state\r\n    this._state = {\r\n      x: null,\r\n      y: null,\r\n      isFocused: null,\r\n      style: null,\r\n      width: null\r\n    };\r\n  }\r\n\r\n  public reset(terminal: ITerminal): void {\r\n    this._clearCursor();\r\n    if (this._cursorBlinkStateManager) {\r\n      this._cursorBlinkStateManager.dispose();\r\n      this._cursorBlinkStateManager = null;\r\n      this.onOptionsChanged(terminal);\r\n    }\r\n  }\r\n\r\n  public onBlur(terminal: ITerminal): void {\r\n    if (this._cursorBlinkStateManager) {\r\n      this._cursorBlinkStateManager.pause();\r\n    }\r\n    terminal.refresh(terminal.buffer.y, terminal.buffer.y);\r\n  }\r\n\r\n  public onFocus(terminal: ITerminal): void {\r\n    if (this._cursorBlinkStateManager) {\r\n      this._cursorBlinkStateManager.resume(terminal);\r\n    } else {\r\n      terminal.refresh(terminal.buffer.y, terminal.buffer.y);\r\n    }\r\n  }\r\n\r\n  public onOptionsChanged(terminal: ITerminal): void {\r\n    if (terminal.options.cursorBlink) {\r\n      if (!this._cursorBlinkStateManager) {\r\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(terminal, () => {\r\n          this._render(terminal, true);\r\n        });\r\n      }\r\n    } else {\r\n      if (this._cursorBlinkStateManager) {\r\n        this._cursorBlinkStateManager.dispose();\r\n        this._cursorBlinkStateManager = null;\r\n      }\r\n      // Request a refresh from the terminal as management of rendering is being\r\n      // moved back to the terminal\r\n      terminal.refresh(terminal.buffer.y, terminal.buffer.y);\r\n    }\r\n  }\r\n\r\n  public onCursorMove(terminal: ITerminal): void {\r\n    if (this._cursorBlinkStateManager) {\r\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\r\n    }\r\n  }\r\n\r\n  public onGridChanged(terminal: ITerminal, startRow: number, endRow: number): void {\r\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\r\n      this._render(terminal, false);\r\n    } else {\r\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\r\n    }\r\n  }\r\n\r\n  private _render(terminal: ITerminal, triggeredByAnimationFrame: boolean): void {\r\n    // Don't draw the cursor if it's hidden\r\n    if (!terminal.cursorState || terminal.cursorHidden) {\r\n      this._clearCursor();\r\n      return;\r\n    }\r\n\r\n    const cursorY = terminal.buffer.ybase + terminal.buffer.y;\r\n    const viewportRelativeCursorY = cursorY - terminal.buffer.ydisp;\r\n\r\n    // Don't draw the cursor if it's off-screen\r\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= terminal.rows) {\r\n      this._clearCursor();\r\n      return;\r\n    }\r\n\r\n    const charData = terminal.buffer.lines.get(cursorY).get(terminal.buffer.x);\r\n    if (!charData) {\r\n      return;\r\n    }\r\n\r\n    if (!terminal.isFocused) {\r\n      this._clearCursor();\r\n      this._ctx.save();\r\n      this._ctx.fillStyle = this._colors.cursor.css;\r\n      this._renderBlurCursor(terminal, terminal.buffer.x, viewportRelativeCursorY, charData);\r\n      this._ctx.restore();\r\n      this._state.x = terminal.buffer.x;\r\n      this._state.y = viewportRelativeCursorY;\r\n      this._state.isFocused = false;\r\n      this._state.style = terminal.options.cursorStyle;\r\n      this._state.width = charData[CHAR_DATA_WIDTH_INDEX];\r\n      return;\r\n    }\r\n\r\n    // Don't draw the cursor if it's blinking\r\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\r\n      this._clearCursor();\r\n      return;\r\n    }\r\n\r\n    if (this._state) {\r\n      // The cursor is already in the correct spot, don't redraw\r\n      if (this._state.x === terminal.buffer.x &&\r\n          this._state.y === viewportRelativeCursorY &&\r\n          this._state.isFocused === terminal.isFocused &&\r\n          this._state.style === terminal.options.cursorStyle &&\r\n          this._state.width === charData[CHAR_DATA_WIDTH_INDEX]) {\r\n        return;\r\n      }\r\n      this._clearCursor();\r\n    }\r\n\r\n    this._ctx.save();\r\n    this._cursorRenderers[terminal.options.cursorStyle || 'block'](terminal, terminal.buffer.x, viewportRelativeCursorY, charData);\r\n    this._ctx.restore();\r\n\r\n    this._state.x = terminal.buffer.x;\r\n    this._state.y = viewportRelativeCursorY;\r\n    this._state.isFocused = false;\r\n    this._state.style = terminal.options.cursorStyle;\r\n    this._state.width = charData[CHAR_DATA_WIDTH_INDEX];\r\n  }\r\n\r\n  private _clearCursor(): void {\r\n    if (this._state) {\r\n      this.clearCells(this._state.x, this._state.y, this._state.width, 1);\r\n      this._state = {\r\n        x: null,\r\n        y: null,\r\n        isFocused: null,\r\n        style: null,\r\n        width: null\r\n      };\r\n    }\r\n  }\r\n\r\n  private _renderBarCursor(terminal: ITerminal, x: number, y: number, charData: CharData): void {\r\n    this._ctx.save();\r\n    this._ctx.fillStyle = this._colors.cursor.css;\r\n    this.fillLeftLineAtCell(x, y);\r\n    this._ctx.restore();\r\n  }\r\n\r\n  private _renderBlockCursor(terminal: ITerminal, x: number, y: number, charData: CharData): void {\r\n    this._ctx.save();\r\n    this._ctx.fillStyle = this._colors.cursor.css;\r\n    this.fillCells(x, y, charData[CHAR_DATA_WIDTH_INDEX], 1);\r\n    this._ctx.fillStyle = this._colors.cursorAccent.css;\r\n    this.fillCharTrueColor(terminal, charData, x, y);\r\n    this._ctx.restore();\r\n  }\r\n\r\n  private _renderUnderlineCursor(terminal: ITerminal, x: number, y: number, charData: CharData): void {\r\n    this._ctx.save();\r\n    this._ctx.fillStyle = this._colors.cursor.css;\r\n    this.fillBottomLineAtCells(x, y);\r\n    this._ctx.restore();\r\n  }\r\n\r\n  private _renderBlurCursor(terminal: ITerminal, x: number, y: number, charData: CharData): void {\r\n    this._ctx.save();\r\n    this._ctx.strokeStyle = this._colors.cursor.css;\r\n    this.strokeRectAtCell(x, y, charData[CHAR_DATA_WIDTH_INDEX], 1);\r\n    this._ctx.restore();\r\n  }\r\n}\r\n\r\nclass CursorBlinkStateManager {\r\n  public isCursorVisible: boolean;\r\n\r\n  private _animationFrame: number;\r\n  private _blinkStartTimeout: number;\r\n  private _blinkInterval: number;\r\n\r\n  /**\r\n   * The time at which the animation frame was restarted, this is used on the\r\n   * next render to restart the timers so they don't need to restart the timers\r\n   * multiple times over a short period.\r\n   */\r\n  private _animationTimeRestarted: number;\r\n\r\n  constructor(\r\n    terminal: ITerminal,\r\n    private _renderCallback: () => void\r\n  ) {\r\n    this.isCursorVisible = true;\r\n    if (terminal.isFocused) {\r\n      this._restartInterval();\r\n    }\r\n  }\r\n\r\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\r\n\r\n  public dispose(): void {\r\n    if (this._blinkInterval) {\r\n      window.clearInterval(this._blinkInterval);\r\n      this._blinkInterval = null;\r\n    }\r\n    if (this._blinkStartTimeout) {\r\n      window.clearTimeout(this._blinkStartTimeout);\r\n      this._blinkStartTimeout = null;\r\n    }\r\n    if (this._animationFrame) {\r\n      window.cancelAnimationFrame(this._animationFrame);\r\n      this._animationFrame = null;\r\n    }\r\n  }\r\n\r\n  public restartBlinkAnimation(terminal: ITerminal): void {\r\n    if (this.isPaused) {\r\n      return;\r\n    }\r\n    // Save a timestamp so that the restart can be done on the next interval\r\n    this._animationTimeRestarted = Date.now();\r\n    // Force a cursor render to ensure it's visible and in the correct position\r\n    this.isCursorVisible = true;\r\n    if (!this._animationFrame) {\r\n      this._animationFrame = window.requestAnimationFrame(() => {\r\n        this._renderCallback();\r\n        this._animationFrame = null;\r\n      });\r\n    }\r\n  }\r\n\r\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\r\n    // Clear any existing interval\r\n    if (this._blinkInterval) {\r\n      window.clearInterval(this._blinkInterval);\r\n    }\r\n\r\n    // Setup the initial timeout which will hide the cursor, this is done before\r\n    // the regular interval is setup in order to support restarting the blink\r\n    // animation in a lightweight way (without thrashing clearInterval and\r\n    // setInterval).\r\n    this._blinkStartTimeout = <number><any>setTimeout(() => {\r\n      // Check if another animation restart was requested while this was being\r\n      // started\r\n      if (this._animationTimeRestarted) {\r\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\r\n        this._animationTimeRestarted = null;\r\n        if (time > 0) {\r\n          this._restartInterval(time);\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Hide the cursor\r\n      this.isCursorVisible = false;\r\n      this._animationFrame = window.requestAnimationFrame(() => {\r\n        this._renderCallback();\r\n        this._animationFrame = null;\r\n      });\r\n\r\n      // Setup the blink interval\r\n      this._blinkInterval = <number><any>setInterval(() => {\r\n        // Adjust the animation time if it was restarted\r\n        if (this._animationTimeRestarted) {\r\n          // calc time diff\r\n          // Make restart interval do a setTimeout initially?\r\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\r\n          this._animationTimeRestarted = null;\r\n          this._restartInterval(time);\r\n          return;\r\n        }\r\n\r\n        // Invert visibility and render\r\n        this.isCursorVisible = !this.isCursorVisible;\r\n        this._animationFrame = window.requestAnimationFrame(() => {\r\n          this._renderCallback();\r\n          this._animationFrame = null;\r\n        });\r\n      }, BLINK_INTERVAL);\r\n    }, timeToStart);\r\n  }\r\n\r\n  public pause(): void {\r\n    this.isCursorVisible = true;\r\n    if (this._blinkInterval) {\r\n      window.clearInterval(this._blinkInterval);\r\n      this._blinkInterval = null;\r\n    }\r\n    if (this._blinkStartTimeout) {\r\n      window.clearTimeout(this._blinkStartTimeout);\r\n      this._blinkStartTimeout = null;\r\n    }\r\n    if (this._animationFrame) {\r\n      window.cancelAnimationFrame(this._animationFrame);\r\n      this._animationFrame = null;\r\n    }\r\n  }\r\n\r\n  public resume(terminal: ITerminal): void {\r\n    this._animationTimeRestarted = null;\r\n    this._restartInterval();\r\n    this.restartBlinkAnimation(terminal);\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IColorManager, IColor, IColorSet } from './Types';\r\nimport { ITheme } from 'xterm';\r\n\r\nconst DEFAULT_FOREGROUND = fromHex('#ffffff');\r\nconst DEFAULT_BACKGROUND = fromHex('#000000');\r\nconst DEFAULT_CURSOR = fromHex('#ffffff');\r\nconst DEFAULT_CURSOR_ACCENT = fromHex('#000000');\r\nconst DEFAULT_SELECTION = {\r\n  css: 'rgba(255, 255, 255, 0.3)',\r\n  rgba: 0xFFFFFF77\r\n};\r\n\r\n// An IIFE to generate DEFAULT_ANSI_COLORS. Do not mutate DEFAULT_ANSI_COLORS, instead make a copy\r\n// and mutate that.\r\nexport const DEFAULT_ANSI_COLORS = (() => {\r\n  const colors = [\r\n    // dark:\r\n    fromHex('#2e3436'),\r\n    fromHex('#cc0000'),\r\n    fromHex('#4e9a06'),\r\n    fromHex('#c4a000'),\r\n    fromHex('#3465a4'),\r\n    fromHex('#75507b'),\r\n    fromHex('#06989a'),\r\n    fromHex('#d3d7cf'),\r\n    // bright:\r\n    fromHex('#555753'),\r\n    fromHex('#ef2929'),\r\n    fromHex('#8ae234'),\r\n    fromHex('#fce94f'),\r\n    fromHex('#729fcf'),\r\n    fromHex('#ad7fa8'),\r\n    fromHex('#34e2e2'),\r\n    fromHex('#eeeeec')\r\n  ];\r\n\r\n  // Fill in the remaining 240 ANSI colors.\r\n  // Generate colors (16-231)\r\n  const v = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\r\n  for (let i = 0; i < 216; i++) {\r\n    const r = v[(i / 36) % 6 | 0];\r\n    const g = v[(i / 6) % 6 | 0];\r\n    const b = v[i % 6];\r\n    colors.push({\r\n      css: `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`,\r\n      // Use >>> 0 to force a conversion to an unsigned int\r\n      rgba: ((r << 24) | (g << 16) | (b << 8) | 0xFF) >>> 0\r\n    });\r\n  }\r\n\r\n  // Generate greys (232-255)\r\n  for (let i = 0; i < 24; i++) {\r\n    const c = 8 + i * 10;\r\n    const ch = toPaddedHex(c);\r\n    colors.push({\r\n      css: `#${ch}${ch}${ch}`,\r\n      rgba: ((c << 24) | (c << 16) | (c << 8) | 0xFF) >>> 0\r\n    });\r\n  }\r\n\r\n  return colors;\r\n})();\r\n\r\nfunction fromHex(css: string): IColor {\r\n  return {\r\n    css,\r\n    rgba: parseInt(css.slice(1), 16) << 8 | 0xFF\r\n  };\r\n}\r\n\r\nfunction toPaddedHex(c: number): string {\r\n  const s = c.toString(16);\r\n  return s.length < 2 ? '0' + s : s;\r\n}\r\n\r\n/**\r\n * Manages the source of truth for a terminal's colors.\r\n */\r\nexport class ColorManager implements IColorManager {\r\n  public colors: IColorSet;\r\n  private _ctx: CanvasRenderingContext2D;\r\n  private _litmusColor: CanvasGradient;\r\n\r\n  constructor(document: Document, public allowTransparency: boolean) {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = 1;\r\n    canvas.height = 1;\r\n    this._ctx = canvas.getContext('2d');\r\n    this._ctx.globalCompositeOperation = 'copy';\r\n    this._litmusColor = this._ctx.createLinearGradient(0, 0, 1, 1);\r\n    this.colors = {\r\n      foreground: DEFAULT_FOREGROUND,\r\n      background: DEFAULT_BACKGROUND,\r\n      cursor: DEFAULT_CURSOR,\r\n      cursorAccent: DEFAULT_CURSOR_ACCENT,\r\n      selection: DEFAULT_SELECTION,\r\n      ansi: DEFAULT_ANSI_COLORS.slice()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sets the terminal's theme.\r\n   * @param theme The  theme to use. If a partial theme is provided then default\r\n   * colors will be used where colors are not defined.\r\n   */\r\n  public setTheme(theme: ITheme): void {\r\n    this.colors.foreground = this._parseColor(theme.foreground, DEFAULT_FOREGROUND);\r\n    this.colors.background = this._parseColor(theme.background, DEFAULT_BACKGROUND);\r\n    this.colors.cursor = this._parseColor(theme.cursor, DEFAULT_CURSOR, true);\r\n    this.colors.cursorAccent = this._parseColor(theme.cursorAccent, DEFAULT_CURSOR_ACCENT, true);\r\n    this.colors.selection = this._parseColor(theme.selection, DEFAULT_SELECTION, true);\r\n    this.colors.ansi[0] = this._parseColor(theme.black, DEFAULT_ANSI_COLORS[0]);\r\n    this.colors.ansi[1] = this._parseColor(theme.red, DEFAULT_ANSI_COLORS[1]);\r\n    this.colors.ansi[2] = this._parseColor(theme.green, DEFAULT_ANSI_COLORS[2]);\r\n    this.colors.ansi[3] = this._parseColor(theme.yellow, DEFAULT_ANSI_COLORS[3]);\r\n    this.colors.ansi[4] = this._parseColor(theme.blue, DEFAULT_ANSI_COLORS[4]);\r\n    this.colors.ansi[5] = this._parseColor(theme.magenta, DEFAULT_ANSI_COLORS[5]);\r\n    this.colors.ansi[6] = this._parseColor(theme.cyan, DEFAULT_ANSI_COLORS[6]);\r\n    this.colors.ansi[7] = this._parseColor(theme.white, DEFAULT_ANSI_COLORS[7]);\r\n    this.colors.ansi[8] = this._parseColor(theme.brightBlack, DEFAULT_ANSI_COLORS[8]);\r\n    this.colors.ansi[9] = this._parseColor(theme.brightRed, DEFAULT_ANSI_COLORS[9]);\r\n    this.colors.ansi[10] = this._parseColor(theme.brightGreen, DEFAULT_ANSI_COLORS[10]);\r\n    this.colors.ansi[11] = this._parseColor(theme.brightYellow, DEFAULT_ANSI_COLORS[11]);\r\n    this.colors.ansi[12] = this._parseColor(theme.brightBlue, DEFAULT_ANSI_COLORS[12]);\r\n    this.colors.ansi[13] = this._parseColor(theme.brightMagenta, DEFAULT_ANSI_COLORS[13]);\r\n    this.colors.ansi[14] = this._parseColor(theme.brightCyan, DEFAULT_ANSI_COLORS[14]);\r\n    this.colors.ansi[15] = this._parseColor(theme.brightWhite, DEFAULT_ANSI_COLORS[15]);\r\n  }\r\n\r\n  private _parseColor(\r\n    css: string,\r\n    fallback: IColor,\r\n    allowTransparency: boolean = this.allowTransparency\r\n  ): IColor {\r\n    if (!css) {\r\n      return fallback;\r\n    }\r\n\r\n    // If parsing the value results in failure, then it must be ignored, and the attribute must\r\n    // retain its previous value.\r\n    // -- https://html.spec.whatwg.org/multipage/canvas.html#fill-and-stroke-styles\r\n    this._ctx.fillStyle = this._litmusColor;\r\n    this._ctx.fillStyle = css;\r\n    if (typeof this._ctx.fillStyle !== 'string') {\r\n      console.warn(`Color: ${css} is invalid using fallback ${fallback.css}`);\r\n      return fallback;\r\n    }\r\n\r\n    this._ctx.fillRect(0, 0, 1, 1);\r\n    const data = this._ctx.getImageData(0, 0, 1, 1).data;\r\n\r\n    if (!allowTransparency && data[3] !== 0xFF) {\r\n      // Ideally we'd just ignore the alpha channel, but...\r\n      //\r\n      // Browsers may not give back exactly the same RGB values we put in, because most/all\r\n      // convert the color to a pre-multiplied representation. getImageData converts that back to\r\n      // a un-premultipled representation, but the precision loss may make the RGB channels unuable\r\n      // on their own.\r\n      //\r\n      // E.g. In Chrome #12345610 turns into #10305010, and in the extreme case, 0xFFFFFF00 turns\r\n      // into 0x00000000.\r\n      //\r\n      // \"Note: Due to the lossy nature of converting to and from premultiplied alpha color values,\r\n      // pixels that have just been set using putImageData() might be returned to an equivalent\r\n      // getImageData() as different values.\"\r\n      // -- https://html.spec.whatwg.org/multipage/canvas.html#pixel-manipulation\r\n      //\r\n      // So let's just use the fallback color in this case instead.\r\n      console.warn(\r\n        `Color: ${css} is using transparency, but allowTransparency is false. ` +\r\n        `Using fallback ${fallback.css}.`\r\n      );\r\n      return fallback;\r\n    }\r\n\r\n    return {\r\n      css,\r\n      rgba: (data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3]) >>> 0\r\n    };\r\n  }\r\n}\r\n","import { CHAR_DATA_ATTR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_CHAR_INDEX } from '../Buffer';\r\nimport { ITerminal, IBufferLine } from '../Types';\r\nimport { ICharacterJoinerRegistry, ICharacterJoiner } from './Types';\r\n\r\nexport class CharacterJoinerRegistry implements ICharacterJoinerRegistry {\r\n\r\n  private _characterJoiners: ICharacterJoiner[] = [];\r\n  private _nextCharacterJoinerId: number = 0;\r\n\r\n  constructor(private _terminal: ITerminal) {\r\n  }\r\n\r\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\r\n    const joiner: ICharacterJoiner = {\r\n      id: this._nextCharacterJoinerId++,\r\n      handler\r\n    };\r\n\r\n    this._characterJoiners.push(joiner);\r\n    return joiner.id;\r\n  }\r\n\r\n  public deregisterCharacterJoiner(joinerId: number): boolean {\r\n    for (let i = 0; i < this._characterJoiners.length; i++) {\r\n      if (this._characterJoiners[i].id === joinerId) {\r\n        this._characterJoiners.splice(i, 1);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public getJoinedCharacters(row: number): [number, number][] {\r\n    if (this._characterJoiners.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const line = this._terminal.buffer.lines.get(row);\r\n    if (line.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const ranges: [number, number][] = [];\r\n    const lineStr = this._terminal.buffer.translateBufferLineToString(row, true);\r\n\r\n    // Because some cells can be represented by multiple javascript characters,\r\n    // we track the cell and the string indexes separately. This allows us to\r\n    // translate the string ranges we get from the joiners back into cell ranges\r\n    // for use when rendering\r\n    let rangeStartColumn = 0;\r\n    let currentStringIndex = 0;\r\n    let rangeStartStringIndex = 0;\r\n    let rangeAttr = line.get(0)[CHAR_DATA_ATTR_INDEX] >> 9;\r\n\r\n    for (let x = 0; x < this._terminal.cols; x++) {\r\n      const charData = line.get(x);\r\n      const chars = charData[CHAR_DATA_CHAR_INDEX];\r\n      const width = charData[CHAR_DATA_WIDTH_INDEX];\r\n      const attr = charData[CHAR_DATA_ATTR_INDEX] >> 9;\r\n\r\n      if (width === 0) {\r\n        // If this character is of width 0, skip it.\r\n        continue;\r\n      }\r\n\r\n      // End of range\r\n      if (attr !== rangeAttr) {\r\n        // If we ended up with a sequence of more than one character,\r\n        // look for ranges to join.\r\n        if (x - rangeStartColumn > 1) {\r\n          const joinedRanges = this._getJoinedRanges(\r\n            lineStr,\r\n            rangeStartStringIndex,\r\n            currentStringIndex,\r\n            line,\r\n            rangeStartColumn\r\n          );\r\n          for (let i = 0; i < joinedRanges.length; i++) {\r\n            ranges.push(joinedRanges[i]);\r\n          }\r\n        }\r\n\r\n        // Reset our markers for a new range.\r\n        rangeStartColumn = x;\r\n        rangeStartStringIndex = currentStringIndex;\r\n        rangeAttr = attr;\r\n      }\r\n\r\n      currentStringIndex += chars.length;\r\n    }\r\n\r\n    // Process any trailing ranges.\r\n    if (this._terminal.cols - rangeStartColumn > 1) {\r\n      const joinedRanges = this._getJoinedRanges(\r\n        lineStr,\r\n        rangeStartStringIndex,\r\n        currentStringIndex,\r\n        line,\r\n        rangeStartColumn\r\n      );\r\n      for (let i = 0; i < joinedRanges.length; i++) {\r\n        ranges.push(joinedRanges[i]);\r\n      }\r\n    }\r\n\r\n    return ranges;\r\n  }\r\n\r\n  /**\r\n   * Given a segment of a line of text, find all ranges of text that should be\r\n   * joined in a single rendering unit. Ranges are internally converted to\r\n   * column ranges, rather than string ranges.\r\n   * @param line String representation of the full line of text\r\n   * @param startIndex Start position of the range to search in the string (inclusive)\r\n   * @param endIndex End position of the range to search in the string (exclusive)\r\n   */\r\n  private _getJoinedRanges(line: string, startIndex: number, endIndex: number, lineData: IBufferLine, startCol: number): [number, number][] {\r\n    const text = line.substring(startIndex, endIndex);\r\n    // At this point we already know that there is at least one joiner so\r\n    // we can just pull its value and assign it directly rather than\r\n    // merging it into an empty array, which incurs unnecessary writes.\r\n    const joinedRanges: [number, number][] = this._characterJoiners[0].handler(text);\r\n    for (let i = 1; i < this._characterJoiners.length; i++) {\r\n      // We merge any overlapping ranges across the different joiners\r\n      const joinerRanges = this._characterJoiners[i].handler(text);\r\n      for (let j = 0; j < joinerRanges.length; j++) {\r\n        CharacterJoinerRegistry._mergeRanges(joinedRanges, joinerRanges[j]);\r\n      }\r\n    }\r\n    this._stringRangesToCellRanges(joinedRanges, lineData, startCol);\r\n    return joinedRanges;\r\n  }\r\n\r\n  /**\r\n   * Modifies the provided ranges in-place to adjust for variations between\r\n   * string length and cell width so that the range represents a cell range,\r\n   * rather than the string range the joiner provides.\r\n   * @param ranges String ranges containing start (inclusive) and end (exclusive) index\r\n   * @param line Cell data for the relevant line in the terminal\r\n   * @param startCol Offset within the line to start from\r\n   */\r\n  private _stringRangesToCellRanges(ranges: [number, number][], line: IBufferLine, startCol: number): void {\r\n    let currentRangeIndex = 0;\r\n    let currentRangeStarted = false;\r\n    let currentStringIndex = 0;\r\n    let currentRange = ranges[currentRangeIndex];\r\n\r\n    // If we got through all of the ranges, stop searching\r\n    if (!currentRange) {\r\n      return;\r\n    }\r\n\r\n    for (let x = startCol; x < this._terminal.cols; x++) {\r\n      const charData = line.get(x);\r\n      const width = charData[CHAR_DATA_WIDTH_INDEX];\r\n      const length = charData[CHAR_DATA_CHAR_INDEX].length;\r\n\r\n      // We skip zero-width characters when creating the string to join the text\r\n      // so we do the same here\r\n      if (width === 0) {\r\n        continue;\r\n      }\r\n\r\n      // Adjust the start of the range\r\n      if (!currentRangeStarted && currentRange[0] <= currentStringIndex) {\r\n        currentRange[0] = x;\r\n        currentRangeStarted = true;\r\n      }\r\n\r\n      // Adjust the end of the range\r\n      if (currentRange[1] <= currentStringIndex) {\r\n        currentRange[1] = x;\r\n\r\n        // We're finished with this range, so we move to the next one\r\n        currentRange = ranges[++currentRangeIndex];\r\n\r\n        // If there are no more ranges left, stop searching\r\n        if (!currentRange) {\r\n          break;\r\n        }\r\n\r\n        // Ranges can be on adjacent characters. Because the end index of the\r\n        // ranges are exclusive, this means that the index for the start of a\r\n        // range can be the same as the end index of the previous range. To\r\n        // account for the start of the next range, we check here just in case.\r\n        if (currentRange[0] <= currentStringIndex) {\r\n          currentRange[0] = x;\r\n          currentRangeStarted = true;\r\n        } else {\r\n          currentRangeStarted = false;\r\n        }\r\n      }\r\n\r\n      // Adjust the string index based on the character length to line up with\r\n      // the column adjustment\r\n      currentStringIndex += length;\r\n    }\r\n\r\n    // If there is still a range left at the end, it must extend all the way to\r\n    // the end of the line.\r\n    if (currentRange) {\r\n      currentRange[1] = this._terminal.cols;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Merges the range defined by the provided start and end into the list of\r\n   * existing ranges. The merge is done in place on the existing range for\r\n   * performance and is also returned.\r\n   * @param ranges Existing range list\r\n   * @param newRange Tuple of two numbers representing the new range to merge in.\r\n   * @returns The ranges input with the new range merged in place\r\n   */\r\n  private static _mergeRanges(ranges: [number, number][], newRange: [number, number]): [number, number][] {\r\n    let inRange = false;\r\n    for (let i = 0; i < ranges.length; i++) {\r\n      const range = ranges[i];\r\n      if (!inRange) {\r\n        if (newRange[1] <= range[0]) {\r\n          // Case 1: New range is before the search range\r\n          ranges.splice(i, 0, newRange);\r\n          return ranges;\r\n        }\r\n\r\n        if (newRange[1] <= range[1]) {\r\n          // Case 2: New range is either wholly contained within the\r\n          // search range or overlaps with the front of it\r\n          range[0] = Math.min(newRange[0], range[0]);\r\n          return ranges;\r\n        }\r\n\r\n        if (newRange[0] < range[1]) {\r\n          // Case 3: New range either wholly contains the search range\r\n          // or overlaps with the end of it\r\n          range[0] = Math.min(newRange[0], range[0]);\r\n          inRange = true;\r\n        }\r\n\r\n        // Case 4: New range starts after the search range\r\n        continue;\r\n      } else {\r\n        if (newRange[1] <= range[0]) {\r\n          // Case 5: New range extends from previous range but doesn't\r\n          // reach the current one\r\n          ranges[i - 1][1] = newRange[1];\r\n          return ranges;\r\n        }\r\n\r\n        if (newRange[1] <= range[1]) {\r\n          // Case 6: New range extends from prvious range into the\r\n          // current range\r\n          ranges[i - 1][1] = Math.max(newRange[1], range[1]);\r\n          ranges.splice(i, 1);\r\n          inRange = false;\r\n          return ranges;\r\n        }\r\n\r\n        // Case 7: New range extends from previous range past the\r\n        // end of the current range\r\n        ranges.splice(i, 1);\r\n        i--;\r\n      }\r\n    }\r\n\r\n    if (inRange) {\r\n      // Case 8: New range extends past the last existing range\r\n      ranges[ranges.length - 1][1] = newRange[1];\r\n    } else {\r\n      // Case 9: New range starts after the last existing range\r\n      ranges.push(newRange);\r\n    }\r\n\r\n    return ranges;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IRenderLayer, IColorSet, IRenderDimensions } from './Types';\r\nimport { CharData, ITerminal } from '../Types';\r\nimport { DIM_OPACITY, INVERTED_DEFAULT_COLOR, IGlyphIdentifier } from './atlas/Types';\r\nimport BaseCharAtlas from './atlas/BaseCharAtlas';\r\nimport { acquireCharAtlas } from './atlas/CharAtlasCache';\r\nimport { CHAR_DATA_CHAR_INDEX } from '../Buffer';\r\nimport { is256Color } from './atlas/CharAtlasUtils';\r\n\r\nexport abstract class BaseRenderLayer implements IRenderLayer {\r\n  private _canvas: HTMLCanvasElement;\r\n  protected _ctx: CanvasRenderingContext2D;\r\n  private _scaledCharWidth: number = 0;\r\n  private _scaledCharHeight: number = 0;\r\n  private _scaledCellWidth: number = 0;\r\n  private _scaledCellHeight: number = 0;\r\n  private _scaledCharLeft: number = 0;\r\n  private _scaledCharTop: number = 0;\r\n\r\n  protected _charAtlas: BaseCharAtlas;\r\n\r\n  /**\r\n   * An object that's reused when drawing glyphs in order to reduce GC.\r\n   */\r\n  private _currentGlyphIdentifier: IGlyphIdentifier = {\r\n    chars: '',\r\n    code: 0,\r\n    bg: 0,\r\n    fg: 0,\r\n    bold: false,\r\n    dim: false,\r\n    italic: false\r\n  };\r\n\r\n  constructor(\r\n    private _container: HTMLElement,\r\n    id: string,\r\n    zIndex: number,\r\n    private _alpha: boolean,\r\n    protected _colors: IColorSet\r\n  ) {\r\n    this._canvas = document.createElement('canvas');\r\n    this._canvas.classList.add(`xterm-${id}-layer`);\r\n    this._canvas.style.zIndex = zIndex.toString();\r\n    this._initCanvas();\r\n    this._container.appendChild(this._canvas);\r\n  }\r\n\r\n  public dispose(): void {\r\n    this._container.removeChild(this._canvas);\r\n    if (this._charAtlas) {\r\n      this._charAtlas.dispose();\r\n    }\r\n  }\r\n\r\n  private _initCanvas(): void {\r\n    this._ctx = this._canvas.getContext('2d', {alpha: this._alpha});\r\n    // Draw the background if this is an opaque layer\r\n    if (!this._alpha) {\r\n      this.clearAll();\r\n    }\r\n  }\r\n\r\n  public onOptionsChanged(terminal: ITerminal): void {}\r\n  public onBlur(terminal: ITerminal): void {}\r\n  public onFocus(terminal: ITerminal): void {}\r\n  public onCursorMove(terminal: ITerminal): void {}\r\n  public onGridChanged(terminal: ITerminal, startRow: number, endRow: number): void {}\r\n  public onSelectionChanged(terminal: ITerminal, start: [number, number], end: [number, number], columnSelectMode: boolean = false): void {}\r\n\r\n  public onThemeChanged(terminal: ITerminal, colorSet: IColorSet): void {\r\n    this._refreshCharAtlas(terminal, colorSet);\r\n  }\r\n\r\n  protected setTransparency(terminal: ITerminal, alpha: boolean): void {\r\n    // Do nothing when alpha doesn't change\r\n    if (alpha === this._alpha) {\r\n      return;\r\n    }\r\n\r\n    // Create new canvas and replace old one\r\n    const oldCanvas = this._canvas;\r\n    this._alpha = alpha;\r\n    // Cloning preserves properties\r\n    this._canvas = <HTMLCanvasElement>this._canvas.cloneNode();\r\n    this._initCanvas();\r\n    this._container.replaceChild(this._canvas, oldCanvas);\r\n\r\n    // Regenerate char atlas and force a full redraw\r\n    this._refreshCharAtlas(terminal, this._colors);\r\n    this.onGridChanged(terminal, 0, terminal.rows - 1);\r\n  }\r\n\r\n  /**\r\n   * Refreshes the char atlas, aquiring a new one if necessary.\r\n   * @param terminal The terminal.\r\n   * @param colorSet The color set to use for the char atlas.\r\n   */\r\n  private _refreshCharAtlas(terminal: ITerminal, colorSet: IColorSet): void {\r\n    if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\r\n      return;\r\n    }\r\n    this._charAtlas = acquireCharAtlas(terminal, colorSet, this._scaledCharWidth, this._scaledCharHeight);\r\n    this._charAtlas.warmUp();\r\n  }\r\n\r\n  public resize(terminal: ITerminal, dim: IRenderDimensions): void {\r\n    this._scaledCellWidth = dim.scaledCellWidth;\r\n    this._scaledCellHeight = dim.scaledCellHeight;\r\n    this._scaledCharWidth = dim.scaledCharWidth;\r\n    this._scaledCharHeight = dim.scaledCharHeight;\r\n    this._scaledCharLeft = dim.scaledCharLeft;\r\n    this._scaledCharTop = dim.scaledCharTop;\r\n    this._canvas.width = dim.scaledCanvasWidth;\r\n    this._canvas.height = dim.scaledCanvasHeight;\r\n    this._canvas.style.width = `${dim.canvasWidth}px`;\r\n    this._canvas.style.height = `${dim.canvasHeight}px`;\r\n\r\n    // Draw the background if this is an opaque layer\r\n    if (!this._alpha) {\r\n      this.clearAll();\r\n    }\r\n\r\n    this._refreshCharAtlas(terminal, this._colors);\r\n  }\r\n\r\n  public abstract reset(terminal: ITerminal): void;\r\n\r\n  /**\r\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\r\n   * @param x The column to start at.\r\n   * @param y The row to start at\r\n   * @param width The number of columns to fill.\r\n   * @param height The number of rows to fill.\r\n   */\r\n  protected fillCells(x: number, y: number, width: number, height: number): void {\r\n    this._ctx.fillRect(\r\n        x * this._scaledCellWidth,\r\n        y * this._scaledCellHeight,\r\n        width * this._scaledCellWidth,\r\n        height * this._scaledCellHeight);\r\n  }\r\n\r\n  /**\r\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\r\n   * existing fillStyle on the context.\r\n   * @param x The column to fill.\r\n   * @param y The row to fill.\r\n   */\r\n  protected fillBottomLineAtCells(x: number, y: number, width: number = 1): void {\r\n    this._ctx.fillRect(\r\n        x * this._scaledCellWidth,\r\n        (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1 /* Ensure it's drawn within the cell */,\r\n        width * this._scaledCellWidth,\r\n        window.devicePixelRatio);\r\n  }\r\n\r\n  /**\r\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\r\n   * existing fillStyle on the context.\r\n   * @param x The column to fill.\r\n   * @param y The row to fill.\r\n   */\r\n  protected fillLeftLineAtCell(x: number, y: number): void {\r\n    this._ctx.fillRect(\r\n        x * this._scaledCellWidth,\r\n        y * this._scaledCellHeight,\r\n        window.devicePixelRatio,\r\n        this._scaledCellHeight);\r\n  }\r\n\r\n  /**\r\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\r\n   * strokeStyle on the context.\r\n   * @param x The column to fill.\r\n   * @param y The row to fill.\r\n   */\r\n  protected strokeRectAtCell(x: number, y: number, width: number, height: number): void {\r\n    this._ctx.lineWidth = window.devicePixelRatio;\r\n    this._ctx.strokeRect(\r\n        x * this._scaledCellWidth + window.devicePixelRatio / 2,\r\n        y * this._scaledCellHeight + (window.devicePixelRatio / 2),\r\n        width * this._scaledCellWidth - window.devicePixelRatio,\r\n        (height * this._scaledCellHeight) - window.devicePixelRatio);\r\n  }\r\n\r\n  /**\r\n   * Clears the entire canvas.\r\n   */\r\n  protected clearAll(): void {\r\n    if (this._alpha) {\r\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n    } else {\r\n      this._ctx.fillStyle = this._colors.background.css;\r\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears 1+ cells completely.\r\n   * @param x The column to start at.\r\n   * @param y The row to start at.\r\n   * @param width The number of columns to clear.\r\n   * @param height The number of rows to clear.\r\n   */\r\n  protected clearCells(x: number, y: number, width: number, height: number): void {\r\n    if (this._alpha) {\r\n      this._ctx.clearRect(\r\n          x * this._scaledCellWidth,\r\n          y * this._scaledCellHeight,\r\n          width * this._scaledCellWidth,\r\n          height * this._scaledCellHeight);\r\n    } else {\r\n      this._ctx.fillStyle = this._colors.background.css;\r\n      this._ctx.fillRect(\r\n          x * this._scaledCellWidth,\r\n          y * this._scaledCellHeight,\r\n          width * this._scaledCellWidth,\r\n          height * this._scaledCellHeight);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws a truecolor character at the cell. The character will be clipped to\r\n   * ensure that it fits with the cell, including the cell to the right if it's\r\n   * a wide character. This uses the existing fillStyle on the context.\r\n   * @param terminal The terminal.\r\n   * @param charData The char data for the character to draw.\r\n   * @param x The column to draw at.\r\n   * @param y The row to draw at.\r\n   * @param color The color of the character.\r\n   */\r\n  protected fillCharTrueColor(terminal: ITerminal, charData: CharData, x: number, y: number): void {\r\n    this._ctx.font = this._getFont(terminal, false, false);\r\n    this._ctx.textBaseline = 'middle';\r\n    this._clipRow(terminal, y);\r\n    this._ctx.fillText(\r\n        charData[CHAR_DATA_CHAR_INDEX],\r\n        x * this._scaledCellWidth + this._scaledCharLeft,\r\n        (y + 0.5) * this._scaledCellHeight + this._scaledCharTop);\r\n  }\r\n\r\n  /**\r\n   * Draws one or more characters at a cell. If possible this will draw using\r\n   * the character atlas to reduce draw time.\r\n   * @param terminal The terminal.\r\n   * @param chars The character or characters.\r\n   * @param code The character code.\r\n   * @param width The width of the characters.\r\n   * @param x The column to draw at.\r\n   * @param y The row to draw at.\r\n   * @param fg The foreground color, in the format stored within the attributes.\r\n   * @param bg The background color, in the format stored within the attributes.\r\n   * This is used to validate whether a cached image can be used.\r\n   * @param bold Whether the text is bold.\r\n   */\r\n  protected drawChars(terminal: ITerminal, chars: string, code: number, width: number, x: number, y: number, fg: number, bg: number, bold: boolean, dim: boolean, italic: boolean): void {\r\n    const drawInBrightColor = terminal.options.drawBoldTextInBrightColors && bold && fg < 8 && fg !== INVERTED_DEFAULT_COLOR;\r\n\r\n    fg += drawInBrightColor ? 8 : 0;\r\n    this._currentGlyphIdentifier.chars = chars;\r\n    this._currentGlyphIdentifier.code = code;\r\n    this._currentGlyphIdentifier.bg = bg;\r\n    this._currentGlyphIdentifier.fg = fg;\r\n    this._currentGlyphIdentifier.bold = bold && terminal.options.enableBold;\r\n    this._currentGlyphIdentifier.dim = dim;\r\n    this._currentGlyphIdentifier.italic = italic;\r\n    const atlasDidDraw = this._charAtlas && this._charAtlas.draw(\r\n      this._ctx,\r\n      this._currentGlyphIdentifier,\r\n      x * this._scaledCellWidth + this._scaledCharLeft,\r\n      y * this._scaledCellHeight + this._scaledCharTop\r\n    );\r\n\r\n    if (!atlasDidDraw) {\r\n      this._drawUncachedChars(terminal, chars, width, fg, x, y, bold && terminal.options.enableBold, dim, italic);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws one or more characters at one or more cells. The character(s) will be\r\n   * clipped to ensure that they fit with the cell(s), including the cell to the\r\n   * right if the last character is a wide character.\r\n   * @param terminal The terminal.\r\n   * @param chars The character.\r\n   * @param width The width of the character.\r\n   * @param fg The foreground color, in the format stored within the attributes.\r\n   * @param x The column to draw at.\r\n   * @param y The row to draw at.\r\n   */\r\n  private _drawUncachedChars(terminal: ITerminal, chars: string, width: number, fg: number, x: number, y: number, bold: boolean, dim: boolean, italic: boolean): void {\r\n    this._ctx.save();\r\n    this._ctx.font = this._getFont(terminal, bold, italic);\r\n    this._ctx.textBaseline = 'middle';\r\n\r\n    if (fg === INVERTED_DEFAULT_COLOR) {\r\n      this._ctx.fillStyle = this._colors.background.css;\r\n    } else if (is256Color(fg)) {\r\n      // 256 color support\r\n      this._ctx.fillStyle = this._colors.ansi[fg].css;\r\n    } else {\r\n      this._ctx.fillStyle = this._colors.foreground.css;\r\n    }\r\n\r\n    this._clipRow(terminal, y);\r\n\r\n    // Apply alpha to dim the character\r\n    if (dim) {\r\n      this._ctx.globalAlpha = DIM_OPACITY;\r\n    }\r\n    // Draw the character\r\n    this._ctx.fillText(\r\n        chars,\r\n        x * this._scaledCellWidth + this._scaledCharLeft,\r\n        (y + 0.5) * this._scaledCellHeight + this._scaledCharTop);\r\n    this._ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Clips a row to ensure no pixels will be drawn outside the cells in the row.\r\n   * @param terminal The terminal.\r\n   * @param y The row to clip.\r\n   */\r\n  private _clipRow(terminal: ITerminal, y: number): void {\r\n    this._ctx.beginPath();\r\n    this._ctx.rect(\r\n        0,\r\n        y * this._scaledCellHeight,\r\n        terminal.cols * this._scaledCellWidth,\r\n        this._scaledCellHeight);\r\n    this._ctx.clip();\r\n  }\r\n\r\n  /**\r\n   * Gets the current font.\r\n   * @param terminal The terminal.\r\n   * @param isBold If we should use the bold fontWeight.\r\n   */\r\n  protected _getFont(terminal: ITerminal, isBold: boolean, isItalic: boolean): string {\r\n    const fontWeight = isBold ? terminal.options.fontWeightBold : terminal.options.fontWeight;\r\n    const fontStyle = isItalic ? 'italic' : '';\r\n\r\n    return `${fontStyle} ${fontWeight} ${terminal.options.fontSize * window.devicePixelRatio}px ${terminal.options.fontFamily}`;\r\n  }\r\n}\r\n\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { Terminal as ITerminalApi, ITerminalOptions, IMarker, IDisposable, ILinkMatcherOptions, ITheme, ILocalizableStrings } from 'xterm';\r\nimport { ITerminal } from '../Types';\r\nimport { Terminal as TerminalCore } from '../Terminal';\r\nimport * as Strings from '../Strings';\r\n\r\nexport class Terminal implements ITerminalApi {\r\n  private _core: ITerminal;\r\n\r\n  constructor(options?: ITerminalOptions) {\r\n    this._core = new TerminalCore(options);\r\n  }\r\n\r\n  public get element(): HTMLElement { return this._core.element; }\r\n  public get textarea(): HTMLTextAreaElement { return this._core.textarea; }\r\n  public get rows(): number { return this._core.rows; }\r\n  public get cols(): number { return this._core.cols; }\r\n  public get markers(): IMarker[] { return this._core.markers; }\r\n  public blur(): void {\r\n    this._core.blur();\r\n  }\r\n  public focus(): void {\r\n    this._core.focus();\r\n  }\r\n  public on(type: 'blur' | 'focus' | 'linefeed' | 'selection', listener: () => void): void;\r\n  public on(type: 'data', listener: (...args: any[]) => void): void;\r\n  public on(type: 'key', listener: (key?: string, event?: KeyboardEvent) => void): void;\r\n  public on(type: 'keypress' | 'keydown', listener: (event?: KeyboardEvent) => void): void;\r\n  public on(type: 'refresh', listener: (data?: { start: number; end: number; }) => void): void;\r\n  public on(type: 'resize', listener: (data?: { cols: number; rows: number; }) => void): void;\r\n  public on(type: 'scroll', listener: (ydisp?: number) => void): void;\r\n  public on(type: 'title', listener: (title?: string) => void): void;\r\n  public on(type: string, listener: (...args: any[]) => void): void;\r\n  public on(type: any, listener: any): void {\r\n    this._core.on(type, listener);\r\n  }\r\n  public off(type: string, listener: (...args: any[]) => void): void {\r\n    this._core.off(type, listener);\r\n  }\r\n  public emit(type: string, data?: any): void {\r\n    this._core.emit(type, data);\r\n  }\r\n  public addDisposableListener(type: string, handler: (...args: any[]) => void): IDisposable {\r\n    return this._core.addDisposableListener(type, handler);\r\n  }\r\n  public resize(columns: number, rows: number): void {\r\n    this._core.resize(columns, rows);\r\n  }\r\n  public writeln(data: string): void {\r\n    this._core.writeln(data);\r\n  }\r\n  public open(parent: HTMLElement): void {\r\n    this._core.open(parent);\r\n  }\r\n  public attachCustomKeyEventHandler(customKeyEventHandler: (event: KeyboardEvent) => boolean): void {\r\n    this._core.attachCustomKeyEventHandler(customKeyEventHandler);\r\n  }\r\n  public addCsiHandler(flag: string, callback: (params: number[], collect: string) => boolean): IDisposable {\r\n    return this._core.addCsiHandler(flag, callback);\r\n  }\r\n  public addOscHandler(ident: number, callback: (data: string) => boolean): IDisposable {\r\n    return this._core.addOscHandler(ident, callback);\r\n  }\r\n  public registerLinkMatcher(regex: RegExp, handler: (event: MouseEvent, uri: string) => void, options?: ILinkMatcherOptions): number {\r\n    return this._core.registerLinkMatcher(regex, handler, options);\r\n  }\r\n  public deregisterLinkMatcher(matcherId: number): void {\r\n    this._core.deregisterLinkMatcher(matcherId);\r\n  }\r\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\r\n    return this._core.registerCharacterJoiner(handler);\r\n  }\r\n  public deregisterCharacterJoiner(joinerId: number): void {\r\n    this._core.deregisterCharacterJoiner(joinerId);\r\n  }\r\n  public addMarker(cursorYOffset: number): IMarker {\r\n    return this._core.addMarker(cursorYOffset);\r\n  }\r\n  public hasSelection(): boolean {\r\n    return this._core.hasSelection();\r\n  }\r\n  public getSelection(): string {\r\n    return this._core.getSelection();\r\n  }\r\n  public clearSelection(): void {\r\n    this._core.clearSelection();\r\n  }\r\n  public selectAll(): void {\r\n    this._core.selectAll();\r\n  }\r\n  public selectLines(start: number, end: number): void {\r\n    this._core.selectLines(start, end);\r\n  }\r\n  public dispose(): void {\r\n    this._core.dispose();\r\n  }\r\n  public destroy(): void {\r\n    this._core.destroy();\r\n  }\r\n  public scrollLines(amount: number): void {\r\n    this._core.scrollLines(amount);\r\n  }\r\n  public scrollPages(pageCount: number): void {\r\n    this._core.scrollPages(pageCount);\r\n  }\r\n  public scrollToTop(): void {\r\n    this._core.scrollToTop();\r\n  }\r\n  public scrollToBottom(): void {\r\n    this._core.scrollToBottom();\r\n  }\r\n  public scrollToLine(line: number): void {\r\n    this._core.scrollToLine(line);\r\n  }\r\n  public clear(): void {\r\n    this._core.clear();\r\n  }\r\n  public write(data: string): void {\r\n    this._core.write(data);\r\n  }\r\n  public getOption(key: 'bellSound' | 'bellStyle' | 'cursorStyle' | 'fontFamily' | 'fontWeight' | 'fontWeightBold' | 'rendererType' | 'termName'): string;\r\n  public getOption(key: 'allowTransparency' | 'cancelEvents' | 'convertEol' | 'cursorBlink' | 'debug' | 'disableStdin' | 'enableBold' | 'macOptionIsMeta' | 'rightClickSelectsWord' | 'popOnBell' | 'screenKeys' | 'useFlowControl' | 'visualBell'): boolean;\r\n  public getOption(key: 'colors'): string[];\r\n  public getOption(key: 'cols' | 'fontSize' | 'letterSpacing' | 'lineHeight' | 'rows' | 'tabStopWidth' | 'scrollback'): number;\r\n  public getOption(key: 'handler'): (data: string) => void;\r\n  public getOption(key: string): any;\r\n  public getOption(key: any): any {\r\n    return this._core.getOption(key);\r\n  }\r\n  public setOption(key: 'bellSound' | 'fontFamily' | 'termName', value: string): void;\r\n  public setOption(key: 'fontWeight' | 'fontWeightBold', value: 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'): void;\r\n  public setOption(key: 'bellStyle', value: 'none' | 'visual' | 'sound' | 'both'): void;\r\n  public setOption(key: 'cursorStyle', value: 'block' | 'underline' | 'bar'): void;\r\n  public setOption(key: 'allowTransparency' | 'cancelEvents' | 'convertEol' | 'cursorBlink' | 'debug' | 'disableStdin' | 'enableBold' | 'macOptionIsMeta' | 'rightClickSelectsWord' | 'popOnBell' | 'screenKeys' | 'useFlowControl' | 'visualBell', value: boolean): void;\r\n  public setOption(key: 'colors', value: string[]): void;\r\n  public setOption(key: 'fontSize' | 'letterSpacing' | 'lineHeight' | 'tabStopWidth' | 'scrollback', value: number): void;\r\n  public setOption(key: 'handler', value: (data: string) => void): void;\r\n  public setOption(key: 'theme', value: ITheme): void;\r\n  public setOption(key: 'cols' | 'rows', value: number): void;\r\n  public setOption(key: string, value: any): void;\r\n  public setOption(key: any, value: any): void {\r\n    this._core.setOption(key, value);\r\n  }\r\n  public refresh(start: number, end: number): void {\r\n    this._core.refresh(start, end);\r\n  }\r\n  public reset(): void {\r\n    this._core.reset();\r\n  }\r\n  public static applyAddon(addon: any): void {\r\n    addon.apply(Terminal);\r\n  }\r\n  public static get strings(): ILocalizableStrings {\r\n    return Strings;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal, IBufferLine } from '../Types';\r\nimport { ICircularList } from '../common/Types';\r\nimport { C0 } from '../common/data/EscapeSequences';\r\n\r\nconst enum Direction {\r\n  UP = 'A',\r\n  DOWN = 'B',\r\n  RIGHT = 'C',\r\n  LEFT = 'D'\r\n}\r\n\r\nexport class AltClickHandler {\r\n  private _startRow: number;\r\n  private _startCol: number;\r\n  private _endRow: number;\r\n  private _endCol: number;\r\n  private _lines: ICircularList<IBufferLine>;\r\n\r\n  constructor(\r\n    private _mouseEvent: MouseEvent,\r\n    private _terminal: ITerminal\r\n  ) {\r\n    this._lines = this._terminal.buffer.lines;\r\n    this._startCol = this._terminal.buffer.x;\r\n    this._startRow = this._terminal.buffer.y;\r\n\r\n    const coordinates = this._terminal.mouseHelper.getCoords(\r\n      this._mouseEvent,\r\n      this._terminal.element,\r\n      this._terminal.charMeasure,\r\n      this._terminal.cols,\r\n      this._terminal.rows,\r\n      false\r\n    );\r\n\r\n    if (coordinates) {\r\n      [this._endCol, this._endRow] = coordinates.map((coordinate: number) => {\r\n        return coordinate - 1;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Writes the escape sequences of arrows to the terminal\r\n   */\r\n  public move(): void {\r\n    if (this._mouseEvent.altKey && this._endCol !== undefined && this._endRow !== undefined) {\r\n      this._terminal.handler(this._arrowSequences());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Concatenates all the arrow sequences together.\r\n   * Resets the starting row to an unwrapped row, moves to the requested row,\r\n   * then moves to requested col.\r\n   */\r\n  private _arrowSequences(): string {\r\n    // The alt buffer should try to navigate between rows\r\n    if (!this._terminal.buffer.hasScrollback) {\r\n      return this._resetStartingRow() + this._moveToRequestedRow() + this._moveToRequestedCol();\r\n    }\r\n\r\n    // Only move horizontally for the normal buffer\r\n    return this._moveHorizontallyOnly();\r\n  }\r\n\r\n  /**\r\n   * If the initial position of the cursor is on a row that is wrapped, move the\r\n   * cursor up to the first row that is not wrapped to have accurate vertical\r\n   * positioning.\r\n   */\r\n  private _resetStartingRow(): string {\r\n    if (this._moveToRequestedRow().length === 0) {\r\n      return '';\r\n    }\r\n    return repeat(this._bufferLine(\r\n      this._startCol, this._startRow, this._startCol,\r\n      this._startRow - this._wrappedRowsForRow(this._startRow), false\r\n    ).length, this._sequence(Direction.LEFT));\r\n  }\r\n\r\n  /**\r\n   * Using the reset starting and ending row, move to the requested row,\r\n   * ignoring wrapped rows\r\n   */\r\n  private _moveToRequestedRow(): string {\r\n    const startRow = this._startRow - this._wrappedRowsForRow(this._startRow);\r\n    const endRow = this._endRow - this._wrappedRowsForRow(this._endRow);\r\n\r\n    const rowsToMove = Math.abs(startRow - endRow) - this._wrappedRowsCount();\r\n\r\n    return repeat(rowsToMove, this._sequence(this._verticalDirection()));\r\n  }\r\n\r\n  /**\r\n   * Move to the requested col on the ending row\r\n   */\r\n  private _moveToRequestedCol(): string {\r\n    let startRow;\r\n    if (this._moveToRequestedRow().length > 0) {\r\n      startRow = this._endRow - this._wrappedRowsForRow(this._endRow);\r\n    } else {\r\n      startRow = this._startRow;\r\n    }\r\n\r\n    const endRow = this._endRow;\r\n    const direction = this._horizontalDirection();\r\n\r\n    return repeat(this._bufferLine(\r\n      this._startCol, startRow, this._endCol, endRow,\r\n      direction === Direction.RIGHT\r\n    ).length, this._sequence(direction));\r\n  }\r\n\r\n  private _moveHorizontallyOnly(): string {\r\n    const direction = this._horizontalDirection();\r\n    return repeat(Math.abs(this._startCol - this._endCol), this._sequence(direction));\r\n  }\r\n\r\n  /**\r\n   * Utility functions\r\n   */\r\n\r\n  /**\r\n   * Calculates the number of wrapped rows between the unwrapped starting and\r\n   * ending rows. These rows need to ignored since the cursor skips over them.\r\n   */\r\n  private _wrappedRowsCount(): number {\r\n    let wrappedRows = 0;\r\n    const startRow = this._startRow - this._wrappedRowsForRow(this._startRow);\r\n    const endRow = this._endRow - this._wrappedRowsForRow(this._endRow);\r\n\r\n    for (let i = 0; i < Math.abs(startRow - endRow); i++) {\r\n      const direction = this._verticalDirection() === Direction.UP ? -1 : 1;\r\n\r\n      if (this._lines.get(startRow + (direction * i)).isWrapped) {\r\n        wrappedRows++;\r\n      }\r\n    }\r\n\r\n    return wrappedRows;\r\n  }\r\n\r\n  /**\r\n   * Calculates the number of wrapped rows that make up a given row.\r\n   * @param currentRow The row to determine how many wrapped rows make it up\r\n   */\r\n  private _wrappedRowsForRow(currentRow: number): number {\r\n    let rowCount = 0;\r\n    let lineWraps = this._lines.get(currentRow).isWrapped;\r\n\r\n    while (lineWraps && currentRow >= 0 && currentRow < this._terminal.rows) {\r\n      rowCount++;\r\n      currentRow--;\r\n      lineWraps = this._lines.get(currentRow).isWrapped;\r\n    }\r\n\r\n    return rowCount;\r\n  }\r\n\r\n  /**\r\n   * Direction determiners\r\n   */\r\n\r\n  /**\r\n   * Determines if the right or left arrow is needed\r\n   */\r\n  private _horizontalDirection(): Direction {\r\n    let startRow;\r\n    if (this._moveToRequestedRow().length > 0) {\r\n      startRow = this._endRow - this._wrappedRowsForRow(this._endRow);\r\n    } else {\r\n      startRow = this._startRow;\r\n    }\r\n\r\n    if ((this._startCol < this._endCol &&\r\n      startRow <= this._endRow) || // down/right or same y/right\r\n      (this._startCol >= this._endCol &&\r\n      startRow < this._endRow)) {  // down/left or same y/left\r\n      return Direction.RIGHT;\r\n    }\r\n    return Direction.LEFT;\r\n  }\r\n\r\n  /**\r\n   * Determines if the up or down arrow is needed\r\n   */\r\n  private _verticalDirection(): Direction {\r\n    if (this._startRow > this._endRow) {\r\n      return Direction.UP;\r\n    }\r\n    return Direction.DOWN;\r\n  }\r\n\r\n  /**\r\n   * Constructs the string of chars in the buffer from a starting row and col\r\n   * to an ending row and col\r\n   * @param startCol The starting column position\r\n   * @param startRow The starting row position\r\n   * @param endCol The ending column position\r\n   * @param endRow The ending row position\r\n   * @param forward Direction to move\r\n   */\r\n  private _bufferLine(\r\n    startCol: number,\r\n    startRow: number,\r\n    endCol: number,\r\n    endRow: number,\r\n    forward: boolean\r\n  ): string {\r\n    let currentCol = startCol;\r\n    let currentRow = startRow;\r\n    let bufferStr = '';\r\n\r\n    while (currentCol !== endCol || currentRow !== endRow) {\r\n      currentCol += forward ? 1 : -1;\r\n\r\n      if (forward && currentCol > this._terminal.cols - 1) {\r\n        bufferStr += this._terminal.buffer.translateBufferLineToString(\r\n          currentRow, false, startCol, currentCol\r\n        );\r\n        currentCol = 0;\r\n        startCol = 0;\r\n        currentRow++;\r\n      } else if (!forward && currentCol < 0) {\r\n        bufferStr += this._terminal.buffer.translateBufferLineToString(\r\n          currentRow, false, 0, startCol + 1\r\n        );\r\n        currentCol = this._terminal.cols - 1;\r\n        startCol = currentCol;\r\n        currentRow--;\r\n      }\r\n    }\r\n\r\n    return bufferStr + this._terminal.buffer.translateBufferLineToString(\r\n      currentRow, false, startCol, currentCol\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Constructs the escape sequence for clicking an arrow\r\n   * @param direction The direction to move\r\n   */\r\n  private _sequence(direction: Direction): string {\r\n    const mod = this._terminal.applicationCursor ? 'O' : '[';\r\n    return C0.ESC + mod + direction;\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string repeated a given number of times\r\n * Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\r\n * @param count The number of times to repeat the string\r\n * @param string The string that is to be repeated\r\n */\r\nfunction repeat(count: number, str: string): string {\r\n  count = Math.floor(count);\r\n  let rpt = '';\r\n  for (let i = 0; i < count; i++) {\r\n    rpt += str;\r\n  }\r\n  return rpt;\r\n}\r\n","/**\r\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\n/**\r\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\r\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\r\n */\r\nexport class StringToUtf32 {\r\n  private _interim: number = 0;\r\n\r\n  /**\r\n   * Clears interim and resets decoder to clean state.\r\n   */\r\n  public clear(): void {\r\n    this._interim = 0;\r\n  }\r\n\r\n  /**\r\n   * Decode JS string to UTF32 codepoints.\r\n   * The methods assumes stream input and will store partly transmitted\r\n   * surrogate pairs and decode them with the next data chunk.\r\n   * Note: The method does no bound checks for target, therefore make sure\r\n   * the provided input data does not exceed the size of `target`.\r\n   * Returns the number of written codepoints in `target`.\r\n   */\r\n  decode(input: string, target: Uint32Array): number {\r\n    const length = input.length;\r\n\r\n    if (!length) {\r\n      return 0;\r\n    }\r\n\r\n    let size = 0;\r\n    let startPos = 0;\r\n\r\n    // handle leftover surrogate high\r\n    if (this._interim) {\r\n      const second = input.charCodeAt(startPos++);\r\n      if (0xDC00 <= second && second <= 0xDFFF) {\r\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\r\n      } else {\r\n        // illegal codepoint (USC2 handling)\r\n        target[size++] = this._interim;\r\n        target[size++] = second;\r\n      }\r\n      this._interim = 0;\r\n    }\r\n\r\n    for (let i = startPos; i < length; ++i) {\r\n      const code = input.charCodeAt(i);\r\n      // surrogate pair first\r\n      if (0xD800 <= code && code <= 0xDBFF) {\r\n        if (++i >= length) {\r\n          this._interim = code;\r\n          return size;\r\n        }\r\n        const second = input.charCodeAt(i);\r\n        if (0xDC00 <= second && second <= 0xDFFF) {\r\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\r\n        } else {\r\n          // illegal codepoint (USC2 handling)\r\n          target[size++] = code;\r\n          target[size++] = second;\r\n        }\r\n        continue;\r\n      }\r\n      target[size++] = code;\r\n    }\r\n    return size;\r\n  }\r\n}\r\n\r\n/**\r\n * Convert UTF32 codepoint into JS string.\r\n */\r\nexport function stringFromCodePoint(codePoint: number): string {\r\n  if (codePoint > 0xFFFF) {\r\n    // UTF32 to UTF16 conversion (see comments in utf32ToString)\r\n    codePoint -= 0x10000;\r\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\r\n  }\r\n  return String.fromCharCode(codePoint);\r\n}\r\n\r\n/**\r\n * Convert UTF32 char codes into JS string.\r\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\r\n * in a loop (which is a lot faster).\r\n */\r\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\r\n  let result = '';\r\n  for (let i = start; i < end; ++i) {\r\n    let codepoint = data[i];\r\n    if (codepoint > 0xFFFF) {\r\n      // JS string are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\r\n      // conversion rules:\r\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\r\n      //  - add high 10 bits to 0xD800  --> first surrogate\r\n      //  - add low 10 bits to 0xDC00   --> second surrogate\r\n      codepoint -= 0x10000;\r\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\r\n    } else {\r\n      result += String.fromCharCode(codepoint);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n","/**\r\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\r\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\r\n * @license MIT\r\n */\r\n\r\nimport { IKeyboardEvent } from '../../common/Types';\r\nimport { IKeyboardResult, KeyboardResultType } from '../Types';\r\nimport { C0 } from '../../common/data/EscapeSequences';\r\n\r\n// reg + shift key mappings for digits and special chars\r\nconst KEYCODE_KEY_MAPPINGS: { [key: number]: [string, string]} = {\r\n  // digits 0-9\r\n  48: ['0', ')'],\r\n  49: ['1', '!'],\r\n  50: ['2', '@'],\r\n  51: ['3', '#'],\r\n  52: ['4', '$'],\r\n  53: ['5', '%'],\r\n  54: ['6', '^'],\r\n  55: ['7', '&'],\r\n  56: ['8', '*'],\r\n  57: ['9', '('],\r\n\r\n  // special chars\r\n  186: [';', ':'],\r\n  187: ['=', '+'],\r\n  188: [',', '<'],\r\n  189: ['-', '_'],\r\n  190: ['.', '>'],\r\n  191: ['/', '?'],\r\n  192: ['`', '~'],\r\n  219: ['[', '{'],\r\n  220: ['\\\\', '|'],\r\n  221: [']', '}'],\r\n  222: ['\\'', '\"']\r\n};\r\n\r\nexport function evaluateKeyboardEvent(\r\n  ev: IKeyboardEvent,\r\n  applicationCursorMode: boolean,\r\n  isMac: boolean,\r\n  macOptionIsMeta: boolean\r\n): IKeyboardResult {\r\n  const result: IKeyboardResult = {\r\n    type: KeyboardResultType.SEND_KEY,\r\n    // Whether to cancel event propagation (NOTE: this may not be needed since the event is\r\n    // canceled at the end of keyDown\r\n    cancel: false,\r\n    // The new key even to emit\r\n    key: undefined\r\n  };\r\n  const modifiers = (ev.shiftKey ? 1 : 0) | (ev.altKey ? 2 : 0) | (ev.ctrlKey ? 4 : 0) | (ev.metaKey ? 8 : 0);\r\n  switch (ev.keyCode) {\r\n    case 0:\r\n      if (ev.key === 'UIKeyInputUpArrow') {\r\n        if (applicationCursorMode) {\r\n          result.key = C0.ESC + 'OA';\r\n        } else {\r\n          result.key = C0.ESC + '[A';\r\n        }\r\n      }\r\n      else if (ev.key === 'UIKeyInputLeftArrow') {\r\n        if (applicationCursorMode) {\r\n          result.key = C0.ESC + 'OD';\r\n        } else {\r\n          result.key = C0.ESC + '[D';\r\n        }\r\n      }\r\n      else if (ev.key === 'UIKeyInputRightArrow') {\r\n        if (applicationCursorMode) {\r\n          result.key = C0.ESC + 'OC';\r\n        } else {\r\n          result.key = C0.ESC + '[C';\r\n        }\r\n      }\r\n      else if (ev.key === 'UIKeyInputDownArrow') {\r\n        if (applicationCursorMode) {\r\n          result.key = C0.ESC + 'OB';\r\n        } else {\r\n          result.key = C0.ESC + '[B';\r\n        }\r\n      }\r\n      break;\r\n    case 8:\r\n      // backspace\r\n      if (ev.shiftKey) {\r\n        result.key = C0.BS; // ^H\r\n        break;\r\n      } else if (ev.altKey) {\r\n        result.key = C0.ESC + C0.DEL; // \\e ^?\r\n        break;\r\n      }\r\n      result.key = C0.DEL; // ^?\r\n      break;\r\n    case 9:\r\n      // tab\r\n      if (ev.shiftKey) {\r\n        result.key = C0.ESC + '[Z';\r\n        break;\r\n      }\r\n      result.key = C0.HT;\r\n      result.cancel = true;\r\n      break;\r\n    case 13:\r\n      // return/enter\r\n      result.key = C0.CR;\r\n      result.cancel = true;\r\n      break;\r\n    case 27:\r\n      // escape\r\n      result.key = C0.ESC;\r\n      result.cancel = true;\r\n      break;\r\n    case 37:\r\n      // left-arrow\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'D';\r\n        // HACK: Make Alt + left-arrow behave like Ctrl + left-arrow: move one word backwards\r\n        // http://unix.stackexchange.com/a/108106\r\n        // macOS uses different escape sequences than linux\r\n        if (result.key === C0.ESC + '[1;3D') {\r\n          result.key = isMac ? C0.ESC + 'b' : C0.ESC + '[1;5D';\r\n        }\r\n      } else if (applicationCursorMode) {\r\n        result.key = C0.ESC + 'OD';\r\n      } else {\r\n        result.key = C0.ESC + '[D';\r\n      }\r\n      break;\r\n    case 39:\r\n      // right-arrow\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'C';\r\n        // HACK: Make Alt + right-arrow behave like Ctrl + right-arrow: move one word forward\r\n        // http://unix.stackexchange.com/a/108106\r\n        // macOS uses different escape sequences than linux\r\n        if (result.key === C0.ESC + '[1;3C') {\r\n          result.key = isMac ? C0.ESC + 'f' : C0.ESC + '[1;5C';\r\n        }\r\n      } else if (applicationCursorMode) {\r\n        result.key = C0.ESC + 'OC';\r\n      } else {\r\n        result.key = C0.ESC + '[C';\r\n      }\r\n      break;\r\n    case 38:\r\n      // up-arrow\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'A';\r\n        // HACK: Make Alt + up-arrow behave like Ctrl + up-arrow\r\n        // http://unix.stackexchange.com/a/108106\r\n        if (result.key === C0.ESC + '[1;3A') {\r\n          result.key = C0.ESC + '[1;5A';\r\n        }\r\n      } else if (applicationCursorMode) {\r\n        result.key = C0.ESC + 'OA';\r\n      } else {\r\n        result.key = C0.ESC + '[A';\r\n      }\r\n      break;\r\n    case 40:\r\n      // down-arrow\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'B';\r\n        // HACK: Make Alt + down-arrow behave like Ctrl + down-arrow\r\n        // http://unix.stackexchange.com/a/108106\r\n        if (result.key === C0.ESC + '[1;3B') {\r\n          result.key = C0.ESC + '[1;5B';\r\n        }\r\n      } else if (applicationCursorMode) {\r\n        result.key = C0.ESC + 'OB';\r\n      } else {\r\n        result.key = C0.ESC + '[B';\r\n      }\r\n      break;\r\n    case 45:\r\n      // insert\r\n      if (!ev.shiftKey && !ev.ctrlKey) {\r\n        // <Ctrl> or <Shift> + <Insert> are used to\r\n        // copy-paste on some systems.\r\n        result.key = C0.ESC + '[2~';\r\n      }\r\n      break;\r\n    case 46:\r\n      // delete\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[3;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[3~';\r\n      }\r\n      break;\r\n    case 36:\r\n      // home\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'H';\r\n      } else if (applicationCursorMode) {\r\n        result.key = C0.ESC + 'OH';\r\n      } else {\r\n        result.key = C0.ESC + '[H';\r\n      }\r\n      break;\r\n    case 35:\r\n      // end\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'F';\r\n      } else if (applicationCursorMode) {\r\n        result.key = C0.ESC + 'OF';\r\n      } else {\r\n        result.key = C0.ESC + '[F';\r\n      }\r\n      break;\r\n    case 33:\r\n      // page up\r\n      if (ev.shiftKey) {\r\n        result.type = KeyboardResultType.PAGE_UP;\r\n      } else {\r\n        result.key = C0.ESC + '[5~';\r\n      }\r\n      break;\r\n    case 34:\r\n      // page down\r\n      if (ev.shiftKey) {\r\n        result.type = KeyboardResultType.PAGE_DOWN;\r\n      } else {\r\n        result.key = C0.ESC + '[6~';\r\n      }\r\n      break;\r\n    case 112:\r\n      // F1-F12\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'P';\r\n      } else {\r\n        result.key = C0.ESC + 'OP';\r\n      }\r\n      break;\r\n    case 113:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'Q';\r\n      } else {\r\n        result.key = C0.ESC + 'OQ';\r\n      }\r\n      break;\r\n    case 114:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'R';\r\n      } else {\r\n        result.key = C0.ESC + 'OR';\r\n      }\r\n      break;\r\n    case 115:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'S';\r\n      } else {\r\n        result.key = C0.ESC + 'OS';\r\n      }\r\n      break;\r\n    case 116:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[15;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[15~';\r\n      }\r\n      break;\r\n    case 117:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[17;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[17~';\r\n      }\r\n      break;\r\n    case 118:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[18;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[18~';\r\n      }\r\n      break;\r\n    case 119:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[19;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[19~';\r\n      }\r\n      break;\r\n    case 120:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[20;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[20~';\r\n      }\r\n      break;\r\n    case 121:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[21;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[21~';\r\n      }\r\n      break;\r\n    case 122:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[23;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[23~';\r\n      }\r\n      break;\r\n    case 123:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[24;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[24~';\r\n      }\r\n      break;\r\n    default:\r\n      // a-z and space\r\n      if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\r\n        if (ev.keyCode >= 65 && ev.keyCode <= 90) {\r\n          result.key = String.fromCharCode(ev.keyCode - 64);\r\n        } else if (ev.keyCode === 32) {\r\n          // NUL\r\n          result.key = String.fromCharCode(0);\r\n        } else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\r\n          // escape, file sep, group sep, record sep, unit sep\r\n          result.key = String.fromCharCode(ev.keyCode - 51 + 27);\r\n        } else if (ev.keyCode === 56) {\r\n          // delete\r\n          result.key = String.fromCharCode(127);\r\n        } else if (ev.keyCode === 219) {\r\n          // ^[ - Control Sequence Introducer (CSI)\r\n          result.key = String.fromCharCode(27);\r\n        } else if (ev.keyCode === 220) {\r\n          // ^\\ - String Terminator (ST)\r\n          result.key = String.fromCharCode(28);\r\n        } else if (ev.keyCode === 221) {\r\n          // ^] - Operating System Command (OSC)\r\n          result.key = String.fromCharCode(29);\r\n        }\r\n      } else if ((!isMac || macOptionIsMeta) && ev.altKey && !ev.metaKey) {\r\n        // On macOS this is a third level shift when !macOptionIsMeta. Use <Esc> instead.\r\n        const keyMapping = KEYCODE_KEY_MAPPINGS[ev.keyCode];\r\n        const key = keyMapping && keyMapping[!ev.shiftKey ? 0 : 1];\r\n        if (key) {\r\n          result.key = C0.ESC + key;\r\n        } else if (ev.keyCode >= 65 && ev.keyCode <= 90) {\r\n          const keyCode = ev.ctrlKey ? ev.keyCode - 64 : ev.keyCode + 32;\r\n          result.key = C0.ESC + String.fromCharCode(keyCode);\r\n        }\r\n      } else if (isMac && !ev.altKey && !ev.ctrlKey && ev.metaKey) {\r\n        if (ev.keyCode === 65) { // cmd + a\r\n          result.type = KeyboardResultType.SELECT_ALL;\r\n        }\r\n      } else if (ev.key && !ev.ctrlKey && !ev.altKey && !ev.metaKey && ev.keyCode >= 48 && ev.key.length === 1) {\r\n        // Include only keys that that result in a _single_ character; don't include num lock, volume up, etc.\r\n        result.key = ev.key;\r\n      }\r\n      break;\r\n  }\r\n\r\n  return result;\r\n}\r\n","/**\r\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ICharset } from '../Types';\r\n\r\n/**\r\n * The character sets supported by the terminal. These enable several languages\r\n * to be represented within the terminal with only 8-bit encoding. See ISO 2022\r\n * for a discussion on character sets. Only VT100 character sets are supported.\r\n */\r\nexport const CHARSETS: { [key: string]: ICharset | null } = {};\r\n\r\n/**\r\n * The default character set, US.\r\n */\r\nexport const DEFAULT_CHARSET: ICharset | null = CHARSETS['B'];\r\n\r\n/**\r\n * DEC Special Character and Line Drawing Set.\r\n * Reference: http://vt100.net/docs/vt102-ug/table5-13.html\r\n * A lot of curses apps use this if they see TERM=xterm.\r\n * testing: echo -e '\\e(0a\\e(B'\r\n * The xterm output sometimes seems to conflict with the\r\n * reference above. xterm seems in line with the reference\r\n * when running vttest however.\r\n * The table below now uses xterm's output from vttest.\r\n */\r\nCHARSETS['0'] = {\r\n  '`': '\\u25c6', // '◆'\r\n  'a': '\\u2592', // '▒'\r\n  'b': '\\u0009', // '\\t'\r\n  'c': '\\u000c', // '\\f'\r\n  'd': '\\u000d', // '\\r'\r\n  'e': '\\u000a', // '\\n'\r\n  'f': '\\u00b0', // '°'\r\n  'g': '\\u00b1', // '±'\r\n  'h': '\\u2424', // '\\u2424' (NL)\r\n  'i': '\\u000b', // '\\v'\r\n  'j': '\\u2518', // '┘'\r\n  'k': '\\u2510', // '┐'\r\n  'l': '\\u250c', // '┌'\r\n  'm': '\\u2514', // '└'\r\n  'n': '\\u253c', // '┼'\r\n  'o': '\\u23ba', // '⎺'\r\n  'p': '\\u23bb', // '⎻'\r\n  'q': '\\u2500', // '─'\r\n  'r': '\\u23bc', // '⎼'\r\n  's': '\\u23bd', // '⎽'\r\n  't': '\\u251c', // '├'\r\n  'u': '\\u2524', // '┤'\r\n  'v': '\\u2534', // '┴'\r\n  'w': '\\u252c', // '┬'\r\n  'x': '\\u2502', // '│'\r\n  'y': '\\u2264', // '≤'\r\n  'z': '\\u2265', // '≥'\r\n  '{': '\\u03c0', // 'π'\r\n  '|': '\\u2260', // '≠'\r\n  '}': '\\u00a3', // '£'\r\n  '~': '\\u00b7'  // '·'\r\n};\r\n\r\n/**\r\n * British character set\r\n * ESC (A\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-5.html\r\n */\r\nCHARSETS['A'] = {\r\n  '#': '£'\r\n};\r\n\r\n/**\r\n * United States character set\r\n * ESC (B\r\n */\r\nCHARSETS['B'] = null;\r\n\r\n/**\r\n * Dutch character set\r\n * ESC (4\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-6.html\r\n */\r\nCHARSETS['4'] = {\r\n  '#': '£',\r\n  '@': '¾',\r\n  '[': 'ij',\r\n  '\\\\': '½',\r\n  ']': '|',\r\n  '{': '¨',\r\n  '|': 'f',\r\n  '}': '¼',\r\n  '~': '´'\r\n};\r\n\r\n/**\r\n * Finnish character set\r\n * ESC (C or ESC (5\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-7.html\r\n */\r\nCHARSETS['C'] =\r\nCHARSETS['5'] = {\r\n  '[': 'Ä',\r\n  '\\\\': 'Ö',\r\n  ']': 'Å',\r\n  '^': 'Ü',\r\n  '`': 'é',\r\n  '{': 'ä',\r\n  '|': 'ö',\r\n  '}': 'å',\r\n  '~': 'ü'\r\n};\r\n\r\n/**\r\n * French character set\r\n * ESC (R\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-8.html\r\n */\r\nCHARSETS['R'] = {\r\n  '#': '£',\r\n  '@': 'à',\r\n  '[': '°',\r\n  '\\\\': 'ç',\r\n  ']': '§',\r\n  '{': 'é',\r\n  '|': 'ù',\r\n  '}': 'è',\r\n  '~': '¨'\r\n};\r\n\r\n/**\r\n * French Canadian character set\r\n * ESC (Q\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-9.html\r\n */\r\nCHARSETS['Q'] = {\r\n  '@': 'à',\r\n  '[': 'â',\r\n  '\\\\': 'ç',\r\n  ']': 'ê',\r\n  '^': 'î',\r\n  '`': 'ô',\r\n  '{': 'é',\r\n  '|': 'ù',\r\n  '}': 'è',\r\n  '~': 'û'\r\n};\r\n\r\n/**\r\n * German character set\r\n * ESC (K\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-10.html\r\n */\r\nCHARSETS['K'] = {\r\n  '@': '§',\r\n  '[': 'Ä',\r\n  '\\\\': 'Ö',\r\n  ']': 'Ü',\r\n  '{': 'ä',\r\n  '|': 'ö',\r\n  '}': 'ü',\r\n  '~': 'ß'\r\n};\r\n\r\n/**\r\n * Italian character set\r\n * ESC (Y\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-11.html\r\n */\r\nCHARSETS['Y'] = {\r\n  '#': '£',\r\n  '@': '§',\r\n  '[': '°',\r\n  '\\\\': 'ç',\r\n  ']': 'é',\r\n  '`': 'ù',\r\n  '{': 'à',\r\n  '|': 'ò',\r\n  '}': 'è',\r\n  '~': 'ì'\r\n};\r\n\r\n/**\r\n * Norwegian/Danish character set\r\n * ESC (E or ESC (6\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-12.html\r\n */\r\nCHARSETS['E'] =\r\nCHARSETS['6'] = {\r\n  '@': 'Ä',\r\n  '[': 'Æ',\r\n  '\\\\': 'Ø',\r\n  ']': 'Å',\r\n  '^': 'Ü',\r\n  '`': 'ä',\r\n  '{': 'æ',\r\n  '|': 'ø',\r\n  '}': 'å',\r\n  '~': 'ü'\r\n};\r\n\r\n/**\r\n * Spanish character set\r\n * ESC (Z\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-13.html\r\n */\r\nCHARSETS['Z'] = {\r\n  '#': '£',\r\n  '@': '§',\r\n  '[': '¡',\r\n  '\\\\': 'Ñ',\r\n  ']': '¿',\r\n  '{': '°',\r\n  '|': 'ñ',\r\n  '}': 'ç'\r\n};\r\n\r\n/**\r\n * Swedish character set\r\n * ESC (H or ESC (7\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-14.html\r\n */\r\nCHARSETS['H'] =\r\nCHARSETS['7'] = {\r\n  '@': 'É',\r\n  '[': 'Ä',\r\n  '\\\\': 'Ö',\r\n  ']': 'Å',\r\n  '^': 'Ü',\r\n  '`': 'é',\r\n  '{': 'ä',\r\n  '|': 'ö',\r\n  '}': 'å',\r\n  '~': 'ü'\r\n};\r\n\r\n/**\r\n * Swiss character set\r\n * ESC (=\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-15.html\r\n */\r\nCHARSETS['='] = {\r\n  '#': 'ù',\r\n  '@': 'à',\r\n  '[': 'é',\r\n  '\\\\': 'ç',\r\n  ']': 'ê',\r\n  '^': 'î',\r\n  '_': 'è',\r\n  '`': 'ô',\r\n  '{': 'ä',\r\n  '|': 'ö',\r\n  '}': 'ü',\r\n  '~': 'û'\r\n};\r\n","/**\r\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nconst isNode = (typeof navigator === 'undefined') ? true : false;\r\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\r\nconst platform = (isNode) ? 'node' : navigator.platform;\r\n\r\nexport const isFirefox = !!~userAgent.indexOf('Firefox');\r\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\r\nexport const isMSIE = !!~userAgent.indexOf('MSIE') || !!~userAgent.indexOf('Trident');\r\n\r\n// Find the users platform. We use this to interpret the meta key\r\n// and ISO third level shifts.\r\n// http://stackoverflow.com/q/19877924/577598\r\nexport const isMac = contains(['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'], platform);\r\nexport const isIpad = platform === 'iPad';\r\nexport const isIphone = platform === 'iPhone';\r\nexport const isMSWindows = contains(['Windows', 'Win16', 'Win32', 'WinCE'], platform);\r\nexport const isLinux = platform.indexOf('Linux') >= 0;\r\n\r\n/**\r\n * Return if the given array contains the given element\r\n * @param arr The array to search for the given element.\r\n * @param el The element to look for into the array\r\n */\r\nfunction contains(arr: any[], el: any): boolean {\r\n  return arr.indexOf(el) >= 0;\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\n/**\r\n * C0 control codes\r\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\r\n */\r\nexport namespace C0 {\r\n  /** Null (Caret = ^@, C = \\0) */\r\n  export const NUL = '\\x00';\r\n  /** Start of Heading (Caret = ^A) */\r\n  export const SOH = '\\x01';\r\n  /** Start of Text (Caret = ^B) */\r\n  export const STX = '\\x02';\r\n  /** End of Text (Caret = ^C) */\r\n  export const ETX = '\\x03';\r\n  /** End of Transmission (Caret = ^D) */\r\n  export const EOT = '\\x04';\r\n  /** Enquiry (Caret = ^E) */\r\n  export const ENQ = '\\x05';\r\n  /** Acknowledge (Caret = ^F) */\r\n  export const ACK = '\\x06';\r\n  /** Bell (Caret = ^G, C = \\a) */\r\n  export const BEL = '\\x07';\r\n  /** Backspace (Caret = ^H, C = \\b) */\r\n  export const BS  = '\\x08';\r\n  /** Character Tabulation, Horizontal Tabulation (Caret = ^I, C = \\t) */\r\n  export const HT  = '\\x09';\r\n  /** Line Feed (Caret = ^J, C = \\n) */\r\n  export const LF  = '\\x0a';\r\n  /** Line Tabulation, Vertical Tabulation (Caret = ^K, C = \\v) */\r\n  export const VT  = '\\x0b';\r\n  /** Form Feed (Caret = ^L, C = \\f) */\r\n  export const FF  = '\\x0c';\r\n  /** Carriage Return (Caret = ^M, C = \\r) */\r\n  export const CR  = '\\x0d';\r\n  /** Shift Out (Caret = ^N) */\r\n  export const SO  = '\\x0e';\r\n  /** Shift In (Caret = ^O) */\r\n  export const SI  = '\\x0f';\r\n  /** Data Link Escape (Caret = ^P) */\r\n  export const DLE = '\\x10';\r\n  /** Device Control One (XON) (Caret = ^Q) */\r\n  export const DC1 = '\\x11';\r\n  /** Device Control Two (Caret = ^R) */\r\n  export const DC2 = '\\x12';\r\n  /** Device Control Three (XOFF) (Caret = ^S) */\r\n  export const DC3 = '\\x13';\r\n  /** Device Control Four (Caret = ^T) */\r\n  export const DC4 = '\\x14';\r\n  /** Negative Acknowledge (Caret = ^U) */\r\n  export const NAK = '\\x15';\r\n  /** Synchronous Idle (Caret = ^V) */\r\n  export const SYN = '\\x16';\r\n  /** End of Transmission Block (Caret = ^W) */\r\n  export const ETB = '\\x17';\r\n  /** Cancel (Caret = ^X) */\r\n  export const CAN = '\\x18';\r\n  /** End of Medium (Caret = ^Y) */\r\n  export const EM  = '\\x19';\r\n  /** Substitute (Caret = ^Z) */\r\n  export const SUB = '\\x1a';\r\n  /** Escape (Caret = ^[, C = \\e) */\r\n  export const ESC = '\\x1b';\r\n  /** File Separator (Caret = ^\\) */\r\n  export const FS  = '\\x1c';\r\n  /** Group Separator (Caret = ^]) */\r\n  export const GS  = '\\x1d';\r\n  /** Record Separator (Caret = ^^) */\r\n  export const RS  = '\\x1e';\r\n  /** Unit Separator (Caret = ^_) */\r\n  export const US  = '\\x1f';\r\n  /** Space */\r\n  export const SP  = '\\x20';\r\n  /** Delete (Caret = ^?) */\r\n  export const DEL = '\\x7f';\r\n}\r\n\r\n/**\r\n * C1 control codes\r\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\r\n */\r\nexport namespace C1 {\r\n  /** padding character */\r\n  export const PAD = '\\x80';\r\n  /** High Octet Preset */\r\n  export const HOP = '\\x81';\r\n  /** Break Permitted Here */\r\n  export const BPH = '\\x82';\r\n  /** No Break Here */\r\n  export const NBH = '\\x83';\r\n  /** Index */\r\n  export const IND = '\\x84';\r\n  /** Next Line */\r\n  export const NEL = '\\x85';\r\n  /** Start of Selected Area */\r\n  export const SSA = '\\x86';\r\n  /** End of Selected Area */\r\n  export const ESA = '\\x87';\r\n  /** Horizontal Tabulation Set */\r\n  export const HTS = '\\x88';\r\n  /** Horizontal Tabulation With Justification */\r\n  export const HTJ = '\\x89';\r\n  /** Vertical Tabulation Set */\r\n  export const VTS = '\\x8a';\r\n  /** Partial Line Down */\r\n  export const PLD = '\\x8b';\r\n  /** Partial Line Up */\r\n  export const PLU = '\\x8c';\r\n  /** Reverse Index */\r\n  export const RI = '\\x8d';\r\n  /** Single-Shift 2 */\r\n  export const SS2 = '\\x8e';\r\n  /** Single-Shift 3 */\r\n  export const SS3 = '\\x8f';\r\n  /** Device Control String */\r\n  export const DCS = '\\x90';\r\n  /** Private Use 1 */\r\n  export const PU1 = '\\x91';\r\n  /** Private Use 2 */\r\n  export const PU2 = '\\x92';\r\n  /** Set Transmit State */\r\n  export const STS = '\\x93';\r\n  /** Destructive backspace, intended to eliminate ambiguity about meaning of BS. */\r\n  export const CCH = '\\x94';\r\n  /** Message Waiting */\r\n  export const MW = '\\x95';\r\n  /** Start of Protected Area */\r\n  export const SPA = '\\x96';\r\n  /** End of Protected Area */\r\n  export const EPA = '\\x97';\r\n  /** Start of String */\r\n  export const SOS = '\\x98';\r\n  /** Single Graphic Character Introducer */\r\n  export const SGCI = '\\x99';\r\n  /** Single Character Introducer */\r\n  export const SCI = '\\x9a';\r\n  /** Control Sequence Introducer */\r\n  export const CSI = '\\x9b';\r\n  /** String Terminator */\r\n  export const ST = '\\x9c';\r\n  /** Operating System Command */\r\n  export const OSC = '\\x9d';\r\n  /** Privacy Message */\r\n  export const PM = '\\x9e';\r\n  /** Application Program Command */\r\n  export const APC = '\\x9f';\r\n}\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray\r\n  | Int8Array | Int16Array | Int32Array\r\n  | Float32Array | Float64Array;\r\n\r\n\r\n/**\r\n * polyfill for TypedArray.fill\r\n * This is needed to support .fill in all safari versions and IE 11.\r\n */\r\nexport function fill<T extends TypedArray>(array: T, value: number, start?: number, end?: number): T {\r\n  // all modern engines that support .fill\r\n  if (array.fill) {\r\n    return array.fill(value, start, end) as T;\r\n  }\r\n  return fillFallback(array, value, start, end);\r\n}\r\n\r\nexport function fillFallback<T extends TypedArray>(array: T, value: number, start: number = 0, end: number = array.length): T {\r\n  // safari and IE 11\r\n  // since IE 11 does not support Array.prototype.fill either\r\n  // we cannot use the suggested polyfill from MDN\r\n  // instead we simply fall back to looping\r\n  if (start >= array.length) {\r\n    return array;\r\n  }\r\n  start = (array.length + start) % array.length;\r\n  if (end >= array.length) {\r\n    end = array.length;\r\n  } else {\r\n    end = (array.length + end) % array.length;\r\n  }\r\n  for (let i = start; i < end; ++i) {\r\n    array[i] = value;\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * Concat two typed arrays `a` and `b`.\r\n * Returns a new typed array.\r\n */\r\nexport function concat<T extends TypedArray>(a: T, b: T): T {\r\n  const result = new (a.constructor as any)(a.length + b.length);\r\n  result.set(a);\r\n  result.set(b, a.length);\r\n  return result;\r\n}\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IDisposable } from 'xterm';\r\n\r\n/**\r\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\r\n * object and its components.\r\n */\r\nexport abstract class Disposable implements IDisposable {\r\n  protected _disposables: IDisposable[] = [];\r\n  protected _isDisposed: boolean = false;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\r\n   */\r\n  public dispose(): void {\r\n    this._isDisposed = true;\r\n    this._disposables.forEach(d => d.dispose());\r\n    this._disposables.length = 0;\r\n  }\r\n\r\n  /**\r\n   * Registers a disposable object.\r\n   * @param d The disposable to register.\r\n   */\r\n  public register<T extends IDisposable>(d: T): void {\r\n    this._disposables.push(d);\r\n  }\r\n\r\n  /**\r\n   * Unregisters a disposable object if it has been registered, if not do\r\n   * nothing.\r\n   * @param d The disposable to unregister.\r\n   */\r\n  public unregister<T extends IDisposable>(d: T): void {\r\n    const index = this._disposables.indexOf(d);\r\n    if (index !== -1) {\r\n      this._disposables.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { XtermListener } from './Types';\r\nimport { IEventEmitter, IDisposable } from 'xterm';\r\nimport { Disposable } from './Lifecycle';\r\n\r\nexport class EventEmitter extends Disposable implements IEventEmitter, IDisposable {\r\n  private _events: {[type: string]: XtermListener[]};\r\n\r\n  constructor() {\r\n    super();\r\n    // Restore the previous events if available, this will happen if the\r\n    // constructor is called multiple times on the same object (terminal reset).\r\n    this._events = (<any>this)._events || {};\r\n  }\r\n\r\n  public on(type: string, listener: XtermListener): void {\r\n    this._events[type] = this._events[type] || [];\r\n    this._events[type].push(listener);\r\n  }\r\n\r\n  /**\r\n   * Adds a disposable listener to the EventEmitter, returning the disposable.\r\n   * @param type The event type.\r\n   * @param handler The handler for the listener.\r\n   */\r\n  public addDisposableListener(type: string, handler: XtermListener): IDisposable {\r\n    // TODO: Rename addDisposableEventListener to more easily disambiguate from Dom listener\r\n    this.on(type, handler);\r\n    let disposed = false;\r\n    return {\r\n      dispose: () => {\r\n        if (disposed) {\r\n          // Already disposed\r\n          return;\r\n        }\r\n        this.off(type, handler);\r\n        disposed = true;\r\n      }\r\n    };\r\n  }\r\n\r\n  public off(type: string, listener: XtermListener): void {\r\n    if (!this._events[type]) {\r\n      return;\r\n    }\r\n\r\n    const obj = this._events[type];\r\n    let i = obj.length;\r\n\r\n    while (i--) {\r\n      if (obj[i] === listener) {\r\n        obj.splice(i, 1);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public removeAllListeners(type: string): void {\r\n    if (this._events[type]) {\r\n       delete this._events[type];\r\n    }\r\n  }\r\n\r\n  public emit(type: string, ...args: any[]): void {\r\n    if (!this._events[type]) {\r\n      return;\r\n    }\r\n    const obj = this._events[type];\r\n    for (let i = 0; i < obj.length; i++) {\r\n      obj[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  public emitMayRemoveListeners(type: string, ...args: any[]): void {\r\n    if (!this._events[type]) {\r\n      return;\r\n    }\r\n    const obj = this._events[type];\r\n    let length = obj.length;\r\n    for (let i = 0; i < obj.length; i++) {\r\n      obj[i].apply(this, args);\r\n      i -= length - obj.length;\r\n      length = obj.length;\r\n    }\r\n  }\r\n\r\n  public listeners(type: string): XtermListener[] {\r\n    return this._events[type] || [];\r\n  }\r\n\r\n  public dispose(): void {\r\n    super.dispose();\r\n    this._events = {};\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\n/*\r\n * A simple utility for cloning values\r\n */\r\nexport function clone<T>(val: T, depth: number = 5): T | null {\r\n  if (typeof val !== 'object') {\r\n    return val;\r\n  }\r\n\r\n  // cloning null always returns null\r\n  if (val === null) {\r\n    return null;\r\n  }\r\n\r\n  // If we're cloning an array, use an array as the base, otherwise use an object\r\n  const clonedObject: any = Array.isArray(val) ? [] : {};\r\n\r\n  for (const key in val) {\r\n    // Recursively clone eack item unless we're at the maximum depth\r\n    clonedObject[key] = depth <= 1 ? val[key] : clone(val[key], depth - 1);\r\n  }\r\n\r\n  return clonedObject as T;\r\n}\r\n","/**\r\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { EventEmitter } from './EventEmitter';\r\nimport { ICircularList } from './Types';\r\n\r\nexport interface IInsertEvent {\r\n  index: number;\r\n  amount: number;\r\n}\r\n\r\nexport interface IDeleteEvent {\r\n  index: number;\r\n  amount: number;\r\n}\r\n\r\n/**\r\n * Represents a circular list; a list with a maximum size that wraps around when push is called,\r\n * overriding values at the start of the list.\r\n */\r\nexport class CircularList<T> extends EventEmitter implements ICircularList<T> {\r\n  protected _array: (T | undefined)[];\r\n  private _startIndex: number;\r\n  private _length: number;\r\n\r\n  constructor(\r\n    private _maxLength: number\r\n  ) {\r\n    super();\r\n    this._array = new Array<T>(this._maxLength);\r\n    this._startIndex = 0;\r\n    this._length = 0;\r\n  }\r\n\r\n  public get maxLength(): number {\r\n    return this._maxLength;\r\n  }\r\n\r\n  public set maxLength(newMaxLength: number) {\r\n    // There was no change in maxLength, return early.\r\n    if (this._maxLength === newMaxLength) {\r\n      return;\r\n    }\r\n\r\n    // Reconstruct array, starting at index 0. Only transfer values from the\r\n    // indexes 0 to length.\r\n    const newArray = new Array<T | undefined>(newMaxLength);\r\n    for (let i = 0; i < Math.min(newMaxLength, this.length); i++) {\r\n      newArray[i] = this._array[this._getCyclicIndex(i)];\r\n    }\r\n    this._array = newArray;\r\n    this._maxLength = newMaxLength;\r\n    this._startIndex = 0;\r\n  }\r\n\r\n  public get length(): number {\r\n    return this._length;\r\n  }\r\n\r\n  public set length(newLength: number) {\r\n    if (newLength > this._length) {\r\n      for (let i = this._length; i < newLength; i++) {\r\n        this._array[i] = undefined;\r\n      }\r\n    }\r\n    this._length = newLength;\r\n  }\r\n\r\n  /**\r\n   * Gets the value at an index.\r\n   *\r\n   * Note that for performance reasons there is no bounds checking here, the index reference is\r\n   * circular so this should always return a value and never throw.\r\n   * @param index The index of the value to get.\r\n   * @return The value corresponding to the index.\r\n   */\r\n  public get(index: number): T | undefined {\r\n    return this._array[this._getCyclicIndex(index)];\r\n  }\r\n\r\n  /**\r\n   * Sets the value at an index.\r\n   *\r\n   * Note that for performance reasons there is no bounds checking here, the index reference is\r\n   * circular so this should always return a value and never throw.\r\n   * @param index The index to set.\r\n   * @param value The value to set.\r\n   */\r\n  public set(index: number, value: T | undefined): void {\r\n    this._array[this._getCyclicIndex(index)] = value;\r\n  }\r\n\r\n  /**\r\n   * Pushes a new value onto the list, wrapping around to the start of the array, overriding index 0\r\n   * if the maximum length is reached.\r\n   * @param value The value to push onto the list.\r\n   */\r\n  public push(value: T): void {\r\n    this._array[this._getCyclicIndex(this._length)] = value;\r\n    if (this._length === this._maxLength) {\r\n      this._startIndex = ++this._startIndex % this._maxLength;\r\n      this.emitMayRemoveListeners('trim', 1);\r\n    } else {\r\n      this._length++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Advance ringbuffer index and return current element for recycling.\r\n   * Note: The buffer must be full for this method to work.\r\n   * @throws When the buffer is not full.\r\n   */\r\n  public recycle(): T {\r\n    if (this._length !== this._maxLength) {\r\n      throw new Error('Can only recycle when the buffer is full');\r\n    }\r\n    this._startIndex = ++this._startIndex % this._maxLength;\r\n    this.emitMayRemoveListeners('trim', 1);\r\n    return this._array[this._getCyclicIndex(this._length - 1)]!;\r\n  }\r\n\r\n  /**\r\n   * Ringbuffer is at max length.\r\n   */\r\n  public get isFull(): boolean {\r\n    return this._length === this._maxLength;\r\n  }\r\n\r\n  /**\r\n   * Removes and returns the last value on the list.\r\n   * @return The popped value.\r\n   */\r\n  public pop(): T | undefined {\r\n    return this._array[this._getCyclicIndex(this._length-- - 1)];\r\n  }\r\n\r\n  /**\r\n   * Deletes and/or inserts items at a particular index (in that order). Unlike\r\n   * Array.prototype.splice, this operation does not return the deleted items as a new array in\r\n   * order to save creating a new array. Note that this operation may shift all values in the list\r\n   * in the worst case.\r\n   * @param start The index to delete and/or insert.\r\n   * @param deleteCount The number of elements to delete.\r\n   * @param items The items to insert.\r\n   */\r\n  public splice(start: number, deleteCount: number, ...items: T[]): void {\r\n    // Delete items\r\n    if (deleteCount) {\r\n      for (let i = start; i < this._length - deleteCount; i++) {\r\n        this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\r\n      }\r\n      this._length -= deleteCount;\r\n    }\r\n\r\n    // Add items\r\n    for (let i = this._length - 1; i >= start; i--) {\r\n      this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\r\n    }\r\n    for (let i = 0; i < items.length; i++) {\r\n      this._array[this._getCyclicIndex(start + i)] = items[i];\r\n    }\r\n\r\n    // Adjust length as needed\r\n    if (this._length + items.length > this._maxLength) {\r\n      const countToTrim = (this._length + items.length) - this._maxLength;\r\n      this._startIndex += countToTrim;\r\n      this._length = this._maxLength;\r\n      this.emitMayRemoveListeners('trim', countToTrim);\r\n    } else {\r\n      this._length += items.length;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trims a number of items from the start of the list.\r\n   * @param count The number of items to remove.\r\n   */\r\n  public trimStart(count: number): void {\r\n    if (count > this._length) {\r\n      count = this._length;\r\n    }\r\n    this._startIndex += count;\r\n    this._length -= count;\r\n    this.emitMayRemoveListeners('trim', count);\r\n  }\r\n\r\n  public shiftElements(start: number, count: number, offset: number): void {\r\n    if (count <= 0) {\r\n      return;\r\n    }\r\n    if (start < 0 || start >= this._length) {\r\n      throw new Error('start argument out of range');\r\n    }\r\n    if (start + offset < 0) {\r\n      throw new Error('Cannot shift elements in list beyond index 0');\r\n    }\r\n\r\n    if (offset > 0) {\r\n      for (let i = count - 1; i >= 0; i--) {\r\n        this.set(start + i + offset, this.get(start + i));\r\n      }\r\n      const expandListBy = (start + count + offset) - this._length;\r\n      if (expandListBy > 0) {\r\n        this._length += expandListBy;\r\n        while (this._length > this._maxLength) {\r\n          this._length--;\r\n          this._startIndex++;\r\n          this.emitMayRemoveListeners('trim', 1);\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < count; i++) {\r\n        this.set(start + i + offset, this.get(start + i));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the cyclic index for the specified regular index. The cyclic index can then be used on the\r\n   * backing array to get the element associated with the regular index.\r\n   * @param index The regular index.\r\n   * @returns The cyclic index.\r\n   */\r\n  private _getCyclicIndex(index: number): number {\r\n    return (this._startIndex + index) % this._maxLength;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IColorSet } from './renderer/Types';\r\nimport { ITerminal, IViewport } from './Types';\r\nimport { CharMeasure } from './ui/CharMeasure';\r\nimport { Disposable } from './common/Lifecycle';\r\nimport { addDisposableDomListener } from './ui/Lifecycle';\r\n\r\nconst FALLBACK_SCROLL_BAR_WIDTH = 15;\r\n\r\n/**\r\n * Represents the viewport of a terminal, the visible area within the larger buffer of output.\r\n * Logic for the virtual scroll bar is included in this object.\r\n */\r\nexport class Viewport extends Disposable implements IViewport {\r\n  public scrollBarWidth: number = 0;\r\n  private _currentRowHeight: number = 0;\r\n  private _lastRecordedBufferLength: number = 0;\r\n  private _lastRecordedViewportHeight: number = 0;\r\n  private _lastRecordedBufferHeight: number = 0;\r\n  private _lastTouchY: number;\r\n  private _lastScrollTop: number = 0;\r\n\r\n  // Stores a partial line amount when scrolling, this is used to keep track of how much of a line\r\n  // is scrolled so we can \"scroll\" over partial lines and feel natural on touchpads. This is a\r\n  // quick fix and could have a more robust solution in place that reset the value when needed.\r\n  private _wheelPartialScroll: number = 0;\r\n\r\n  private _refreshAnimationFrame: number | null = null;\r\n  private _ignoreNextScrollEvent: boolean = false;\r\n\r\n  /**\r\n   * Creates a new Viewport.\r\n   * @param _terminal The terminal this viewport belongs to.\r\n   * @param _viewportElement The DOM element acting as the viewport.\r\n   * @param _scrollArea The DOM element acting as the scroll area.\r\n   * @param _charMeasure A DOM element used to measure the character size of. the terminal.\r\n   */\r\n  constructor(\r\n    private _terminal: ITerminal,\r\n    private _viewportElement: HTMLElement,\r\n    private _scrollArea: HTMLElement,\r\n    private _charMeasure: CharMeasure\r\n  ) {\r\n    super();\r\n\r\n    // Measure the width of the scrollbar. If it is 0 we can assume it's an OSX overlay scrollbar.\r\n    // Unfortunately the overlay scrollbar would be hidden underneath the screen element in that case,\r\n    // therefore we account for a standard amount to make it visible\r\n    this.scrollBarWidth = (this._viewportElement.offsetWidth - this._scrollArea.offsetWidth) || FALLBACK_SCROLL_BAR_WIDTH;\r\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', this._onScroll.bind(this)));\r\n\r\n    // Perform this async to ensure the CharMeasure is ready.\r\n    setTimeout(() => this.syncScrollArea(), 0);\r\n  }\r\n\r\n  public onThemeChanged(colors: IColorSet): void {\r\n    this._viewportElement.style.backgroundColor = colors.background.css;\r\n  }\r\n\r\n  /**\r\n   * Refreshes row height, setting line-height, viewport height and scroll area height if\r\n   * necessary.\r\n   */\r\n  private _refresh(): void {\r\n    if (this._refreshAnimationFrame === null) {\r\n      this._refreshAnimationFrame = requestAnimationFrame(() => this._innerRefresh());\r\n    }\r\n  }\r\n\r\n  private _innerRefresh(): void {\r\n    if (this._charMeasure.height > 0) {\r\n      this._currentRowHeight = this._terminal.renderer.dimensions.scaledCellHeight / window.devicePixelRatio;\r\n      this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;\r\n      const newBufferHeight = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._terminal.renderer.dimensions.canvasHeight);\r\n      if (this._lastRecordedBufferHeight !== newBufferHeight) {\r\n        this._lastRecordedBufferHeight = newBufferHeight;\r\n        this._scrollArea.style.height = this._lastRecordedBufferHeight + 'px';\r\n      }\r\n    }\r\n\r\n    // Sync scrollTop\r\n    const scrollTop = this._terminal.buffer.ydisp * this._currentRowHeight;\r\n    if (this._viewportElement.scrollTop !== scrollTop) {\r\n      // Ignore the next scroll event which will be triggered by setting the scrollTop as we do not\r\n      // want this event to scroll the terminal\r\n      this._ignoreNextScrollEvent = true;\r\n      this._viewportElement.scrollTop = scrollTop;\r\n    }\r\n\r\n    this._refreshAnimationFrame = null;\r\n  }\r\n\r\n  /**\r\n   * Updates dimensions and synchronizes the scroll area if necessary.\r\n   */\r\n  public syncScrollArea(): void {\r\n    // If buffer height changed\r\n    if (this._lastRecordedBufferLength !== this._terminal.buffer.lines.length) {\r\n      this._lastRecordedBufferLength = this._terminal.buffer.lines.length;\r\n      this._refresh();\r\n      return;\r\n    }\r\n\r\n    // If viewport height changed\r\n    if (this._lastRecordedViewportHeight !== (<any>this._terminal).renderer.dimensions.canvasHeight) {\r\n      this._refresh();\r\n      return;\r\n    }\r\n\r\n    // If the buffer position doesn't match last scroll top\r\n    const newScrollTop = this._terminal.buffer.ydisp * this._currentRowHeight;\r\n    if (this._lastScrollTop !== newScrollTop) {\r\n      this._refresh();\r\n      return;\r\n    }\r\n\r\n    // If element's scroll top changed, this can happen when hiding the element\r\n    if (this._lastScrollTop !== this._viewportElement.scrollTop) {\r\n      this._refresh();\r\n      return;\r\n    }\r\n\r\n    // If row height changed\r\n    if (this._terminal.renderer.dimensions.scaledCellHeight / window.devicePixelRatio !== this._currentRowHeight) {\r\n      this._refresh();\r\n      return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles scroll events on the viewport, calculating the new viewport and requesting the\r\n   * terminal to scroll to it.\r\n   * @param ev The scroll event.\r\n   */\r\n  private _onScroll(ev: Event): void {\r\n    // Record current scroll top position\r\n    this._lastScrollTop = this._viewportElement.scrollTop;\r\n\r\n    // Don't attempt to scroll if the element is not visible, otherwise scrollTop will be corrupt\r\n    // which causes the terminal to scroll the buffer to the top\r\n    if (!this._viewportElement.offsetParent) {\r\n      return;\r\n    }\r\n\r\n    // Ignore the event if it was flagged to ignore (when the source of the event is from Viewport)\r\n    if (this._ignoreNextScrollEvent) {\r\n      this._ignoreNextScrollEvent = false;\r\n      return;\r\n    }\r\n\r\n    const newRow = Math.round(this._lastScrollTop / this._currentRowHeight);\r\n    const diff = newRow - this._terminal.buffer.ydisp;\r\n    this._terminal.scrollLines(diff, true);\r\n  }\r\n\r\n  /**\r\n   * Handles mouse wheel events by adjusting the viewport's scrollTop and delegating the actual\r\n   * scrolling to `onScroll`, this event needs to be attached manually by the consumer of\r\n   * `Viewport`.\r\n   * @param ev The mouse wheel event.\r\n   */\r\n  public onWheel(ev: WheelEvent): void {\r\n    const amount = this._getPixelsScrolled(ev);\r\n    if (amount === 0) {\r\n      return;\r\n    }\r\n    this._viewportElement.scrollTop += amount;\r\n    // Prevent the page from scrolling when the terminal scrolls\r\n    ev.preventDefault();\r\n  }\r\n\r\n  private _getPixelsScrolled(ev: WheelEvent): number {\r\n    // Do nothing if it's not a vertical scroll event\r\n    if (ev.deltaY === 0) {\r\n      return 0;\r\n    }\r\n\r\n    // Fallback to WheelEvent.DOM_DELTA_PIXEL\r\n    let amount = ev.deltaY;\r\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\r\n      amount *= this._currentRowHeight;\r\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\r\n      amount *= this._currentRowHeight * this._terminal.rows;\r\n    }\r\n    return amount;\r\n  }\r\n\r\n  /**\r\n   * Gets the number of pixels scrolled by the mouse event taking into account what type of delta\r\n   * is being used.\r\n   * @param ev The mouse wheel event.\r\n   */\r\n  public getLinesScrolled(ev: WheelEvent): number {\r\n    // Do nothing if it's not a vertical scroll event\r\n    if (ev.deltaY === 0) {\r\n      return 0;\r\n    }\r\n\r\n    // Fallback to WheelEvent.DOM_DELTA_LINE\r\n    let amount = ev.deltaY;\r\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\r\n      amount /= this._currentRowHeight + 0.0; // Prevent integer division\r\n      this._wheelPartialScroll += amount;\r\n      amount = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1);\r\n      this._wheelPartialScroll %= 1;\r\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\r\n      amount *= this._terminal.rows;\r\n    }\r\n    return amount;\r\n  }\r\n\r\n  /**\r\n   * Handles the touchstart event, recording the touch occurred.\r\n   * @param ev The touch event.\r\n   */\r\n  public onTouchStart(ev: TouchEvent): void {\r\n    this._lastTouchY = ev.touches[0].pageY;\r\n  }\r\n\r\n  /**\r\n   * Handles the touchmove event, scrolling the viewport if the position shifted.\r\n   * @param ev The touch event.\r\n   */\r\n  public onTouchMove(ev: TouchEvent): void {\r\n    const deltaY = this._lastTouchY - ev.touches[0].pageY;\r\n    this._lastTouchY = ev.touches[0].pageY;\r\n    if (deltaY === 0) {\r\n      return;\r\n    }\r\n    this._viewportElement.scrollTop += deltaY;\r\n    ev.preventDefault();\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\r\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\r\n * @license MIT\r\n *\r\n * Originally forked from (with the author's permission):\r\n *   Fabrice Bellard's javascript vt100 for jslinux:\r\n *   http://bellard.org/jslinux/\r\n *   Copyright (c) 2011 Fabrice Bellard\r\n *   The original design remains. The terminal itself\r\n *   has been extended to include xterm CSI codes, among\r\n *   other features.\r\n *\r\n * Terminal Emulation References:\r\n *   http://vt100.net/\r\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\r\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\r\n *   http://invisible-island.net/vttest/\r\n *   http://www.inwap.com/pdp10/ansicode.txt\r\n *   http://linux.die.net/man/4/console_codes\r\n *   http://linux.die.net/man/7/urxvt\r\n */\r\n\r\nimport { IInputHandlingTerminal, IViewport, ICompositionHelper, ITerminalOptions, ITerminal, IBrowser, ILinkifier, ILinkMatcherOptions, CustomKeyEventHandler, LinkMatcherHandler, CharData, CharacterJoinerHandler, IBufferLine } from './Types';\r\nimport { IMouseZoneManager } from './ui/Types';\r\nimport { IRenderer } from './renderer/Types';\r\nimport { BufferSet } from './BufferSet';\r\nimport { Buffer, MAX_BUFFER_SIZE, DEFAULT_ATTR, NULL_CELL_CODE, NULL_CELL_WIDTH, NULL_CELL_CHAR, CHAR_DATA_ATTR_INDEX } from './Buffer';\r\nimport { CompositionHelper } from './CompositionHelper';\r\nimport { EventEmitter } from './common/EventEmitter';\r\nimport { Viewport } from './Viewport';\r\nimport { rightClickHandler, moveTextAreaUnderMouseCursor, pasteHandler, copyHandler } from './ui/Clipboard';\r\nimport { C0 } from './common/data/EscapeSequences';\r\nimport { InputHandler } from './InputHandler';\r\nimport { Renderer } from './renderer/Renderer';\r\nimport { Linkifier } from './Linkifier';\r\nimport { SelectionManager } from './SelectionManager';\r\nimport { CharMeasure } from './ui/CharMeasure';\r\nimport * as Browser from './core/Platform';\r\nimport { addDisposableDomListener } from './ui/Lifecycle';\r\nimport * as Strings from './Strings';\r\nimport { MouseHelper } from './ui/MouseHelper';\r\nimport { DEFAULT_BELL_SOUND, SoundManager } from './SoundManager';\r\nimport { DEFAULT_ANSI_COLORS } from './renderer/ColorManager';\r\nimport { MouseZoneManager } from './ui/MouseZoneManager';\r\nimport { AccessibilityManager } from './AccessibilityManager';\r\nimport { ScreenDprMonitor } from './ui/ScreenDprMonitor';\r\nimport { ITheme, IMarker, IDisposable } from 'xterm';\r\nimport { removeTerminalFromCache } from './renderer/atlas/CharAtlasCache';\r\nimport { DomRenderer } from './renderer/dom/DomRenderer';\r\nimport { IKeyboardEvent } from './common/Types';\r\nimport { evaluateKeyboardEvent } from './core/input/Keyboard';\r\nimport { KeyboardResultType, ICharset } from './core/Types';\r\nimport { clone } from './common/Clone';\r\n\r\n// Let it work inside Node.js for automated testing purposes.\r\nconst document = (typeof window !== 'undefined') ? window.document : null;\r\n\r\n/**\r\n * The amount of write requests to queue before sending an XOFF signal to the\r\n * pty process. This number must be small in order for ^C and similar sequences\r\n * to be responsive.\r\n */\r\nconst WRITE_BUFFER_PAUSE_THRESHOLD = 5;\r\n\r\n/**\r\n * The number of writes to perform in a single batch before allowing the\r\n * renderer to catch up with a 0ms setTimeout.\r\n */\r\nconst WRITE_BATCH_SIZE = 300;\r\n\r\nconst MINIMUM_COLS = 2; // Less than 2 can mess with wide chars\r\nconst MINIMUM_ROWS = 1;\r\n\r\n/**\r\n * The set of options that only have an effect when set in the Terminal constructor.\r\n */\r\nconst CONSTRUCTOR_ONLY_OPTIONS = ['cols', 'rows'];\r\n\r\nconst DEFAULT_OPTIONS: ITerminalOptions = {\r\n  cols: 80,\r\n  rows: 24,\r\n  convertEol: false,\r\n  termName: 'xterm',\r\n  cursorBlink: false,\r\n  cursorStyle: 'block',\r\n  bellSound: DEFAULT_BELL_SOUND,\r\n  bellStyle: 'none',\r\n  drawBoldTextInBrightColors: true,\r\n  enableBold: true,\r\n  experimentalCharAtlas: 'static',\r\n  fontFamily: 'courier-new, courier, monospace',\r\n  fontSize: 15,\r\n  fontWeight: 'normal',\r\n  fontWeightBold: 'bold',\r\n  lineHeight: 1.0,\r\n  letterSpacing: 0,\r\n  scrollback: 1000,\r\n  screenKeys: false,\r\n  screenReaderMode: false,\r\n  debug: false,\r\n  macOptionIsMeta: false,\r\n  macOptionClickForcesSelection: false,\r\n  cancelEvents: false,\r\n  disableStdin: false,\r\n  useFlowControl: false,\r\n  allowTransparency: false,\r\n  tabStopWidth: 8,\r\n  theme: null,\r\n  rightClickSelectsWord: Browser.isMac,\r\n  rendererType: 'canvas'\r\n};\r\n\r\nexport class Terminal extends EventEmitter implements ITerminal, IDisposable, IInputHandlingTerminal {\r\n  public textarea: HTMLTextAreaElement;\r\n  public element: HTMLElement;\r\n  public screenElement: HTMLElement;\r\n\r\n  /**\r\n   * The HTMLElement that the terminal is created in, set by Terminal.open.\r\n   */\r\n  private _parent: HTMLElement;\r\n  private _context: Window;\r\n  private _document: Document;\r\n  private _viewportScrollArea: HTMLElement;\r\n  private _viewportElement: HTMLElement;\r\n  private _helperContainer: HTMLElement;\r\n  private _compositionView: HTMLElement;\r\n\r\n  private _visualBellTimer: number;\r\n\r\n  public browser: IBrowser = <any>Browser;\r\n\r\n  public options: ITerminalOptions;\r\n\r\n  // TODO: This can be changed to an enum or boolean, 0 and 1 seem to be the only options\r\n  public cursorState: number;\r\n  public cursorHidden: boolean;\r\n\r\n  private _customKeyEventHandler: CustomKeyEventHandler;\r\n\r\n  // modes\r\n  public applicationKeypad: boolean;\r\n  public applicationCursor: boolean;\r\n  public originMode: boolean;\r\n  public insertMode: boolean;\r\n  public wraparoundMode: boolean; // defaults: xterm - true, vt100 - false\r\n  public bracketedPasteMode: boolean;\r\n\r\n  // charset\r\n  // The current charset\r\n  public charset: ICharset;\r\n  public gcharset: number;\r\n  public glevel: number;\r\n  public charsets: ICharset[];\r\n\r\n  // mouse properties\r\n  private _decLocator: boolean; // This is unstable and never set\r\n  public x10Mouse: boolean;\r\n  public vt200Mouse: boolean;\r\n  private _vt300Mouse: boolean; // This is unstable and never set\r\n  public normalMouse: boolean;\r\n  public mouseEvents: boolean;\r\n  public sendFocus: boolean;\r\n  public utfMouse: boolean;\r\n  public sgrMouse: boolean;\r\n  public urxvtMouse: boolean;\r\n\r\n  // misc\r\n  private _refreshStart: number;\r\n  private _refreshEnd: number;\r\n  public savedCols: number;\r\n\r\n  public curAttr: number;\r\n\r\n  public params: (string | number)[];\r\n  public currentParam: string | number;\r\n\r\n  // user input states\r\n  public writeBuffer: string[];\r\n  private _writeInProgress: boolean;\r\n\r\n  /**\r\n   * Whether _xterm.js_ sent XOFF in order to catch up with the pty process.\r\n   * This is a distinct state from writeStopped so that if the user requested\r\n   * XOFF via ^S that it will not automatically resume when the writeBuffer goes\r\n   * below threshold.\r\n   */\r\n  private _xoffSentToCatchUp: boolean;\r\n\r\n  /** Whether writing has been stopped as a result of XOFF */\r\n  // private _writeStopped: boolean;\r\n\r\n  // Store if user went browsing history in scrollback\r\n  private _userScrolling: boolean;\r\n\r\n  private _inputHandler: InputHandler;\r\n  public soundManager: SoundManager;\r\n  public renderer: IRenderer;\r\n  public selectionManager: SelectionManager;\r\n  public linkifier: ILinkifier;\r\n  public buffers: BufferSet;\r\n  public viewport: IViewport;\r\n  private _compositionHelper: ICompositionHelper;\r\n  public charMeasure: CharMeasure;\r\n  private _mouseZoneManager: IMouseZoneManager;\r\n  public mouseHelper: MouseHelper;\r\n  private _accessibilityManager: AccessibilityManager;\r\n  private _screenDprMonitor: ScreenDprMonitor;\r\n  private _theme: ITheme;\r\n\r\n  // bufferline to clone/copy from for new blank lines\r\n  private _blankLine: IBufferLine = null;\r\n\r\n  public cols: number;\r\n  public rows: number;\r\n\r\n  /**\r\n   * Creates a new `Terminal` object.\r\n   *\r\n   * @param options An object containing a set of options, the available options are:\r\n   *   - `cursorBlink` (boolean): Whether the terminal cursor blinks\r\n   *   - `cols` (number): The number of columns of the terminal (horizontal size)\r\n   *   - `rows` (number): The number of rows of the terminal (vertical size)\r\n   *\r\n   * @public\r\n   * @class Xterm Xterm\r\n   * @alias module:xterm/src/xterm\r\n   */\r\n  constructor(\r\n    options: ITerminalOptions = {}\r\n  ) {\r\n    super();\r\n    this.options = clone(options);\r\n    this._setup();\r\n  }\r\n\r\n  public dispose(): void {\r\n    super.dispose();\r\n    this._customKeyEventHandler = null;\r\n    removeTerminalFromCache(this);\r\n    this.handler = () => {};\r\n    this.write = () => {};\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.parentNode.removeChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @deprecated Use dispose instead.\r\n   */\r\n  public destroy(): void {\r\n    this.dispose();\r\n  }\r\n\r\n  private _setup(): void {\r\n    Object.keys(DEFAULT_OPTIONS).forEach((key) => {\r\n      if (this.options[key] === null || this.options[key] === undefined) {\r\n        this.options[key] = DEFAULT_OPTIONS[key];\r\n      }\r\n    });\r\n\r\n    // this.context = options.context || window;\r\n    // this.document = options.document || document;\r\n    // TODO: WHy not document.body?\r\n    this._parent = document ? document.body : null;\r\n\r\n    this.cols = Math.max(this.options.cols, MINIMUM_COLS);\r\n    this.rows = Math.max(this.options.rows, MINIMUM_ROWS);\r\n\r\n    if (this.options.handler) {\r\n      this.on('data', this.options.handler);\r\n    }\r\n\r\n    this.cursorState = 0;\r\n    this.cursorHidden = false;\r\n    this._customKeyEventHandler = null;\r\n\r\n    // modes\r\n    this.applicationKeypad = false;\r\n    this.applicationCursor = false;\r\n    this.originMode = false;\r\n    this.insertMode = false;\r\n    this.wraparoundMode = true; // defaults: xterm - true, vt100 - false\r\n    this.bracketedPasteMode = false;\r\n\r\n    // charset\r\n    this.charset = null;\r\n    this.gcharset = null;\r\n    this.glevel = 0;\r\n    // TODO: Can this be just []?\r\n    this.charsets = [null];\r\n\r\n    this.curAttr = DEFAULT_ATTR;\r\n\r\n    this.params = [];\r\n    this.currentParam = 0;\r\n\r\n    // user input states\r\n    this.writeBuffer = [];\r\n    this._writeInProgress = false;\r\n\r\n    this._xoffSentToCatchUp = false;\r\n    // this._writeStopped = false;\r\n    this._userScrolling = false;\r\n\r\n    this._inputHandler = new InputHandler(this);\r\n    this.register(this._inputHandler);\r\n    // Reuse renderer if the Terminal is being recreated via a reset call.\r\n    this.renderer = this.renderer || null;\r\n    this.selectionManager = this.selectionManager || null;\r\n    this.linkifier = this.linkifier || new Linkifier(this);\r\n    this._mouseZoneManager = this._mouseZoneManager || null;\r\n    this.soundManager = this.soundManager || new SoundManager(this);\r\n\r\n    // Create the terminal's buffers and set the current buffer\r\n    this.buffers = new BufferSet(this);\r\n    if (this.selectionManager) {\r\n      this.selectionManager.clearSelection();\r\n      this.selectionManager.initBuffersListeners();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convenience property to active buffer.\r\n   */\r\n  public get buffer(): Buffer {\r\n    return this.buffers.active;\r\n  }\r\n\r\n  /**\r\n   * back_color_erase feature for xterm.\r\n   */\r\n  public eraseAttr(): number {\r\n    // if (this.is('screen')) return DEFAULT_ATTR;\r\n    return (DEFAULT_ATTR & ~0x1ff) | (this.curAttr & 0x1ff);\r\n  }\r\n\r\n  /**\r\n   * Focus the terminal. Delegates focus handling to the terminal's DOM element.\r\n   */\r\n  public focus(): void {\r\n    if (this.textarea) {\r\n      this.textarea.focus();\r\n    }\r\n  }\r\n\r\n  public get isFocused(): boolean {\r\n    return document.activeElement === this.textarea && document.hasFocus();\r\n  }\r\n\r\n  /**\r\n   * Retrieves an option's value from the terminal.\r\n   * @param key The option key.\r\n   */\r\n  public getOption(key: string): any {\r\n    if (!(key in DEFAULT_OPTIONS)) {\r\n      throw new Error('No option with key \"' + key + '\"');\r\n    }\r\n\r\n    return this.options[key];\r\n  }\r\n\r\n  /**\r\n   * Sets an option on the terminal.\r\n   * @param key The option key.\r\n   * @param value The option value.\r\n   */\r\n  public setOption(key: string, value: any): void {\r\n    if (!(key in DEFAULT_OPTIONS)) {\r\n      throw new Error('No option with key \"' + key + '\"');\r\n    }\r\n    if (CONSTRUCTOR_ONLY_OPTIONS.indexOf(key) !== -1) {\r\n      console.error(`Option \"${key}\" can only be set in the constructor`);\r\n    }\r\n    if (this.options[key] === value) {\r\n      return;\r\n    }\r\n    switch (key) {\r\n      case 'bellStyle':\r\n        if (!value) {\r\n          value = 'none';\r\n        }\r\n        break;\r\n      case 'cursorStyle':\r\n        if (!value) {\r\n          value = 'block';\r\n        }\r\n        break;\r\n      case 'fontWeight':\r\n        if (!value) {\r\n          value = 'normal';\r\n        }\r\n        break;\r\n      case 'fontWeightBold':\r\n        if (!value) {\r\n          value = 'bold';\r\n        }\r\n        break;\r\n      case 'lineHeight':\r\n        if (value < 1) {\r\n          console.warn(`${key} cannot be less than 1, value: ${value}`);\r\n          return;\r\n        }\r\n      case 'rendererType':\r\n        if (!value) {\r\n          value = 'canvas';\r\n        }\r\n        break;\r\n      case 'tabStopWidth':\r\n        if (value < 1) {\r\n          console.warn(`${key} cannot be less than 1, value: ${value}`);\r\n          return;\r\n        }\r\n        break;\r\n      case 'theme':\r\n        // If open has been called we do not want to set options.theme as the\r\n        // source of truth is owned by the renderer.\r\n        if (this.renderer) {\r\n          this._setTheme(<ITheme>value);\r\n          return;\r\n        }\r\n        break;\r\n      case 'scrollback':\r\n        value = Math.min(value, MAX_BUFFER_SIZE);\r\n\r\n        if (value < 0) {\r\n          console.warn(`${key} cannot be less than 0, value: ${value}`);\r\n          return;\r\n        }\r\n        if (this.options[key] !== value) {\r\n          const newBufferLength = this.rows + value;\r\n          if (this.buffer.lines.length > newBufferLength) {\r\n            const amountToTrim = this.buffer.lines.length - newBufferLength;\r\n            const needsRefresh = (this.buffer.ydisp - amountToTrim < 0);\r\n            this.buffer.lines.trimStart(amountToTrim);\r\n            this.buffer.ybase = Math.max(this.buffer.ybase - amountToTrim, 0);\r\n            this.buffer.ydisp = Math.max(this.buffer.ydisp - amountToTrim, 0);\r\n            if (needsRefresh) {\r\n              this.refresh(0, this.rows - 1);\r\n            }\r\n          }\r\n        }\r\n        break;\r\n    }\r\n    this.options[key] = value;\r\n    switch (key) {\r\n      case 'fontFamily':\r\n      case 'fontSize':\r\n        // When the font changes the size of the cells may change which requires a renderer clear\r\n        if (this.renderer) {\r\n          this.renderer.clear();\r\n          this.charMeasure.measure(this.options);\r\n        }\r\n        break;\r\n      case 'drawBoldTextInBrightColors':\r\n      case 'experimentalCharAtlas':\r\n      case 'enableBold':\r\n      case 'letterSpacing':\r\n      case 'lineHeight':\r\n      case 'fontWeight':\r\n      case 'fontWeightBold':\r\n        // When the font changes the size of the cells may change which requires a renderer clear\r\n        if (this.renderer) {\r\n          this.renderer.clear();\r\n          this.renderer.onResize(this.cols, this.rows);\r\n          this.refresh(0, this.rows - 1);\r\n        }\r\n        break;\r\n      case 'rendererType':\r\n        if (this.renderer) {\r\n          this.unregister(this.renderer);\r\n          this.renderer.dispose();\r\n          this.renderer = null;\r\n        }\r\n        this._setupRenderer();\r\n        this.renderer.onCharSizeChanged();\r\n        if (this._theme) {\r\n          this.renderer.setTheme(this._theme);\r\n        }\r\n        this.mouseHelper.setRenderer(this.renderer);\r\n        break;\r\n      case 'scrollback':\r\n        this.buffers.resize(this.cols, this.rows);\r\n        if (this.viewport) {\r\n          this.viewport.syncScrollArea();\r\n        }\r\n        break;\r\n      case 'screenReaderMode':\r\n        if (value) {\r\n          if (!this._accessibilityManager) {\r\n            this._accessibilityManager = new AccessibilityManager(this);\r\n          }\r\n        } else {\r\n          if (this._accessibilityManager) {\r\n            this._accessibilityManager.dispose();\r\n            this._accessibilityManager = null;\r\n          }\r\n        }\r\n        break;\r\n      case 'tabStopWidth': this.buffers.setupTabStops(); break;\r\n    }\r\n    // Inform renderer of changes\r\n    if (this.renderer) {\r\n      this.renderer.onOptionsChanged();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Binds the desired focus behavior on a given terminal object.\r\n   */\r\n  private _onTextAreaFocus(ev: KeyboardEvent): void {\r\n    if (this.sendFocus) {\r\n      this.handler(C0.ESC + '[I');\r\n    }\r\n    this.updateCursorStyle(ev);\r\n    this.element.classList.add('focus');\r\n    this.showCursor();\r\n    this.emit('focus');\r\n  }\r\n\r\n  /**\r\n   * Blur the terminal, calling the blur function on the terminal's underlying\r\n   * textarea.\r\n   */\r\n  public blur(): void {\r\n    return this.textarea.blur();\r\n  }\r\n\r\n  /**\r\n   * Binds the desired blur behavior on a given terminal object.\r\n   */\r\n  private _onTextAreaBlur(): void {\r\n    // Text can safely be removed on blur. Doing it earlier could interfere with\r\n    // screen readers reading it out.\r\n    this.textarea.value = '';\r\n    this.refresh(this.buffer.y, this.buffer.y);\r\n    if (this.sendFocus) {\r\n      this.handler(C0.ESC + '[O');\r\n    }\r\n    this.element.classList.remove('focus');\r\n    this.emit('blur');\r\n  }\r\n\r\n  /**\r\n   * Initialize default behavior\r\n   */\r\n  private _initGlobal(): void {\r\n    this._bindKeys();\r\n\r\n    // Bind clipboard functionality\r\n    this.register(addDisposableDomListener(this.element, 'copy', (event: ClipboardEvent) => {\r\n      // If mouse events are active it means the selection manager is disabled and\r\n      // copy should be handled by the host program.\r\n      if (!this.hasSelection()) {\r\n        return;\r\n      }\r\n      copyHandler(event, this, this.selectionManager);\r\n    }));\r\n    const pasteHandlerWrapper = (event: ClipboardEvent) => pasteHandler(event, this);\r\n    this.register(addDisposableDomListener(this.textarea, 'paste', pasteHandlerWrapper));\r\n    this.register(addDisposableDomListener(this.element, 'paste', pasteHandlerWrapper));\r\n\r\n    // Handle right click context menus\r\n    if (Browser.isFirefox) {\r\n      // Firefox doesn't appear to fire the contextmenu event on right click\r\n      this.register(addDisposableDomListener(this.element, 'mousedown', (event: MouseEvent) => {\r\n        if (event.button === 2) {\r\n          rightClickHandler(event, this.textarea, this.selectionManager, this.options.rightClickSelectsWord);\r\n        }\r\n      }));\r\n    } else {\r\n      this.register(addDisposableDomListener(this.element, 'contextmenu', (event: MouseEvent) => {\r\n        rightClickHandler(event, this.textarea, this.selectionManager, this.options.rightClickSelectsWord);\r\n      }));\r\n    }\r\n\r\n    // Move the textarea under the cursor when middle clicking on Linux to ensure\r\n    // middle click to paste selection works. This only appears to work in Chrome\r\n    // at the time is writing.\r\n    if (Browser.isLinux) {\r\n      // Use auxclick event over mousedown the latter doesn't seem to work. Note\r\n      // that the regular click event doesn't fire for the middle mouse button.\r\n      this.register(addDisposableDomListener(this.element, 'auxclick', (event: MouseEvent) => {\r\n        if (event.button === 1) {\r\n          moveTextAreaUnderMouseCursor(event, this.textarea);\r\n        }\r\n      }));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply key handling to the terminal\r\n   */\r\n  private _bindKeys(): void {\r\n    const self = this;\r\n    this.register(addDisposableDomListener(this.element, 'keydown', function (ev: KeyboardEvent): void {\r\n      if (document.activeElement !== this) {\r\n        return;\r\n      }\r\n      self._keyDown(ev);\r\n    }, true));\r\n\r\n    this.register(addDisposableDomListener(this.element, 'keypress', function (ev: KeyboardEvent): void {\r\n      if (document.activeElement !== this) {\r\n        return;\r\n      }\r\n      self._keyPress(ev);\r\n    }, true));\r\n\r\n    this.register(addDisposableDomListener(this.element, 'keyup', (ev: KeyboardEvent) => {\r\n      if (!wasModifierKeyOnlyEvent(ev)) {\r\n        this.focus();\r\n      }\r\n\r\n      self._keyUp(ev);\r\n    }, true));\r\n\r\n    this.register(addDisposableDomListener(this.textarea, 'keydown', (ev: KeyboardEvent) => this._keyDown(ev), true));\r\n    this.register(addDisposableDomListener(this.textarea, 'keypress', (ev: KeyboardEvent) => this._keyPress(ev), true));\r\n    this.register(addDisposableDomListener(this.textarea, 'compositionstart', () => this._compositionHelper.compositionstart()));\r\n    this.register(addDisposableDomListener(this.textarea, 'compositionupdate', (e: CompositionEvent) => this._compositionHelper.compositionupdate(e)));\r\n    this.register(addDisposableDomListener(this.textarea, 'compositionend', () => this._compositionHelper.compositionend()));\r\n    this.register(this.addDisposableListener('refresh', () => this._compositionHelper.updateCompositionElements()));\r\n    this.register(this.addDisposableListener('refresh', (data) => this._queueLinkification(data.start, data.end)));\r\n  }\r\n\r\n  /**\r\n   * Opens the terminal within an element.\r\n   *\r\n   * @param parent The element to create the terminal within.\r\n   */\r\n  public open(parent: HTMLElement): void {\r\n    this._parent = parent || this._parent;\r\n\r\n    if (!this._parent) {\r\n      throw new Error('Terminal requires a parent element.');\r\n    }\r\n\r\n    // Grab global elements\r\n    this._context = this._parent.ownerDocument.defaultView;\r\n    this._document = this._parent.ownerDocument;\r\n\r\n    this._screenDprMonitor = new ScreenDprMonitor();\r\n    this._screenDprMonitor.setListener(() => this.emit('dprchange', window.devicePixelRatio));\r\n    this.register(this._screenDprMonitor);\r\n\r\n    // Create main element container\r\n    this.element = this._document.createElement('div');\r\n    this.element.dir = 'ltr';   // xterm.css assumes LTR\r\n    this.element.classList.add('terminal');\r\n    this.element.classList.add('xterm');\r\n    this.element.setAttribute('tabindex', '0');\r\n    this._parent.appendChild(this.element);\r\n\r\n    // Performance: Use a document fragment to build the terminal\r\n    // viewport and helper elements detached from the DOM\r\n    const fragment = document.createDocumentFragment();\r\n    this._viewportElement = document.createElement('div');\r\n    this._viewportElement.classList.add('xterm-viewport');\r\n    fragment.appendChild(this._viewportElement);\r\n    this._viewportScrollArea = document.createElement('div');\r\n    this._viewportScrollArea.classList.add('xterm-scroll-area');\r\n    this._viewportElement.appendChild(this._viewportScrollArea);\r\n\r\n    this.screenElement = document.createElement('div');\r\n    this.screenElement.classList.add('xterm-screen');\r\n    // Create the container that will hold helpers like the textarea for\r\n    // capturing DOM Events. Then produce the helpers.\r\n    this._helperContainer = document.createElement('div');\r\n    this._helperContainer.classList.add('xterm-helpers');\r\n    this.screenElement.appendChild(this._helperContainer);\r\n    fragment.appendChild(this.screenElement);\r\n\r\n    this._mouseZoneManager = new MouseZoneManager(this);\r\n    this.register(this._mouseZoneManager);\r\n    this.register(this.addDisposableListener('scroll', () => this._mouseZoneManager.clearAll()));\r\n    this.linkifier.attachToDom(this._mouseZoneManager);\r\n\r\n    this.textarea = document.createElement('textarea');\r\n    this.textarea.classList.add('xterm-helper-textarea');\r\n    // TODO: New API to set title? This could say \"Terminal bash input\", etc.\r\n    this.textarea.setAttribute('aria-label', Strings.promptLabel);\r\n    this.textarea.setAttribute('aria-multiline', 'false');\r\n    this.textarea.setAttribute('autocorrect', 'off');\r\n    this.textarea.setAttribute('autocapitalize', 'off');\r\n    this.textarea.setAttribute('spellcheck', 'false');\r\n    this.textarea.tabIndex = 0;\r\n    this.register(addDisposableDomListener(this.textarea, 'focus', (ev: KeyboardEvent) => this._onTextAreaFocus(ev)));\r\n    this.register(addDisposableDomListener(this.textarea, 'blur', () => this._onTextAreaBlur()));\r\n    this._helperContainer.appendChild(this.textarea);\r\n\r\n    this._compositionView = document.createElement('div');\r\n    this._compositionView.classList.add('composition-view');\r\n    this._compositionHelper = new CompositionHelper(this.textarea, this._compositionView, this);\r\n    this._helperContainer.appendChild(this._compositionView);\r\n\r\n    this.charMeasure = new CharMeasure(document, this._helperContainer);\r\n\r\n    // Performance: Add viewport and helper elements from the fragment\r\n    this.element.appendChild(fragment);\r\n\r\n    this._setupRenderer();\r\n    this._theme = this.options.theme;\r\n    this.options.theme = null;\r\n    this.viewport = new Viewport(this, this._viewportElement, this._viewportScrollArea, this.charMeasure);\r\n    this.viewport.onThemeChanged(this.renderer.colorManager.colors);\r\n    this.register(this.viewport);\r\n\r\n    this.register(this.addDisposableListener('cursormove', () => this.renderer.onCursorMove()));\r\n    this.register(this.addDisposableListener('resize', () => this.renderer.onResize(this.cols, this.rows)));\r\n    this.register(this.addDisposableListener('blur', () => this.renderer.onBlur()));\r\n    this.register(this.addDisposableListener('focus', () => this.renderer.onFocus()));\r\n    this.register(this.addDisposableListener('dprchange', () => this.renderer.onWindowResize(window.devicePixelRatio)));\r\n    // dprchange should handle this case, we need this as well for browsers that don't support the\r\n    // matchMedia query.\r\n    this.register(addDisposableDomListener(window, 'resize', () => this.renderer.onWindowResize(window.devicePixelRatio)));\r\n    this.register(this.charMeasure.addDisposableListener('charsizechanged', () => this.renderer.onCharSizeChanged()));\r\n    this.register(this.renderer.addDisposableListener('resize', (dimensions) => this.viewport.syncScrollArea()));\r\n\r\n    this.selectionManager = new SelectionManager(this, this.charMeasure);\r\n    this.register(addDisposableDomListener(this.element, 'mousedown', (e: MouseEvent) => this.selectionManager.onMouseDown(e)));\r\n    this.register(this.selectionManager.addDisposableListener('refresh', data => this.renderer.onSelectionChanged(data.start, data.end, data.columnSelectMode)));\r\n    this.register(this.selectionManager.addDisposableListener('newselection', text => {\r\n      // If there's a new selection, put it into the textarea, focus and select it\r\n      // in order to register it as a selection on the OS. This event is fired\r\n      // only on Linux to enable middle click to paste selection.\r\n      this.textarea.value = text;\r\n      this.textarea.focus();\r\n      this.textarea.select();\r\n    }));\r\n    this.register(this.addDisposableListener('scroll', () => {\r\n      this.viewport.syncScrollArea();\r\n      this.selectionManager.refresh();\r\n    }));\r\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', () => this.selectionManager.refresh()));\r\n\r\n    this.mouseHelper = new MouseHelper(this.renderer);\r\n    // apply mouse event classes set by escape codes before terminal was attached\r\n    this.element.classList.toggle('enable-mouse-events', this.mouseEvents);\r\n\r\n    if (this.options.screenReaderMode) {\r\n      // Note that this must be done *after* the renderer is created in order to\r\n      // ensure the correct order of the dprchange event\r\n      this._accessibilityManager = new AccessibilityManager(this);\r\n    }\r\n\r\n    // Measure the character size\r\n    this.charMeasure.measure(this.options);\r\n\r\n    // Setup loop that draws to screen\r\n    this.refresh(0, this.rows - 1);\r\n\r\n    // Initialize global actions that need to be taken on the document.\r\n    this._initGlobal();\r\n\r\n    // Listen for mouse events and translate\r\n    // them into terminal mouse protocols.\r\n    this.bindMouse();\r\n\r\n  }\r\n\r\n  private _setupRenderer(): void {\r\n    switch (this.options.rendererType) {\r\n      case 'canvas': this.renderer = new Renderer(this, this.options.theme); break;\r\n      case 'dom': this.renderer = new DomRenderer(this, this.options.theme); break;\r\n      default: throw new Error(`Unrecognized rendererType \"${this.options.rendererType}\"`);\r\n    }\r\n    this.register(this.renderer);\r\n  }\r\n\r\n  /**\r\n   * Sets the theme on the renderer. The renderer must have been initialized.\r\n   * @param theme The theme to set.\r\n   */\r\n  private _setTheme(theme: ITheme): void {\r\n    this._theme = theme;\r\n    const colors = this.renderer.setTheme(theme);\r\n    if (this.viewport) {\r\n      this.viewport.onThemeChanged(colors);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * XTerm mouse events\r\n   * http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#Mouse%20Tracking\r\n   * To better understand these\r\n   * the xterm code is very helpful:\r\n   * Relevant files:\r\n   *   button.c, charproc.c, misc.c\r\n   * Relevant functions in xterm/button.c:\r\n   *   BtnCode, EmitButtonCode, EditorButton, SendMousePosition\r\n   */\r\n  public bindMouse(): void {\r\n    const el = this.element;\r\n    const self = this;\r\n    let pressed = 32;\r\n\r\n    // mouseup, mousedown, wheel\r\n    // left click: ^[[M 3<^[[M#3<\r\n    // wheel up: ^[[M`3>\r\n    function sendButton(ev: MouseEvent | WheelEvent): void {\r\n      let button;\r\n      let pos;\r\n\r\n      // get the xterm-style button\r\n      button = getButton(ev);\r\n\r\n      // get mouse coordinates\r\n      pos = self.mouseHelper.getRawByteCoords(ev, self.screenElement, self.charMeasure, self.cols, self.rows);\r\n      if (!pos) return;\r\n\r\n      sendEvent(button, pos);\r\n\r\n      switch ((<any>ev).overrideType || ev.type) {\r\n        case 'mousedown':\r\n          pressed = button;\r\n          break;\r\n        case 'mouseup':\r\n          // keep it at the left\r\n          // button, just in case.\r\n          pressed = 32;\r\n          break;\r\n        case 'wheel':\r\n          // nothing. don't\r\n          // interfere with\r\n          // `pressed`.\r\n          break;\r\n      }\r\n    }\r\n\r\n    // motion example of a left click:\r\n    // ^[[M 3<^[[M@4<^[[M@5<^[[M@6<^[[M@7<^[[M#7<\r\n    function sendMove(ev: MouseEvent): void {\r\n      let button = pressed;\r\n      const pos = self.mouseHelper.getRawByteCoords(ev, self.screenElement, self.charMeasure, self.cols, self.rows);\r\n      if (!pos) return;\r\n\r\n      // buttons marked as motions\r\n      // are incremented by 32\r\n      button += 32;\r\n\r\n      sendEvent(button, pos);\r\n    }\r\n\r\n    // encode button and\r\n    // position to characters\r\n    function encode(data: number[], ch: number): void {\r\n      if (!self.utfMouse) {\r\n        if (ch === 255) {\r\n          data.push(0);\r\n          return;\r\n        }\r\n        if (ch > 127) ch = 127;\r\n        data.push(ch);\r\n      } else {\r\n        if (ch === 2047) {\r\n          data.push(0);\r\n          return;\r\n        }\r\n        if (ch < 127) {\r\n          data.push(ch);\r\n        } else {\r\n          if (ch > 2047) ch = 2047;\r\n          data.push(0xC0 | (ch >> 6));\r\n          data.push(0x80 | (ch & 0x3F));\r\n        }\r\n      }\r\n    }\r\n\r\n    // send a mouse event:\r\n    // regular/utf8: ^[[M Cb Cx Cy\r\n    // urxvt: ^[[ Cb ; Cx ; Cy M\r\n    // sgr: ^[[ Cb ; Cx ; Cy M/m\r\n    // vt300: ^[[ 24(1/3/5)~ [ Cx , Cy ] \\r\r\n    // locator: CSI P e ; P b ; P r ; P c ; P p & w\r\n    function sendEvent(button: number, pos: {x: number, y: number}): void {\r\n      // self.emit('mouse', {\r\n      //   x: pos.x - 32,\r\n      //   y: pos.x - 32,\r\n      //   button: button\r\n      // });\r\n\r\n      if (self._vt300Mouse) {\r\n        // NOTE: Unstable.\r\n        // http://www.vt100.net/docs/vt3xx-gp/chapter15.html\r\n        button &= 3;\r\n        pos.x -= 32;\r\n        pos.y -= 32;\r\n        let data = C0.ESC + '[24';\r\n        if (button === 0) data += '1';\r\n        else if (button === 1) data += '3';\r\n        else if (button === 2) data += '5';\r\n        else if (button === 3) return;\r\n        else data += '0';\r\n        data += '~[' + pos.x + ',' + pos.y + ']\\r';\r\n        self.handler(data);\r\n        return;\r\n      }\r\n\r\n      if (self._decLocator) {\r\n        // NOTE: Unstable.\r\n        button &= 3;\r\n        pos.x -= 32;\r\n        pos.y -= 32;\r\n        if (button === 0) button = 2;\r\n        else if (button === 1) button = 4;\r\n        else if (button === 2) button = 6;\r\n        else if (button === 3) button = 3;\r\n        self.handler(C0.ESC + '['\r\n                  + button\r\n                  + ';'\r\n                  + (button === 3 ? 4 : 0)\r\n                  + ';'\r\n                  + pos.y\r\n                  + ';'\r\n                  + pos.x\r\n                  + ';'\r\n                  // Not sure what page is meant to be\r\n                  + (<any>pos).page || 0\r\n                  + '&w');\r\n        return;\r\n      }\r\n\r\n      if (self.urxvtMouse) {\r\n        pos.x -= 32;\r\n        pos.y -= 32;\r\n        pos.x++;\r\n        pos.y++;\r\n        self.handler(C0.ESC + '[' + button + ';' + pos.x + ';' + pos.y + 'M');\r\n        return;\r\n      }\r\n\r\n      if (self.sgrMouse) {\r\n        pos.x -= 32;\r\n        pos.y -= 32;\r\n        self.handler(C0.ESC + '[<'\r\n                  + (((button & 3) === 3 ? button & ~3 : button) - 32)\r\n                  + ';'\r\n                  + pos.x\r\n                  + ';'\r\n                  + pos.y\r\n                  + ((button & 3) === 3 ? 'm' : 'M'));\r\n        return;\r\n      }\r\n\r\n      const data: number[] = [];\r\n\r\n      encode(data, button);\r\n      encode(data, pos.x);\r\n      encode(data, pos.y);\r\n\r\n      self.handler(C0.ESC + '[M' + String.fromCharCode.apply(String, data));\r\n    }\r\n\r\n    function getButton(ev: MouseEvent): number {\r\n      let button;\r\n      let shift;\r\n      let meta;\r\n      let ctrl;\r\n      let mod;\r\n\r\n      // two low bits:\r\n      // 0 = left\r\n      // 1 = middle\r\n      // 2 = right\r\n      // 3 = release\r\n      // wheel up/down:\r\n      // 1, and 2 - with 64 added\r\n      switch ((<any>ev).overrideType || ev.type) {\r\n        case 'mousedown':\r\n          button = ev.button !== null && ev.button !== undefined\r\n            ? +ev.button\r\n          : ev.which !== null && ev.which !== undefined\r\n            ? ev.which - 1\r\n          : null;\r\n\r\n          if (Browser.isMSIE) {\r\n            button = button === 1 ? 0 : button === 4 ? 1 : button;\r\n          }\r\n          break;\r\n        case 'mouseup':\r\n          button = 3;\r\n          break;\r\n        case 'DOMMouseScroll':\r\n          button = ev.detail < 0\r\n            ? 64\r\n          : 65;\r\n          break;\r\n        case 'wheel':\r\n          button = (<WheelEvent>ev).deltaY < 0\r\n            ? 64\r\n          : 65;\r\n          break;\r\n      }\r\n\r\n      // next three bits are the modifiers:\r\n      // 4 = shift, 8 = meta, 16 = control\r\n      shift = ev.shiftKey ? 4 : 0;\r\n      meta = ev.metaKey ? 8 : 0;\r\n      ctrl = ev.ctrlKey ? 16 : 0;\r\n      mod = shift | meta | ctrl;\r\n\r\n      // no mods\r\n      if (self.vt200Mouse) {\r\n        // ctrl only\r\n        mod &= ctrl;\r\n      } else if (!self.normalMouse) {\r\n        mod = 0;\r\n      }\r\n\r\n      // increment to SP\r\n      button = (32 + (mod << 2)) + button;\r\n\r\n      return button;\r\n    }\r\n\r\n    this.register(addDisposableDomListener(el, 'mousedown', (ev: MouseEvent) => {\r\n\r\n      // Prevent the focus on the textarea from getting lost\r\n      // and make sure we get focused on mousedown\r\n      ev.preventDefault();\r\n      this.focus();\r\n\r\n      // Don't send the mouse button to the pty if mouse events are disabled or\r\n      // if the selection manager is having selection forced (ie. a modifier is\r\n      // held).\r\n      if (!this.mouseEvents || this.selectionManager.shouldForceSelection(ev)) {\r\n        return;\r\n      }\r\n\r\n      // send the button\r\n      sendButton(ev);\r\n\r\n      // fix for odd bug\r\n      // if (this.vt200Mouse && !this.normalMouse) {\r\n      if (this.vt200Mouse) {\r\n        (<any>ev).overrideType = 'mouseup';\r\n        sendButton(ev);\r\n        return this.cancel(ev);\r\n      }\r\n\r\n      // TODO: All mouse handling should be pulled into its own file.\r\n\r\n      // bind events\r\n      let moveHandler: (event: MouseEvent) => void;\r\n      if (this.normalMouse) {\r\n        moveHandler = (event: MouseEvent) => {\r\n          // Do nothing if normal mouse mode is on. This can happen if the mouse is held down when the\r\n          // terminal exits normalMouse mode.\r\n          if (!this.normalMouse) {\r\n            return;\r\n          }\r\n          sendMove(event);\r\n        };\r\n        // TODO: these event listeners should be managed by the disposable, the Terminal reference may\r\n        // be kept aroud if Terminal.dispose is fired when the mouse is down\r\n        this._document.addEventListener('mousemove', moveHandler);\r\n      }\r\n\r\n      // x10 compatibility mode can't send button releases\r\n      const handler = (ev: MouseEvent) => {\r\n        if (this.normalMouse && !this.x10Mouse) {\r\n          sendButton(ev);\r\n        }\r\n        if (moveHandler) {\r\n          // Even though this should only be attached when this.normalMouse is true, holding the\r\n          // mouse button down when normalMouse changes can happen. Just always try to remove it.\r\n          this._document.removeEventListener('mousemove', moveHandler);\r\n          moveHandler = null;\r\n        }\r\n        this._document.removeEventListener('mouseup', handler);\r\n        return this.cancel(ev);\r\n      };\r\n      this._document.addEventListener('mouseup', handler);\r\n\r\n      return this.cancel(ev);\r\n    }));\r\n\r\n    // if (this.normalMouse) {\r\n    //  on(this.document, 'mousemove', sendMove);\r\n    // }\r\n\r\n    this.register(addDisposableDomListener(el, 'wheel', (ev: WheelEvent) => {\r\n      if (!this.mouseEvents) {\r\n        // Convert wheel events into up/down events when the buffer does not have scrollback, this\r\n        // enables scrolling in apps hosted in the alt buffer such as vim or tmux.\r\n        if (!this.buffer.hasScrollback) {\r\n          const amount = this.viewport.getLinesScrolled(ev);\r\n\r\n          // Do nothing if there's no vertical scroll\r\n          if (amount === 0) {\r\n            return;\r\n          }\r\n\r\n          // Construct and send sequences\r\n          const sequence = C0.ESC + (this.applicationCursor ? 'O' : '[') + ( ev.deltaY < 0 ? 'A' : 'B');\r\n          let data = '';\r\n          for (let i = 0; i < Math.abs(amount); i++) {\r\n            data += sequence;\r\n          }\r\n          this.handler(data);\r\n        }\r\n        return;\r\n      }\r\n      if (this.x10Mouse || this._vt300Mouse || this._decLocator) return;\r\n      sendButton(ev);\r\n      ev.preventDefault();\r\n    }));\r\n\r\n    // allow wheel scrolling in\r\n    // the shell for example\r\n    this.register(addDisposableDomListener(el, 'wheel', (ev: WheelEvent) => {\r\n      if (this.mouseEvents) return;\r\n      this.viewport.onWheel(ev);\r\n      return this.cancel(ev);\r\n    }));\r\n\r\n    this.register(addDisposableDomListener(el, 'touchstart', (ev: TouchEvent) => {\r\n      if (this.mouseEvents) return;\r\n      this.viewport.onTouchStart(ev);\r\n      return this.cancel(ev);\r\n    }));\r\n\r\n    this.register(addDisposableDomListener(el, 'touchmove', (ev: TouchEvent) => {\r\n      if (this.mouseEvents) return;\r\n      this.viewport.onTouchMove(ev);\r\n      return this.cancel(ev);\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Tells the renderer to refresh terminal content between two rows (inclusive) at the next\r\n   * opportunity.\r\n   * @param start The row to start from (between 0 and this.rows - 1).\r\n   * @param end The row to end at (between start and this.rows - 1).\r\n   */\r\n  public refresh(start: number, end: number): void {\r\n    if (this.renderer) {\r\n      this.renderer.refreshRows(start, end);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Queues linkification for the specified rows.\r\n   * @param start The row to start from (between 0 and this.rows - 1).\r\n   * @param end The row to end at (between start and this.rows - 1).\r\n   */\r\n  private _queueLinkification(start: number, end: number): void {\r\n    if (this.linkifier) {\r\n      this.linkifier.linkifyRows(start, end);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change the cursor style for different selection modes\r\n   */\r\n  public updateCursorStyle(ev: KeyboardEvent): void {\r\n    if (this.selectionManager && this.selectionManager.shouldColumnSelect(ev)) {\r\n      this.element.classList.add('column-select');\r\n    } else {\r\n      this.element.classList.remove('column-select');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display the cursor element\r\n   */\r\n  public showCursor(): void {\r\n    if (!this.cursorState) {\r\n      this.cursorState = 1;\r\n      this.refresh(this.buffer.y, this.buffer.y);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scroll the terminal down 1 row, creating a blank line.\r\n   * @param isWrapped Whether the new line is wrapped from the previous line.\r\n   */\r\n  public scroll(isWrapped: boolean = false): void {\r\n    let newLine: IBufferLine;\r\n    newLine = this._blankLine;\r\n    if (!newLine || newLine.length !== this.cols || newLine.get(0)[CHAR_DATA_ATTR_INDEX] !== this.eraseAttr()) {\r\n      newLine = this.buffer.getBlankLine(this.eraseAttr(), isWrapped);\r\n      this._blankLine = newLine;\r\n    }\r\n    newLine.isWrapped = isWrapped;\r\n\r\n    const topRow = this.buffer.ybase + this.buffer.scrollTop;\r\n    const bottomRow = this.buffer.ybase + this.buffer.scrollBottom;\r\n\r\n    if (this.buffer.scrollTop === 0) {\r\n      // Determine whether the buffer is going to be trimmed after insertion.\r\n      const willBufferBeTrimmed = this.buffer.lines.isFull;\r\n\r\n      // Insert the line using the fastest method\r\n      if (bottomRow === this.buffer.lines.length - 1) {\r\n        if (willBufferBeTrimmed) {\r\n          this.buffer.lines.recycle().copyFrom(newLine);\r\n        } else {\r\n          this.buffer.lines.push(newLine.clone());\r\n        }\r\n      } else {\r\n        this.buffer.lines.splice(bottomRow + 1, 0, newLine.clone());\r\n      }\r\n\r\n      // Only adjust ybase and ydisp when the buffer is not trimmed\r\n      if (!willBufferBeTrimmed) {\r\n        this.buffer.ybase++;\r\n        // Only scroll the ydisp with ybase if the user has not scrolled up\r\n        if (!this._userScrolling) {\r\n          this.buffer.ydisp++;\r\n        }\r\n      } else {\r\n        // When the buffer is full and the user has scrolled up, keep the text\r\n        // stable unless ydisp is right at the top\r\n        if (this._userScrolling) {\r\n          this.buffer.ydisp = Math.max(this.buffer.ydisp - 1, 0);\r\n        }\r\n      }\r\n    } else {\r\n      // scrollTop is non-zero which means no line will be going to the\r\n      // scrollback, instead we can just shift them in-place.\r\n      const scrollRegionHeight = bottomRow - topRow + 1/*as it's zero-based*/;\r\n      this.buffer.lines.shiftElements(topRow + 1, scrollRegionHeight - 1, -1);\r\n      this.buffer.lines.set(bottomRow, newLine.clone());\r\n    }\r\n\r\n    // Move the viewport to the bottom of the buffer unless the user is\r\n    // scrolling.\r\n    if (!this._userScrolling) {\r\n      this.buffer.ydisp = this.buffer.ybase;\r\n    }\r\n\r\n    // Flag rows that need updating\r\n    this.updateRange(this.buffer.scrollTop);\r\n    this.updateRange(this.buffer.scrollBottom);\r\n\r\n    /**\r\n     * This event is emitted whenever the terminal is scrolled.\r\n     * The one parameter passed is the new y display position.\r\n     *\r\n     * @event scroll\r\n     */\r\n    this.emit('scroll', this.buffer.ydisp);\r\n  }\r\n\r\n  /**\r\n   * Scroll the display of the terminal\r\n   * @param disp The number of lines to scroll down (negative scroll up).\r\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\r\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\r\n   * viewport originally.\r\n   */\r\n  public scrollLines(disp: number, suppressScrollEvent?: boolean): void {\r\n    if (disp < 0) {\r\n      if (this.buffer.ydisp === 0) {\r\n        return;\r\n      }\r\n      this._userScrolling = true;\r\n    } else if (disp + this.buffer.ydisp >= this.buffer.ybase) {\r\n      this._userScrolling = false;\r\n    }\r\n\r\n    const oldYdisp = this.buffer.ydisp;\r\n    this.buffer.ydisp = Math.max(Math.min(this.buffer.ydisp + disp, this.buffer.ybase), 0);\r\n\r\n    // No change occurred, don't trigger scroll/refresh\r\n    if (oldYdisp === this.buffer.ydisp) {\r\n      return;\r\n    }\r\n\r\n    if (!suppressScrollEvent) {\r\n      this.emit('scroll', this.buffer.ydisp);\r\n    }\r\n\r\n    this.refresh(0, this.rows - 1);\r\n  }\r\n\r\n  /**\r\n   * Scroll the display of the terminal by a number of pages.\r\n   * @param pageCount The number of pages to scroll (negative scrolls up).\r\n   */\r\n  public scrollPages(pageCount: number): void {\r\n    this.scrollLines(pageCount * (this.rows - 1));\r\n  }\r\n\r\n  /**\r\n   * Scrolls the display of the terminal to the top.\r\n   */\r\n  public scrollToTop(): void {\r\n    this.scrollLines(-this.buffer.ydisp);\r\n  }\r\n\r\n  /**\r\n   * Scrolls the display of the terminal to the bottom.\r\n   */\r\n  public scrollToBottom(): void {\r\n    this.scrollLines(this.buffer.ybase - this.buffer.ydisp);\r\n  }\r\n\r\n  public scrollToLine(line: number): void {\r\n    const scrollAmount = line - this.buffer.ydisp;\r\n    if (scrollAmount !== 0) {\r\n      this.scrollLines(scrollAmount);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Writes text to the terminal.\r\n   * @param data The text to write to the terminal.\r\n   */\r\n  public write(data: string): void {\r\n    // Ensure the terminal isn't disposed\r\n    if (this._isDisposed) {\r\n      return;\r\n    }\r\n\r\n    // Ignore falsy data values (including the empty string)\r\n    if (!data) {\r\n      return;\r\n    }\r\n\r\n    this.writeBuffer.push(data);\r\n\r\n    // Send XOFF to pause the pty process if the write buffer becomes too large so\r\n    // xterm.js can catch up before more data is sent. This is necessary in order\r\n    // to keep signals such as ^C responsive.\r\n    if (this.options.useFlowControl && !this._xoffSentToCatchUp && this.writeBuffer.length >= WRITE_BUFFER_PAUSE_THRESHOLD) {\r\n      // XOFF - stop pty pipe\r\n      // XON will be triggered by emulator before processing data chunk\r\n      this.handler(C0.DC3);\r\n      this._xoffSentToCatchUp = true;\r\n    }\r\n\r\n    if (!this._writeInProgress && this.writeBuffer.length > 0) {\r\n      // Kick off a write which will write all data in sequence recursively\r\n      this._writeInProgress = true;\r\n      // Kick off an async innerWrite so more writes can come in while processing data\r\n      setTimeout(() => {\r\n        this._innerWrite();\r\n      });\r\n    }\r\n  }\r\n\r\n  protected _innerWrite(): void {\r\n    // Ensure the terminal isn't disposed\r\n    if (this._isDisposed) {\r\n      this.writeBuffer = [];\r\n    }\r\n\r\n    const writeBatch = this.writeBuffer.splice(0, WRITE_BATCH_SIZE);\r\n    while (writeBatch.length > 0) {\r\n      const data = writeBatch.shift();\r\n\r\n      // If XOFF was sent in order to catch up with the pty process, resume it if\r\n      // the writeBuffer is empty to allow more data to come in.\r\n      if (this._xoffSentToCatchUp && writeBatch.length === 0 && this.writeBuffer.length === 0) {\r\n        this.handler(C0.DC1);\r\n        this._xoffSentToCatchUp = false;\r\n      }\r\n\r\n      this._refreshStart = this.buffer.y;\r\n      this._refreshEnd = this.buffer.y;\r\n\r\n      // HACK: Set the parser state based on it's state at the time of return.\r\n      // This works around the bug #662 which saw the parser state reset in the\r\n      // middle of parsing escape sequence in two chunks. For some reason the\r\n      // state of the parser resets to 0 after exiting parser.parse. This change\r\n      // just sets the state back based on the correct return statement.\r\n\r\n      this._inputHandler.parse(data);\r\n\r\n      this.updateRange(this.buffer.y);\r\n      this.refresh(this._refreshStart, this._refreshEnd);\r\n    }\r\n    if (this.writeBuffer.length > 0) {\r\n      // Allow renderer to catch up before processing the next batch\r\n      setTimeout(() => this._innerWrite(), 0);\r\n    } else {\r\n      this._writeInProgress = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Writes text to the terminal, followed by a break line character (\\n).\r\n   * @param data The text to write to the terminal.\r\n   */\r\n  public writeln(data: string): void {\r\n    this.write(data + '\\r\\n');\r\n  }\r\n\r\n  /**\r\n   * Attaches a custom key event handler which is run before keys are processed,\r\n   * giving consumers of xterm.js ultimate control as to what keys should be\r\n   * processed by the terminal and what keys should not.\r\n   * @param customKeyEventHandler The custom KeyboardEvent handler to attach.\r\n   * This is a function that takes a KeyboardEvent, allowing consumers to stop\r\n   * propagation and/or prevent the default action. The function returns whether\r\n   * the event should be processed by xterm.js.\r\n   */\r\n  public attachCustomKeyEventHandler(customKeyEventHandler: CustomKeyEventHandler): void {\r\n    this._customKeyEventHandler = customKeyEventHandler;\r\n  }\r\n\r\n  /** Add handler for CSI escape sequence. See xterm.d.ts for details. */\r\n  public addCsiHandler(flag: string, callback: (params: number[], collect: string) => boolean): IDisposable {\r\n    return this._inputHandler.addCsiHandler(flag, callback);\r\n  }\r\n  /** Add handler for OSC escape sequence. See xterm.d.ts for details. */\r\n  public addOscHandler(ident: number, callback: (data: string) => boolean): IDisposable {\r\n    return this._inputHandler.addOscHandler(ident, callback);\r\n  }\r\n\r\n  /**\r\n   * Registers a link matcher, allowing custom link patterns to be matched and\r\n   * handled.\r\n   * @param regex The regular expression to search for, specifically\r\n   * this searches the textContent of the rows. You will want to use \\s to match\r\n   * a space ' ' character for example.\r\n   * @param handler The callback when the link is called.\r\n   * @param options Options for the link matcher.\r\n   * @return The ID of the new matcher, this can be used to deregister.\r\n   */\r\n  public registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options?: ILinkMatcherOptions): number {\r\n    const matcherId = this.linkifier.registerLinkMatcher(regex, handler, options);\r\n    this.refresh(0, this.rows - 1);\r\n    return matcherId;\r\n  }\r\n\r\n  /**\r\n   * Deregisters a link matcher if it has been registered.\r\n   * @param matcherId The link matcher's ID (returned after register)\r\n   */\r\n  public deregisterLinkMatcher(matcherId: number): void {\r\n    if (this.linkifier.deregisterLinkMatcher(matcherId)) {\r\n      this.refresh(0, this.rows - 1);\r\n    }\r\n  }\r\n\r\n  public registerCharacterJoiner(handler: CharacterJoinerHandler): number {\r\n    const joinerId = this.renderer.registerCharacterJoiner(handler);\r\n    this.refresh(0, this.rows - 1);\r\n    return joinerId;\r\n  }\r\n\r\n  public deregisterCharacterJoiner(joinerId: number): void {\r\n    if (this.renderer.deregisterCharacterJoiner(joinerId)) {\r\n      this.refresh(0, this.rows - 1);\r\n    }\r\n  }\r\n\r\n  public get markers(): IMarker[] {\r\n    return this.buffer.markers;\r\n  }\r\n\r\n  public addMarker(cursorYOffset: number): IMarker {\r\n    // Disallow markers on the alt buffer\r\n    if (this.buffer !== this.buffers.normal) {\r\n      return;\r\n    }\r\n\r\n    return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + cursorYOffset);\r\n  }\r\n\r\n  /**\r\n   * Gets whether the terminal has an active selection.\r\n   */\r\n  public hasSelection(): boolean {\r\n    return this.selectionManager ? this.selectionManager.hasSelection : false;\r\n  }\r\n\r\n  /**\r\n   * Gets the terminal's current selection, this is useful for implementing copy\r\n   * behavior outside of xterm.js.\r\n   */\r\n  public getSelection(): string {\r\n    return this.selectionManager ? this.selectionManager.selectionText : '';\r\n  }\r\n\r\n  /**\r\n   * Clears the current terminal selection.\r\n   */\r\n  public clearSelection(): void {\r\n    if (this.selectionManager) {\r\n      this.selectionManager.clearSelection();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects all text within the terminal.\r\n   */\r\n  public selectAll(): void {\r\n    if (this.selectionManager) {\r\n      this.selectionManager.selectAll();\r\n    }\r\n  }\r\n\r\n  public selectLines(start: number, end: number): void {\r\n    if (this.selectionManager) {\r\n      this.selectionManager.selectLines(start, end);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle a keydown event\r\n   * Key Resources:\r\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\r\n   * @param ev The keydown event to be handled.\r\n   */\r\n  protected _keyDown(event: KeyboardEvent): boolean {\r\n    if (this._customKeyEventHandler && this._customKeyEventHandler(event) === false) {\r\n      return false;\r\n    }\r\n\r\n    if (!this._compositionHelper.keydown(event)) {\r\n      if (this.buffer.ybase !== this.buffer.ydisp) {\r\n        this.scrollToBottom();\r\n      }\r\n      return false;\r\n    }\r\n\r\n    const result = evaluateKeyboardEvent(event, this.applicationCursor, this.browser.isMac, this.options.macOptionIsMeta);\r\n\r\n    this.updateCursorStyle(event);\r\n\r\n    // if (result.key === C0.DC3) { // XOFF\r\n    //   this._writeStopped = true;\r\n    // } else if (result.key === C0.DC1) { // XON\r\n    //   this._writeStopped = false;\r\n    // }\r\n\r\n    if (result.type === KeyboardResultType.PAGE_DOWN || result.type === KeyboardResultType.PAGE_UP) {\r\n      const scrollCount = this.rows - 1;\r\n      this.scrollLines(result.type === KeyboardResultType.PAGE_UP ? -scrollCount : scrollCount);\r\n      return this.cancel(event, true);\r\n    }\r\n\r\n    if (result.type === KeyboardResultType.SELECT_ALL) {\r\n      this.selectAll();\r\n    }\r\n\r\n    if (this._isThirdLevelShift(this.browser, event)) {\r\n      return true;\r\n    }\r\n\r\n    if (result.cancel) {\r\n      // The event is canceled at the end already, is this necessary?\r\n      this.cancel(event, true);\r\n    }\r\n\r\n    if (!result.key) {\r\n      return true;\r\n    }\r\n\r\n    this.emit('keydown', event);\r\n    this.emit('key', result.key, event);\r\n    this.showCursor();\r\n    this.handler(result.key);\r\n\r\n    return this.cancel(event, true);\r\n  }\r\n\r\n  private _isThirdLevelShift(browser: IBrowser, ev: IKeyboardEvent): boolean {\r\n    const thirdLevelKey =\r\n        (browser.isMac && !this.options.macOptionIsMeta && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\r\n        (browser.isMSWindows && ev.altKey && ev.ctrlKey && !ev.metaKey);\r\n\r\n    if (ev.type === 'keypress') {\r\n      return thirdLevelKey;\r\n    }\r\n\r\n    // Don't invoke for arrows, pageDown, home, backspace, etc. (on non-keypress events)\r\n    return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\r\n  }\r\n\r\n  /**\r\n   * Set the G level of the terminal\r\n   * @param g\r\n   */\r\n  public setgLevel(g: number): void {\r\n    this.glevel = g;\r\n    this.charset = this.charsets[g];\r\n  }\r\n\r\n  /**\r\n   * Set the charset for the given G level of the terminal\r\n   * @param g\r\n   * @param charset\r\n   */\r\n  public setgCharset(g: number, charset: ICharset): void {\r\n    this.charsets[g] = charset;\r\n    if (this.glevel === g) {\r\n      this.charset = charset;\r\n    }\r\n  }\r\n\r\n  protected _keyUp(ev: KeyboardEvent): void {\r\n    this.updateCursorStyle(ev);\r\n  }\r\n\r\n  /**\r\n   * Handle a keypress event.\r\n   * Key Resources:\r\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\r\n   * @param ev The keypress event to be handled.\r\n   */\r\n  protected _keyPress(ev: KeyboardEvent): boolean {\r\n    let key;\r\n\r\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\r\n      return false;\r\n    }\r\n\r\n    this.cancel(ev);\r\n\r\n    if (ev.charCode) {\r\n      key = ev.charCode;\r\n    } else if (ev.which === null || ev.which === undefined) {\r\n      key = ev.keyCode;\r\n    } else if (ev.which !== 0 && ev.charCode !== 0) {\r\n      key = ev.which;\r\n    } else {\r\n      return false;\r\n    }\r\n\r\n    if (!key || (\r\n      (ev.altKey || ev.ctrlKey || ev.metaKey) && !this._isThirdLevelShift(this.browser, ev)\r\n    )) {\r\n      return false;\r\n    }\r\n\r\n    key = String.fromCharCode(key);\r\n\r\n    this.emit('keypress', key, ev);\r\n    this.emit('key', key, ev);\r\n    this.showCursor();\r\n    this.handler(key);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Ring the bell.\r\n   * Note: We could do sweet things with webaudio here\r\n   */\r\n  public bell(): void {\r\n    this.emit('bell');\r\n    if (this._soundBell()) {\r\n      this.soundManager.playBellSound();\r\n    }\r\n\r\n    if (this._visualBell()) {\r\n      this.element.classList.add('visual-bell-active');\r\n      clearTimeout(this._visualBellTimer);\r\n      this._visualBellTimer = window.setTimeout(() => {\r\n        this.element.classList.remove('visual-bell-active');\r\n      }, 200);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log the current state to the console.\r\n   */\r\n  public log(text: string, data?: any): void {\r\n    if (!this.options.debug) return;\r\n    if (!this._context.console || !this._context.console.log) return;\r\n    this._context.console.log(text, data);\r\n  }\r\n\r\n  /**\r\n   * Log the current state as error to the console.\r\n   */\r\n  public error(text: string, data?: any): void {\r\n    if (!this.options.debug) return;\r\n    if (!this._context.console || !this._context.console.error) return;\r\n    this._context.console.error(text, data);\r\n  }\r\n\r\n  /**\r\n   * Resizes the terminal.\r\n   *\r\n   * @param x The number of columns to resize to.\r\n   * @param y The number of rows to resize to.\r\n   */\r\n  public resize(x: number, y: number): void {\r\n    if (isNaN(x) || isNaN(y)) {\r\n      return;\r\n    }\r\n\r\n    if (x === this.cols && y === this.rows) {\r\n      // Check if we still need to measure the char size (fixes #785).\r\n      if (this.charMeasure && (!this.charMeasure.width || !this.charMeasure.height)) {\r\n        this.charMeasure.measure(this.options);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (x < MINIMUM_COLS) x = MINIMUM_COLS;\r\n    if (y < MINIMUM_ROWS) y = MINIMUM_ROWS;\r\n\r\n    this.buffers.resize(x, y);\r\n\r\n    this.cols = x;\r\n    this.rows = y;\r\n    this.buffers.setupTabStops(this.cols);\r\n\r\n    if (this.charMeasure) {\r\n      this.charMeasure.measure(this.options);\r\n    }\r\n\r\n    this.refresh(0, this.rows - 1);\r\n    this.emit('resize', {cols: x, rows: y});\r\n  }\r\n\r\n  /**\r\n   * Updates the range of rows to refresh\r\n   * @param y The number of rows to refresh next.\r\n   */\r\n  public updateRange(y: number): void {\r\n    if (y < this._refreshStart) this._refreshStart = y;\r\n    if (y > this._refreshEnd) this._refreshEnd = y;\r\n    // if (y > this.refreshEnd) {\r\n    //   this.refreshEnd = y;\r\n    //   if (y > this.rows - 1) {\r\n    //     this.refreshEnd = this.rows - 1;\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * Set the range of refreshing to the maximum value\r\n   */\r\n  public maxRange(): void {\r\n    this._refreshStart = 0;\r\n    this._refreshEnd = this.rows - 1;\r\n  }\r\n\r\n  /**\r\n   * Clear the entire buffer, making the prompt line the new first line.\r\n   */\r\n  public clear(): void {\r\n    if (this.buffer.ybase === 0 && this.buffer.y === 0) {\r\n      // Don't clear if it's already clear\r\n      return;\r\n    }\r\n    this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y));\r\n    this.buffer.lines.length = 1;\r\n    this.buffer.ydisp = 0;\r\n    this.buffer.ybase = 0;\r\n    this.buffer.y = 0;\r\n    for (let i = 1; i < this.rows; i++) {\r\n      this.buffer.lines.push(this.buffer.getBlankLine(DEFAULT_ATTR));\r\n    }\r\n    this.refresh(0, this.rows - 1);\r\n    this.emit('scroll', this.buffer.ydisp);\r\n  }\r\n\r\n  /**\r\n   * If cur return the back color xterm feature attribute. Else return default attribute.\r\n   * @param cur\r\n   */\r\n  public ch(cur?: boolean): CharData {\r\n    if (cur) {\r\n      return [this.eraseAttr(), NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE];\r\n    }\r\n    return [DEFAULT_ATTR, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE];\r\n  }\r\n\r\n  /**\r\n   * Evaluate if the current terminal is the given argument.\r\n   * @param term The terminal name to evaluate\r\n   */\r\n  public is(term: string): boolean {\r\n    return (this.options.termName + '').indexOf(term) === 0;\r\n  }\r\n\r\n  /**\r\n   * Emit the 'data' event and populate the given data.\r\n   * @param data The data to populate in the event.\r\n   */\r\n  public handler(data: string): void {\r\n    // Prevents all events to pty process if stdin is disabled\r\n    if (this.options.disableStdin) {\r\n      return;\r\n    }\r\n\r\n    // Clear the selection if the selection manager is available and has an active selection\r\n    if (this.selectionManager && this.selectionManager.hasSelection) {\r\n      this.selectionManager.clearSelection();\r\n    }\r\n\r\n    // Input is being sent to the terminal, the terminal should focus the prompt.\r\n    if (this.buffer.ybase !== this.buffer.ydisp) {\r\n      this.scrollToBottom();\r\n    }\r\n    this.emit('data', data);\r\n  }\r\n\r\n  /**\r\n   * Emit the 'title' event and populate the given title.\r\n   * @param title The title to populate in the event.\r\n   */\r\n  public handleTitle(title: string): void {\r\n    /**\r\n     * This event is emitted when the title of the terminal is changed\r\n     * from inside the terminal. The parameter is the new title.\r\n     *\r\n     * @event title\r\n     */\r\n    this.emit('title', title);\r\n  }\r\n\r\n  /**\r\n   * ESC\r\n   */\r\n\r\n  /**\r\n   * ESC D Index (IND is 0x84).\r\n   */\r\n  public index(): void {\r\n    this.buffer.y++;\r\n    if (this.buffer.y > this.buffer.scrollBottom) {\r\n      this.buffer.y--;\r\n      this.scroll();\r\n    }\r\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\r\n    if (this.buffer.x >= this.cols) {\r\n      this.buffer.x--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ESC M Reverse Index (RI is 0x8d).\r\n   *\r\n   * Move the cursor up one row, inserting a new blank line if necessary.\r\n   */\r\n  public reverseIndex(): void {\r\n    if (this.buffer.y === this.buffer.scrollTop) {\r\n      // possibly move the code below to term.reverseScroll();\r\n      // test: echo -ne '\\e[1;1H\\e[44m\\eM\\e[0m'\r\n      // blankLine(true) is xterm/linux behavior\r\n      const scrollRegionHeight = this.buffer.scrollBottom - this.buffer.scrollTop;\r\n      this.buffer.lines.shiftElements(this.buffer.y + this.buffer.ybase, scrollRegionHeight, 1);\r\n      this.buffer.lines.set(this.buffer.y + this.buffer.ybase, this.buffer.getBlankLine(this.eraseAttr()));\r\n      this.updateRange(this.buffer.scrollTop);\r\n      this.updateRange(this.buffer.scrollBottom);\r\n    } else {\r\n      this.buffer.y--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ESC c Full Reset (RIS).\r\n   */\r\n  public reset(): void {\r\n    this.options.rows = this.rows;\r\n    this.options.cols = this.cols;\r\n    const customKeyEventHandler = this._customKeyEventHandler;\r\n    const inputHandler = this._inputHandler;\r\n    const cursorState = this.cursorState;\r\n    this._setup();\r\n    this._customKeyEventHandler = customKeyEventHandler;\r\n    this._inputHandler = inputHandler;\r\n    this.cursorState = cursorState;\r\n    this.refresh(0, this.rows - 1);\r\n    if (this.viewport) {\r\n      this.viewport.syncScrollArea();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * ESC H Tab Set (HTS is 0x88).\r\n   */\r\n  public tabSet(): void {\r\n    this.buffer.tabs[this.buffer.x] = true;\r\n  }\r\n\r\n  // TODO: Remove cancel function and cancelEvents option\r\n  public cancel(ev: Event, force?: boolean): boolean {\r\n    if (!this.options.cancelEvents && !force) {\r\n      return;\r\n    }\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n    return false;\r\n  }\r\n\r\n  // TODO: Remove when true color is implemented\r\n  public matchColor(r1: number, g1: number, b1: number): number {\r\n    const hash = (r1 << 16) | (g1 << 8) | b1;\r\n\r\n    if (matchColorCache[hash] !== null && matchColorCache[hash] !== undefined) {\r\n      return matchColorCache[hash];\r\n    }\r\n\r\n    let ldiff = Infinity;\r\n    let li = -1;\r\n    let i = 0;\r\n    let c: number;\r\n    let r2: number;\r\n    let g2: number;\r\n    let b2: number;\r\n    let diff: number;\r\n\r\n    for (; i < DEFAULT_ANSI_COLORS.length; i++) {\r\n      c = DEFAULT_ANSI_COLORS[i].rgba;\r\n      r2 = c >>> 24;\r\n      g2 = c >>> 16 & 0xFF;\r\n      b2 = c >>> 8 & 0xFF;\r\n      // assume that alpha is 0xFF\r\n\r\n      diff = matchColorDistance(r1, g1, b1, r2, g2, b2);\r\n\r\n      if (diff === 0) {\r\n        li = i;\r\n        break;\r\n      }\r\n\r\n      if (diff < ldiff) {\r\n        ldiff = diff;\r\n        li = i;\r\n      }\r\n    }\r\n\r\n    return matchColorCache[hash] = li;\r\n  }\r\n\r\n  private _visualBell(): boolean {\r\n    return false;\r\n    // return this.options.bellStyle === 'visual' ||\r\n    //     this.options.bellStyle === 'both';\r\n  }\r\n\r\n  private _soundBell(): boolean {\r\n    return this.options.bellStyle === 'sound';\r\n    // return this.options.bellStyle === 'sound' ||\r\n    //     this.options.bellStyle === 'both';\r\n  }\r\n}\r\n\r\n/**\r\n * Helpers\r\n */\r\n\r\nfunction wasModifierKeyOnlyEvent(ev: KeyboardEvent): boolean {\r\n  return ev.keyCode === 16 || // Shift\r\n    ev.keyCode === 17 || // Ctrl\r\n    ev.keyCode === 18; // Alt\r\n}\r\n\r\n/**\r\n * TODO:\r\n * The below color-related code can be removed when true color is implemented.\r\n * It's only purpose is to match true color requests with the closest matching\r\n * ANSI color code.\r\n */\r\n\r\nconst matchColorCache: {[colorRGBHash: number]: number} = {};\r\n\r\n// http://stackoverflow.com/questions/1633828\r\nfunction matchColorDistance(r1: number, g1: number, b1: number, r2: number, g2: number, b2: number): number {\r\n  return Math.pow(30 * (r1 - r2), 2)\r\n    + Math.pow(59 * (g1 - g2), 2)\r\n    + Math.pow(11 * (b1 - b2), 2);\r\n}\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nexport let blankLine = 'Blank line';\r\nexport let promptLabel = 'Terminal input';\r\nexport let tooMuchOutput = 'Too much output to announce, navigate to rows manually to read';\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal, ISoundManager } from './Types';\r\n\r\n// Source: https://freesound.org/people/altemark/sounds/45759/\r\n// This sound is released under the Creative Commons Attribution 3.0 Unported\r\n// (CC BY 3.0) license. It was created by 'altemark'. No modifications have been\r\n// made, apart from the conversion to base64.\r\nexport const DEFAULT_BELL_SOUND = 'data:audio/wav;base64,UklGRigBAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQBAADpAFgCwAMlBZoG/wdmCcoKRAypDQ8PbRDBEQQTOxRtFYcWlBePGIUZXhoiG88bcBz7HHIdzh0WHlMeZx51HmkeUx4WHs8dah0AHXwc3hs9G4saxRnyGBIYGBcQFv8U4RPAEoYRQBACD70NWwwHC6gJOwjWBloF7gOBAhABkf8b/qv8R/ve+Xf4Ife79W/0JfPZ8Z/wde9N7ijtE+wU6xvqM+lb6H7nw+YX5mrlxuQz5Mzje+Ma49fioeKD4nXiYeJy4pHitOL04j/jn+MN5IPkFOWs5U3mDefM55/ogOl36m7rdOyE7abuyu8D8Unyj/Pg9D/2qfcb+Yn6/vuK/Qj/lAAlAg==';\r\n\r\nexport class SoundManager implements ISoundManager {\r\n  private static _audioContext: AudioContext;\r\n\r\n  static get audioContext(): AudioContext | null {\r\n    if (!SoundManager._audioContext) {\r\n      const audioContextCtor: typeof AudioContext = (<any>window).AudioContext || (<any>window).webkitAudioContext;\r\n      if (!audioContextCtor) {\r\n        console.warn('Web Audio API is not supported by this browser. Consider upgrading to the latest version');\r\n        return null;\r\n      }\r\n      SoundManager._audioContext = new audioContextCtor();\r\n    }\r\n    return SoundManager._audioContext;\r\n  }\r\n\r\n  constructor(\r\n    private _terminal: ITerminal\r\n  ) {\r\n  }\r\n\r\n  public playBellSound(): void {\r\n    const ctx = SoundManager.audioContext;\r\n    if (!ctx) {\r\n      return;\r\n    }\r\n    const bellAudioSource = ctx.createBufferSource();\r\n    ctx.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._terminal.options.bellSound)), (buffer) => {\r\n      bellAudioSource.buffer = buffer;\r\n      bellAudioSource.connect(ctx.destination);\r\n      bellAudioSource.start(0);\r\n    });\r\n  }\r\n\r\n  private _base64ToArrayBuffer(base64: string): ArrayBuffer {\r\n    const binaryString = window.atob(base64);\r\n    const len = binaryString.length;\r\n    const bytes = new Uint8Array(len);\r\n\r\n    for (let i = 0; i < len; i++) {\r\n      bytes[i] = binaryString.charCodeAt(i);\r\n    }\r\n\r\n    return bytes.buffer;\r\n  }\r\n\r\n  private _removeMimeType(dataURI: string): string {\r\n    // Split the input to get the mime-type and the data itself\r\n    const splitUri = dataURI.split(',');\r\n\r\n    // Return only the data\r\n    return splitUri[1];\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal } from './Types';\r\n\r\n/**\r\n * Represents a selection within the buffer. This model only cares about column\r\n * and row coordinates, not wide characters.\r\n */\r\nexport class SelectionModel {\r\n  /**\r\n   * Whether select all is currently active.\r\n   */\r\n  public isSelectAllActive: boolean;\r\n\r\n  /**\r\n   * The [x, y] position the selection starts at.\r\n   */\r\n  public selectionStart: [number, number];\r\n\r\n  /**\r\n   * The minimal length of the selection from the start position. When double\r\n   * clicking on a word, the word will be selected which makes the selection\r\n   * start at the start of the word and makes this variable the length.\r\n   */\r\n  public selectionStartLength: number;\r\n\r\n  /**\r\n   * The [x, y] position the selection ends at.\r\n   */\r\n  public selectionEnd: [number, number];\r\n\r\n  constructor(\r\n    private _terminal: ITerminal\r\n  ) {\r\n    this.clearSelection();\r\n  }\r\n\r\n  /**\r\n   * Clears the current selection.\r\n   */\r\n  public clearSelection(): void {\r\n    this.selectionStart = null;\r\n    this.selectionEnd = null;\r\n    this.isSelectAllActive = false;\r\n    this.selectionStartLength = 0;\r\n  }\r\n\r\n  /**\r\n   * The final selection start, taking into consideration select all.\r\n   */\r\n  public get finalSelectionStart(): [number, number] {\r\n    if (this.isSelectAllActive) {\r\n      return [0, 0];\r\n    }\r\n\r\n    if (!this.selectionEnd || !this.selectionStart) {\r\n      return this.selectionStart;\r\n    }\r\n\r\n    return this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;\r\n  }\r\n\r\n  /**\r\n   * The final selection end, taking into consideration select all, double click\r\n   * word selection and triple click line selection.\r\n   */\r\n  public get finalSelectionEnd(): [number, number] {\r\n    if (this.isSelectAllActive) {\r\n      return [this._terminal.cols, this._terminal.buffer.ybase + this._terminal.rows - 1];\r\n    }\r\n\r\n    if (!this.selectionStart) {\r\n      return null;\r\n    }\r\n\r\n    // Use the selection start + length if the end doesn't exist or they're reversed\r\n    if (!this.selectionEnd || this.areSelectionValuesReversed()) {\r\n      const startPlusLength = this.selectionStart[0] + this.selectionStartLength;\r\n      if (startPlusLength > this._terminal.cols) {\r\n        return [startPlusLength % this._terminal.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._terminal.cols)];\r\n      }\r\n      return [startPlusLength, this.selectionStart[1]];\r\n    }\r\n\r\n    // Ensure the the word/line is selected after a double/triple click\r\n    if (this.selectionStartLength) {\r\n      // Select the larger of the two when start and end are on the same line\r\n      if (this.selectionEnd[1] === this.selectionStart[1]) {\r\n        return [Math.max(this.selectionStart[0] + this.selectionStartLength, this.selectionEnd[0]), this.selectionEnd[1]];\r\n      }\r\n    }\r\n    return this.selectionEnd;\r\n  }\r\n\r\n  /**\r\n   * Returns whether the selection start and end are reversed.\r\n   */\r\n  public areSelectionValuesReversed(): boolean {\r\n    const start = this.selectionStart;\r\n    const end = this.selectionEnd;\r\n    if (!start || !end) {\r\n      return false;\r\n    }\r\n    return start[1] > end[1] || (start[1] === end[1] && start[0] > end[0]);\r\n  }\r\n\r\n  /**\r\n   * Handle the buffer being trimmed, adjust the selection position.\r\n   * @param amount The amount the buffer is being trimmed.\r\n   * @return Whether a refresh is necessary.\r\n   */\r\n  public onTrim(amount: number): boolean {\r\n    // Adjust the selection position based on the trimmed amount.\r\n    if (this.selectionStart) {\r\n      this.selectionStart[1] -= amount;\r\n    }\r\n    if (this.selectionEnd) {\r\n      this.selectionEnd[1] -= amount;\r\n    }\r\n\r\n    // The selection has moved off the buffer, clear it.\r\n    if (this.selectionEnd && this.selectionEnd[1] < 0) {\r\n      this.clearSelection();\r\n      return true;\r\n    }\r\n\r\n    // If the selection start is trimmed, ensure the start column is 0.\r\n    if (this.selectionStart && this.selectionStart[1] < 0) {\r\n      this.selectionStart[1] = 0;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal, ISelectionManager, IBuffer, CharData, IBufferLine } from './Types';\r\nimport { XtermListener } from './common/Types';\r\nimport { MouseHelper } from './ui/MouseHelper';\r\nimport * as Browser from './core/Platform';\r\nimport { CharMeasure } from './ui/CharMeasure';\r\nimport { EventEmitter } from './common/EventEmitter';\r\nimport { SelectionModel } from './SelectionModel';\r\nimport { CHAR_DATA_WIDTH_INDEX, CHAR_DATA_CHAR_INDEX, CHAR_DATA_CODE_INDEX } from './Buffer';\r\nimport { AltClickHandler } from './handlers/AltClickHandler';\r\n\r\n/**\r\n * The number of pixels the mouse needs to be above or below the viewport in\r\n * order to scroll at the maximum speed.\r\n */\r\nconst DRAG_SCROLL_MAX_THRESHOLD = 50;\r\n\r\n/**\r\n * The maximum scrolling speed\r\n */\r\nconst DRAG_SCROLL_MAX_SPEED = 15;\r\n\r\n/**\r\n * The number of milliseconds between drag scroll updates.\r\n */\r\nconst DRAG_SCROLL_INTERVAL = 50;\r\n\r\n/**\r\n * The maximum amount of time that can have elapsed for an alt click to move the\r\n * cursor.\r\n */\r\nconst ALT_CLICK_MOVE_CURSOR_TIME = 500;\r\n\r\n/**\r\n * A string containing all characters that are considered word separated by the\r\n * double click to select work logic.\r\n */\r\nconst WORD_SEPARATORS = ' ()[]{}\\'\"';\r\n\r\nconst NON_BREAKING_SPACE_CHAR = String.fromCharCode(160);\r\nconst ALL_NON_BREAKING_SPACE_REGEX = new RegExp(NON_BREAKING_SPACE_CHAR, 'g');\r\n\r\n/**\r\n * Represents a position of a word on a line.\r\n */\r\ninterface IWordPosition {\r\n  start: number;\r\n  length: number;\r\n}\r\n\r\n/**\r\n * A selection mode, this drives how the selection behaves on mouse move.\r\n */\r\nexport const enum SelectionMode {\r\n  NORMAL,\r\n  WORD,\r\n  LINE,\r\n  COLUMN\r\n}\r\n\r\n/**\r\n * A class that manages the selection of the terminal. With help from\r\n * SelectionModel, SelectionManager handles with all logic associated with\r\n * dealing with the selection, including handling mouse interaction, wide\r\n * characters and fetching the actual text within the selection. Rendering is\r\n * not handled by the SelectionManager but a 'refresh' event is fired when the\r\n * selection is ready to be redrawn.\r\n */\r\nexport class SelectionManager extends EventEmitter implements ISelectionManager {\r\n  protected _model: SelectionModel;\r\n\r\n  /**\r\n   * The amount to scroll every drag scroll update (depends on how far the mouse\r\n   * drag is above or below the terminal).\r\n   */\r\n  private _dragScrollAmount: number;\r\n\r\n  /**\r\n   * The current selection mode.\r\n   */\r\n  protected _activeSelectionMode: SelectionMode;\r\n\r\n  /**\r\n   * A setInterval timer that is active while the mouse is down whose callback\r\n   * scrolls the viewport when necessary.\r\n   */\r\n  private _dragScrollIntervalTimer: NodeJS.Timer;\r\n\r\n  /**\r\n   * The animation frame ID used for refreshing the selection.\r\n   */\r\n  private _refreshAnimationFrame: number;\r\n\r\n  /**\r\n   * Whether selection is enabled.\r\n   */\r\n  private _enabled = true;\r\n\r\n  private _mouseMoveListener: EventListener;\r\n  private _mouseUpListener: EventListener;\r\n  private _trimListener: XtermListener;\r\n\r\n  private _mouseDownTimeStamp: number;\r\n\r\n  constructor(\r\n    private _terminal: ITerminal,\r\n    private _charMeasure: CharMeasure\r\n  ) {\r\n    super();\r\n    this._initListeners();\r\n    this.enable();\r\n\r\n    this._model = new SelectionModel(_terminal);\r\n    this._activeSelectionMode = SelectionMode.NORMAL;\r\n  }\r\n\r\n  public dispose(): void {\r\n    super.dispose();\r\n    this._removeMouseDownListeners();\r\n  }\r\n\r\n  private get _buffer(): IBuffer {\r\n    return this._terminal.buffers.active;\r\n  }\r\n\r\n  /**\r\n   * Initializes listener variables.\r\n   */\r\n  private _initListeners(): void {\r\n    this._mouseMoveListener = event => this._onMouseMove(<MouseEvent>event);\r\n    this._mouseUpListener = event => this._onMouseUp(<MouseEvent>event);\r\n    this._trimListener = (amount: number) => this._onTrim(amount);\r\n\r\n    this.initBuffersListeners();\r\n  }\r\n\r\n  public initBuffersListeners(): void {\r\n    this._terminal.buffer.lines.on('trim', this._trimListener);\r\n    this._terminal.buffers.on('activate', e => this._onBufferActivate(e));\r\n  }\r\n\r\n  /**\r\n   * Disables the selection manager. This is useful for when terminal mouse\r\n   * are enabled.\r\n   */\r\n  public disable(): void {\r\n    this.clearSelection();\r\n    this._enabled = false;\r\n  }\r\n\r\n  /**\r\n   * Enable the selection manager.\r\n   */\r\n  public enable(): void {\r\n    this._enabled = true;\r\n  }\r\n\r\n  public get selectionStart(): [number, number] { return this._model.finalSelectionStart; }\r\n  public get selectionEnd(): [number, number] { return this._model.finalSelectionEnd; }\r\n\r\n  /**\r\n   * Gets whether there is an active text selection.\r\n   */\r\n  public get hasSelection(): boolean {\r\n    const start = this._model.finalSelectionStart;\r\n    const end = this._model.finalSelectionEnd;\r\n    if (!start || !end) {\r\n      return false;\r\n    }\r\n    return start[0] !== end[0] || start[1] !== end[1];\r\n  }\r\n\r\n  /**\r\n   * Gets the text currently selected.\r\n   */\r\n  public get selectionText(): string {\r\n    const start = this._model.finalSelectionStart;\r\n    const end = this._model.finalSelectionEnd;\r\n    if (!start || !end) {\r\n      return '';\r\n    }\r\n\r\n    const result: string[] = [];\r\n\r\n    if (this._activeSelectionMode === SelectionMode.COLUMN) {\r\n      // Ignore zero width selections\r\n      if (start[0] === end[0]) {\r\n        return '';\r\n      }\r\n\r\n      for (let i = start[1]; i <= end[1]; i++) {\r\n        const lineText = this._buffer.translateBufferLineToString(i, true, start[0], end[0]);\r\n        result.push(lineText);\r\n      }\r\n    } else {\r\n      // Get first row\r\n      const startRowEndCol = start[1] === end[1] ? end[0] : undefined;\r\n      result.push(this._buffer.translateBufferLineToString(start[1], true, start[0], startRowEndCol));\r\n\r\n      // Get middle rows\r\n      for (let i = start[1] + 1; i <= end[1] - 1; i++) {\r\n        const bufferLine = this._buffer.lines.get(i);\r\n        const lineText = this._buffer.translateBufferLineToString(i, true);\r\n        if (bufferLine.isWrapped) {\r\n          result[result.length - 1] += lineText;\r\n        } else {\r\n          result.push(lineText);\r\n        }\r\n      }\r\n\r\n      // Get final row\r\n      if (start[1] !== end[1]) {\r\n        const bufferLine = this._buffer.lines.get(end[1]);\r\n        const lineText = this._buffer.translateBufferLineToString(end[1], true, 0, end[0]);\r\n        if (bufferLine.isWrapped) {\r\n          result[result.length - 1] += lineText;\r\n        } else {\r\n          result.push(lineText);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Format string by replacing non-breaking space chars with regular spaces\r\n    // and joining the array into a multi-line string.\r\n    const formattedResult = result.map(line => {\r\n      return line.replace(ALL_NON_BREAKING_SPACE_REGEX, ' ');\r\n    }).join(Browser.isMSWindows ? '\\r\\n' : '\\n');\r\n\r\n    return formattedResult;\r\n  }\r\n\r\n  /**\r\n   * Clears the current terminal selection.\r\n   */\r\n  public clearSelection(): void {\r\n    this._model.clearSelection();\r\n    this._removeMouseDownListeners();\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * Queues a refresh, redrawing the selection on the next opportunity.\r\n   * @param isNewSelection Whether the selection should be registered as a new\r\n   * selection on Linux.\r\n   */\r\n  public refresh(isNewSelection?: boolean): void {\r\n    // Queue the refresh for the renderer\r\n    if (!this._refreshAnimationFrame) {\r\n      this._refreshAnimationFrame = window.requestAnimationFrame(() => this._refresh());\r\n    }\r\n\r\n    // If the platform is Linux and the refresh call comes from a mouse event,\r\n    // we need to update the selection for middle click to paste selection.\r\n    if (Browser.isLinux && isNewSelection) {\r\n      const selectionText = this.selectionText;\r\n      if (selectionText.length) {\r\n        this.emit('newselection', this.selectionText);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fires the refresh event, causing consumers to pick it up and redraw the\r\n   * selection state.\r\n   */\r\n  private _refresh(): void {\r\n    this._refreshAnimationFrame = null;\r\n    this.emit('refresh', {\r\n      start: this._model.finalSelectionStart,\r\n      end: this._model.finalSelectionEnd,\r\n      columnSelectMode: this._activeSelectionMode === SelectionMode.COLUMN\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks if the current click was inside the current selection\r\n   * @param event The mouse event\r\n   */\r\n  public isClickInSelection(event: MouseEvent): boolean {\r\n    const coords = this._getMouseBufferCoords(event);\r\n    const start = this._model.finalSelectionStart;\r\n    const end = this._model.finalSelectionEnd;\r\n\r\n    if (!start || !end) {\r\n      return false;\r\n    }\r\n\r\n    return this._areCoordsInSelection(coords, start, end);\r\n  }\r\n\r\n  protected _areCoordsInSelection(coords: [number, number], start: [number, number], end: [number, number]): boolean {\r\n    return (coords[1] > start[1] && coords[1] < end[1]) ||\r\n        (start[1] === end[1] && coords[1] === start[1] && coords[0] >= start[0] && coords[0] < end[0]) ||\r\n        (start[1] < end[1] && coords[1] === end[1] && coords[0] < end[0]) ||\r\n        (start[1] < end[1] && coords[1] === start[1] && coords[0] >= start[0]);\r\n  }\r\n\r\n  /**\r\n   * Selects word at the current mouse event coordinates.\r\n   * @param event The mouse event.\r\n   */\r\n  public selectWordAtCursor(event: MouseEvent): void {\r\n    const coords = this._getMouseBufferCoords(event);\r\n    if (coords) {\r\n      this._selectWordAt(coords, false);\r\n      this._model.selectionEnd = null;\r\n      this.refresh(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects all text within the terminal.\r\n   */\r\n  public selectAll(): void {\r\n    this._model.isSelectAllActive = true;\r\n    this.refresh();\r\n    this._terminal.emit('selection');\r\n  }\r\n\r\n  public selectLines(start: number, end: number): void {\r\n    this._model.clearSelection();\r\n    start = Math.max(start, 0);\r\n    end = Math.min(end, this._terminal.buffer.lines.length - 1);\r\n    this._model.selectionStart = [0, start];\r\n    this._model.selectionEnd = [this._terminal.cols, end];\r\n    this.refresh();\r\n    this._terminal.emit('selection');\r\n  }\r\n\r\n  /**\r\n   * Handle the buffer being trimmed, adjust the selection position.\r\n   * @param amount The amount the buffer is being trimmed.\r\n   */\r\n  private _onTrim(amount: number): void {\r\n    const needsRefresh = this._model.onTrim(amount);\r\n    if (needsRefresh) {\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the 0-based [x, y] buffer coordinates of the current mouse event.\r\n   * @param event The mouse event.\r\n   */\r\n  private _getMouseBufferCoords(event: MouseEvent): [number, number] {\r\n    const coords = this._terminal.mouseHelper.getCoords(event, this._terminal.screenElement, this._charMeasure, this._terminal.cols, this._terminal.rows, true);\r\n    if (!coords) {\r\n      return null;\r\n    }\r\n\r\n    // Convert to 0-based\r\n    coords[0]--;\r\n    coords[1]--;\r\n\r\n    // Convert viewport coords to buffer coords\r\n    coords[1] += this._terminal.buffer.ydisp;\r\n    return coords;\r\n  }\r\n\r\n  /**\r\n   * Gets the amount the viewport should be scrolled based on how far out of the\r\n   * terminal the mouse is.\r\n   * @param event The mouse event.\r\n   */\r\n  private _getMouseEventScrollAmount(event: MouseEvent): number {\r\n    let offset = MouseHelper.getCoordsRelativeToElement(event, this._terminal.screenElement)[1];\r\n    const terminalHeight = this._terminal.rows * Math.ceil(this._charMeasure.height * this._terminal.options.lineHeight);\r\n    if (offset >= 0 && offset <= terminalHeight) {\r\n      return 0;\r\n    }\r\n    if (offset > terminalHeight) {\r\n      offset -= terminalHeight;\r\n    }\r\n\r\n    offset = Math.min(Math.max(offset, -DRAG_SCROLL_MAX_THRESHOLD), DRAG_SCROLL_MAX_THRESHOLD);\r\n    offset /= DRAG_SCROLL_MAX_THRESHOLD;\r\n    return (offset / Math.abs(offset)) + Math.round(offset * (DRAG_SCROLL_MAX_SPEED - 1));\r\n  }\r\n\r\n  /**\r\n   * Returns whether the selection manager should force selection, regardless of\r\n   * whether the terminal is in mouse events mode.\r\n   * @param event The mouse event.\r\n   */\r\n  public shouldForceSelection(event: MouseEvent): boolean {\r\n    if (Browser.isMac) {\r\n      return event.altKey && this._terminal.options.macOptionClickForcesSelection;\r\n    }\r\n\r\n    return event.shiftKey;\r\n  }\r\n\r\n  /**\r\n   * Handles te mousedown event, setting up for a new selection.\r\n   * @param event The mousedown event.\r\n   */\r\n  public onMouseDown(event: MouseEvent): void {\r\n    this._mouseDownTimeStamp = event.timeStamp;\r\n    // If we have selection, we want the context menu on right click even if the\r\n    // terminal is in mouse mode.\r\n    if (event.button === 2 && this.hasSelection) {\r\n      return;\r\n    }\r\n\r\n    // Only action the primary button\r\n    if (event.button !== 0) {\r\n      return;\r\n    }\r\n\r\n    // Allow selection when using a specific modifier key, even when disabled\r\n    if (!this._enabled) {\r\n      if (!this.shouldForceSelection(event)) {\r\n        return;\r\n      }\r\n\r\n      // Don't send the mouse down event to the current process, we want to select\r\n      event.stopPropagation();\r\n    }\r\n\r\n    // Tell the browser not to start a regular selection\r\n    event.preventDefault();\r\n\r\n    // Reset drag scroll state\r\n    this._dragScrollAmount = 0;\r\n\r\n    if (this._enabled && event.shiftKey) {\r\n      this._onIncrementalClick(event);\r\n    } else {\r\n      if (event.detail === 1) {\r\n        this._onSingleClick(event);\r\n      } else if (event.detail === 2) {\r\n        this._onDoubleClick(event);\r\n      } else if (event.detail === 3) {\r\n        this._onTripleClick(event);\r\n      }\r\n    }\r\n\r\n    this._addMouseDownListeners();\r\n    this.refresh(true);\r\n  }\r\n\r\n  /**\r\n   * Adds listeners when mousedown is triggered.\r\n   */\r\n  private _addMouseDownListeners(): void {\r\n    // Listen on the document so that dragging outside of viewport works\r\n    this._terminal.element.ownerDocument.addEventListener('mousemove', this._mouseMoveListener);\r\n    this._terminal.element.ownerDocument.addEventListener('mouseup', this._mouseUpListener);\r\n    this._dragScrollIntervalTimer = setInterval(() => this._dragScroll(), DRAG_SCROLL_INTERVAL);\r\n  }\r\n\r\n  /**\r\n   * Removes the listeners that are registered when mousedown is triggered.\r\n   */\r\n  private _removeMouseDownListeners(): void {\r\n    if (this._terminal.element.ownerDocument) {\r\n      this._terminal.element.ownerDocument.removeEventListener('mousemove', this._mouseMoveListener);\r\n      this._terminal.element.ownerDocument.removeEventListener('mouseup', this._mouseUpListener);\r\n    }\r\n    clearInterval(this._dragScrollIntervalTimer);\r\n    this._dragScrollIntervalTimer = null;\r\n  }\r\n\r\n  /**\r\n   * Performs an incremental click, setting the selection end position to the mouse\r\n   * position.\r\n   * @param event The mouse event.\r\n   */\r\n  private _onIncrementalClick(event: MouseEvent): void {\r\n    if (this._model.selectionStart) {\r\n      this._model.selectionEnd = this._getMouseBufferCoords(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs a single click, resetting relevant state and setting the selection\r\n   * start position.\r\n   * @param event The mouse event.\r\n   */\r\n  private _onSingleClick(event: MouseEvent): void {\r\n    this._model.selectionStartLength = 0;\r\n    this._model.isSelectAllActive = false;\r\n    this._activeSelectionMode = this.shouldColumnSelect(event) ? SelectionMode.COLUMN : SelectionMode.NORMAL;\r\n\r\n    // Initialize the new selection\r\n    this._model.selectionStart = this._getMouseBufferCoords(event);\r\n    if (!this._model.selectionStart) {\r\n      return;\r\n    }\r\n    this._model.selectionEnd = null;\r\n\r\n    // Ensure the line exists\r\n    const line = this._buffer.lines.get(this._model.selectionStart[1]);\r\n    if (!line) {\r\n      return;\r\n    }\r\n\r\n    // Return early if the click event is not in the buffer (eg. in scroll bar)\r\n    if (line.length >= this._model.selectionStart[0]) {\r\n      return;\r\n    }\r\n\r\n    // If the mouse is over the second half of a wide character, adjust the\r\n    // selection to cover the whole character\r\n    const char = line.get(this._model.selectionStart[0]);\r\n    if (char[CHAR_DATA_WIDTH_INDEX] === 0) {\r\n      this._model.selectionStart[0]++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs a double click, selecting the current work.\r\n   * @param event The mouse event.\r\n   */\r\n  private _onDoubleClick(event: MouseEvent): void {\r\n    const coords = this._getMouseBufferCoords(event);\r\n    if (coords) {\r\n      this._activeSelectionMode = SelectionMode.WORD;\r\n      this._selectWordAt(coords, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs a triple click, selecting the current line and activating line\r\n   * select mode.\r\n   * @param event The mouse event.\r\n   */\r\n  private _onTripleClick(event: MouseEvent): void {\r\n    const coords = this._getMouseBufferCoords(event);\r\n    if (coords) {\r\n      this._activeSelectionMode = SelectionMode.LINE;\r\n      this._selectLineAt(coords[1]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns whether the selection manager should operate in column select mode\r\n   * @param event the mouse or keyboard event\r\n   */\r\n  public shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean {\r\n    return event.altKey && !(Browser.isMac && this._terminal.options.macOptionClickForcesSelection);\r\n  }\r\n\r\n  /**\r\n   * Handles the mousemove event when the mouse button is down, recording the\r\n   * end of the selection and refreshing the selection.\r\n   * @param event The mousemove event.\r\n   */\r\n  private _onMouseMove(event: MouseEvent): void {\r\n    // If the mousemove listener is active it means that a selection is\r\n    // currently being made, we should stop propagation to prevent mouse events\r\n    // to be sent to the pty.\r\n    event.stopImmediatePropagation();\r\n\r\n    // Record the previous position so we know whether to redraw the selection\r\n    // at the end.\r\n    const previousSelectionEnd = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;\r\n\r\n    // Set the initial selection end based on the mouse coordinates\r\n    this._model.selectionEnd = this._getMouseBufferCoords(event);\r\n    if (!this._model.selectionEnd) {\r\n      this.refresh(true);\r\n      return;\r\n    }\r\n\r\n    // Select the entire line if line select mode is active.\r\n    if (this._activeSelectionMode === SelectionMode.LINE) {\r\n      if (this._model.selectionEnd[1] < this._model.selectionStart[1]) {\r\n        this._model.selectionEnd[0] = 0;\r\n      } else {\r\n        this._model.selectionEnd[0] = this._terminal.cols;\r\n      }\r\n    } else if (this._activeSelectionMode === SelectionMode.WORD) {\r\n      this._selectToWordAt(this._model.selectionEnd);\r\n    }\r\n\r\n    // Determine the amount of scrolling that will happen.\r\n    this._dragScrollAmount = this._getMouseEventScrollAmount(event);\r\n\r\n    // If the cursor was above or below the viewport, make sure it's at the\r\n    // start or end of the viewport respectively. This should only happen when\r\n    // NOT in column select mode.\r\n    if (this._activeSelectionMode !== SelectionMode.COLUMN) {\r\n      if (this._dragScrollAmount > 0) {\r\n        this._model.selectionEnd[0] = this._terminal.cols;\r\n      } else if (this._dragScrollAmount < 0) {\r\n        this._model.selectionEnd[0] = 0;\r\n      }\r\n    }\r\n\r\n    // If the character is a wide character include the cell to the right in the\r\n    // selection. Note that selections at the very end of the line will never\r\n    // have a character.\r\n    if (this._model.selectionEnd[1] < this._buffer.lines.length) {\r\n      const char = this._buffer.lines.get(this._model.selectionEnd[1]).get(this._model.selectionEnd[0]);\r\n      if (char && char[CHAR_DATA_WIDTH_INDEX] === 0) {\r\n        this._model.selectionEnd[0]++;\r\n      }\r\n    }\r\n\r\n    // Only draw here if the selection changes.\r\n    if (!previousSelectionEnd ||\r\n      previousSelectionEnd[0] !== this._model.selectionEnd[0] ||\r\n      previousSelectionEnd[1] !== this._model.selectionEnd[1]) {\r\n      this.refresh(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The callback that occurs every DRAG_SCROLL_INTERVAL ms that does the\r\n   * scrolling of the viewport.\r\n   */\r\n  private _dragScroll(): void {\r\n    if (this._dragScrollAmount) {\r\n      this._terminal.scrollLines(this._dragScrollAmount, false);\r\n      // Re-evaluate selection\r\n      // If the cursor was above or below the viewport, make sure it's at the\r\n      // start or end of the viewport respectively. This should only happen when\r\n      // NOT in column select mode.\r\n      if (this._dragScrollAmount > 0) {\r\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\r\n          this._model.selectionEnd[0] = this._terminal.cols;\r\n        }\r\n        this._model.selectionEnd[1] = Math.min(this._terminal.buffer.ydisp + this._terminal.rows, this._terminal.buffer.lines.length - 1);\r\n      } else {\r\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\r\n          this._model.selectionEnd[0] = 0;\r\n        }\r\n        this._model.selectionEnd[1] = this._terminal.buffer.ydisp;\r\n      }\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the mouseup event, removing the mousedown listeners.\r\n   * @param event The mouseup event.\r\n   */\r\n  private _onMouseUp(event: MouseEvent): void {\r\n    const timeElapsed = event.timeStamp - this._mouseDownTimeStamp;\r\n\r\n    this._removeMouseDownListeners();\r\n\r\n    if (this.selectionText.length <= 1 && timeElapsed < ALT_CLICK_MOVE_CURSOR_TIME) {\r\n      (new AltClickHandler(event, this._terminal)).move();\r\n    } else if (this.hasSelection) {\r\n      this._terminal.emit('selection');\r\n    }\r\n  }\r\n\r\n  private _onBufferActivate(e: {activeBuffer: IBuffer, inactiveBuffer: IBuffer}): void {\r\n    this.clearSelection();\r\n    // Only adjust the selection on trim, shiftElements is rarely used (only in\r\n    // reverseIndex) and delete in a splice is only ever used when the same\r\n    // number of elements was just added. Given this is could actually be\r\n    // beneficial to leave the selection as is for these cases.\r\n    e.inactiveBuffer.lines.off('trim', this._trimListener);\r\n    e.activeBuffer.lines.on('trim', this._trimListener);\r\n  }\r\n\r\n  /**\r\n   * Converts a viewport column to the character index on the buffer line, the\r\n   * latter takes into account wide characters.\r\n   * @param coords The coordinates to find the 2 index for.\r\n   */\r\n  private _convertViewportColToCharacterIndex(bufferLine: IBufferLine, coords: [number, number]): number {\r\n    let charIndex = coords[0];\r\n    for (let i = 0; coords[0] >= i; i++) {\r\n      const char = bufferLine.get(i);\r\n      if (char[CHAR_DATA_WIDTH_INDEX] === 0) {\r\n        // Wide characters aren't included in the line string so decrement the\r\n        // index so the index is back on the wide character.\r\n        charIndex--;\r\n      } else if (char[CHAR_DATA_CHAR_INDEX].length > 1 && coords[0] !== i) {\r\n        // Emojis take up multiple characters, so adjust accordingly. For these\r\n        // we don't want ot include the character at the column as we're\r\n        // returning the start index in the string, not the end index.\r\n        charIndex += char[CHAR_DATA_CHAR_INDEX].length - 1;\r\n      }\r\n    }\r\n    return charIndex;\r\n  }\r\n\r\n  public setSelection(col: number, row: number, length: number): void {\r\n    this._model.clearSelection();\r\n    this._removeMouseDownListeners();\r\n    this._model.selectionStart = [col, row];\r\n    this._model.selectionStartLength = length;\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * Gets positional information for the word at the coordinated specified.\r\n   * @param coords The coordinates to get the word at.\r\n   */\r\n  private _getWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean, followWrappedLinesAbove: boolean = true, followWrappedLinesBelow: boolean = true): IWordPosition {\r\n    // Ensure coords are within viewport (eg. not within scroll bar)\r\n    if (coords[0] >= this._terminal.cols) {\r\n      return null;\r\n    }\r\n\r\n    const bufferLine = this._buffer.lines.get(coords[1]);\r\n    if (!bufferLine) {\r\n      return null;\r\n    }\r\n\r\n    const line = this._buffer.translateBufferLineToString(coords[1], false);\r\n\r\n    // Get actual index, taking into consideration wide characters\r\n    let startIndex = this._convertViewportColToCharacterIndex(bufferLine, coords);\r\n    let endIndex = startIndex;\r\n\r\n    // Record offset to be used later\r\n    const charOffset = coords[0] - startIndex;\r\n    let leftWideCharCount = 0;\r\n    let rightWideCharCount = 0;\r\n    let leftLongCharOffset = 0;\r\n    let rightLongCharOffset = 0;\r\n\r\n    if (line.charAt(startIndex) === ' ') {\r\n      // Expand until non-whitespace is hit\r\n      while (startIndex > 0 && line.charAt(startIndex - 1) === ' ') {\r\n        startIndex--;\r\n      }\r\n      while (endIndex < line.length && line.charAt(endIndex + 1) === ' ') {\r\n        endIndex++;\r\n      }\r\n    } else {\r\n      // Expand until whitespace is hit. This algorithm works by scanning left\r\n      // and right from the starting position, keeping both the index format\r\n      // (line) and the column format (bufferLine) in sync. When a wide\r\n      // character is hit, it is recorded and the column index is adjusted.\r\n      let startCol = coords[0];\r\n      let endCol = coords[0];\r\n\r\n      // Consider the initial position, skip it and increment the wide char\r\n      // variable\r\n      if (bufferLine.get(startCol)[CHAR_DATA_WIDTH_INDEX] === 0) {\r\n        leftWideCharCount++;\r\n        startCol--;\r\n      }\r\n      if (bufferLine.get(endCol)[CHAR_DATA_WIDTH_INDEX] === 2) {\r\n        rightWideCharCount++;\r\n        endCol++;\r\n      }\r\n\r\n      // Adjust the end index for characters whose length are > 1 (emojis)\r\n      if (bufferLine.get(endCol)[CHAR_DATA_CHAR_INDEX].length > 1) {\r\n        rightLongCharOffset += bufferLine.get(endCol)[CHAR_DATA_CHAR_INDEX].length - 1;\r\n        endIndex += bufferLine.get(endCol)[CHAR_DATA_CHAR_INDEX].length - 1;\r\n      }\r\n\r\n      // Expand the string in both directions until a space is hit\r\n      while (startCol > 0 && startIndex > 0 && !this._isCharWordSeparator(bufferLine.get(startCol - 1))) {\r\n        const char = bufferLine.get(startCol - 1);\r\n        if (char[CHAR_DATA_WIDTH_INDEX] === 0) {\r\n          // If the next character is a wide char, record it and skip the column\r\n          leftWideCharCount++;\r\n          startCol--;\r\n        } else if (char[CHAR_DATA_CHAR_INDEX].length > 1) {\r\n          // If the next character's string is longer than 1 char (eg. emoji),\r\n          // adjust the index\r\n          leftLongCharOffset += char[CHAR_DATA_CHAR_INDEX].length - 1;\r\n          startIndex -= char[CHAR_DATA_CHAR_INDEX].length - 1;\r\n        }\r\n        startIndex--;\r\n        startCol--;\r\n      }\r\n      while (endCol < bufferLine.length && endIndex + 1 < line.length && !this._isCharWordSeparator(bufferLine.get(endCol + 1))) {\r\n        const char = bufferLine.get(endCol + 1);\r\n        if (char[CHAR_DATA_WIDTH_INDEX] === 2) {\r\n          // If the next character is a wide char, record it and skip the column\r\n          rightWideCharCount++;\r\n          endCol++;\r\n        } else if (char[CHAR_DATA_CHAR_INDEX].length > 1) {\r\n          // If the next character's string is longer than 1 char (eg. emoji),\r\n          // adjust the index\r\n          rightLongCharOffset += char[CHAR_DATA_CHAR_INDEX].length - 1;\r\n          endIndex += char[CHAR_DATA_CHAR_INDEX].length - 1;\r\n        }\r\n        endIndex++;\r\n        endCol++;\r\n      }\r\n    }\r\n\r\n    // Incremenet the end index so it is at the start of the next character\r\n    endIndex++;\r\n\r\n    // Calculate the start _column_, converting the the string indexes back to\r\n    // column coordinates.\r\n    let start =\r\n        startIndex // The index of the selection's start char in the line string\r\n        + charOffset // The difference between the initial char's column and index\r\n        - leftWideCharCount // The number of wide chars left of the initial char\r\n        + leftLongCharOffset; // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\r\n\r\n    // Calculate the length in _columns_, converting the the string indexes back\r\n    // to column coordinates.\r\n    let length = Math.min(this._terminal.cols, // Disallow lengths larger than the terminal cols\r\n        endIndex // The index of the selection's end char in the line string\r\n        - startIndex // The index of the selection's start char in the line string\r\n        + leftWideCharCount // The number of wide chars left of the initial char\r\n        + rightWideCharCount // The number of wide chars right of the initial char (inclusive)\r\n        - leftLongCharOffset // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\r\n        - rightLongCharOffset); // The number of additional chars right of the initial char (inclusive) added by columns with strings longer than 1 (emojis)\r\n\r\n    if (!allowWhitespaceOnlySelection && line.slice(startIndex, endIndex).trim() === '') {\r\n      return null;\r\n    }\r\n\r\n    // Recurse upwards if the line is wrapped and the word wraps to the above line\r\n    if (followWrappedLinesAbove) {\r\n      if (start === 0 && bufferLine.get(0)[CHAR_DATA_CODE_INDEX] !== 32 /*' '*/) {\r\n        const previousBufferLine = this._buffer.lines.get(coords[1] - 1);\r\n        if (previousBufferLine && bufferLine.isWrapped && previousBufferLine.get(this._terminal.cols - 1)[CHAR_DATA_CODE_INDEX] !== 32 /*' '*/) {\r\n          const previousLineWordPosition = this._getWordAt([this._terminal.cols - 1, coords[1] - 1], false, true, false);\r\n          if (previousLineWordPosition) {\r\n            const offset = this._terminal.cols - previousLineWordPosition.start;\r\n            start -= offset;\r\n            length += offset;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Recurse downwards if the line is wrapped and the word wraps to the next line\r\n    if (followWrappedLinesBelow) {\r\n      if (start + length === this._terminal.cols && bufferLine.get(this._terminal.cols - 1)[CHAR_DATA_CODE_INDEX] !== 32 /*' '*/) {\r\n        const nextBufferLine = this._buffer.lines.get(coords[1] + 1);\r\n        if (nextBufferLine && nextBufferLine.isWrapped && nextBufferLine.get(0)[CHAR_DATA_CODE_INDEX] !== 32 /*' '*/) {\r\n          const nextLineWordPosition = this._getWordAt([0, coords[1] + 1], false, false, true);\r\n          if (nextLineWordPosition) {\r\n            length += nextLineWordPosition.length;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return { start, length };\r\n  }\r\n\r\n  /**\r\n   * Selects the word at the coordinates specified.\r\n   * @param coords The coordinates to get the word at.\r\n   * @param allowWhitespaceOnlySelection If whitespace should be selected\r\n   */\r\n  protected _selectWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean): void {\r\n    const wordPosition = this._getWordAt(coords, allowWhitespaceOnlySelection);\r\n    if (wordPosition) {\r\n      // Adjust negative start value\r\n      while (wordPosition.start < 0) {\r\n        wordPosition.start += this._terminal.cols;\r\n        coords[1]--;\r\n      }\r\n      this._model.selectionStart = [wordPosition.start, coords[1]];\r\n      this._model.selectionStartLength = wordPosition.length;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the selection end to the word at the coordinated specified.\r\n   * @param coords The coordinates to get the word at.\r\n   */\r\n  private _selectToWordAt(coords: [number, number]): void {\r\n    const wordPosition = this._getWordAt(coords, true);\r\n    if (wordPosition) {\r\n      let endRow = coords[1];\r\n\r\n      // Adjust negative start value\r\n      while (wordPosition.start < 0) {\r\n        wordPosition.start += this._terminal.cols;\r\n        endRow--;\r\n      }\r\n\r\n      // Adjust wrapped length value, this only needs to happen when values are reversed as in that\r\n      // case we're interested in the start of the word, not the end\r\n      if (!this._model.areSelectionValuesReversed()) {\r\n        while (wordPosition.start + wordPosition.length > this._terminal.cols) {\r\n          wordPosition.length -= this._terminal.cols;\r\n          endRow++;\r\n        }\r\n      }\r\n\r\n      this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? wordPosition.start : wordPosition.start + wordPosition.length, endRow];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets whether the character is considered a word separator by the select\r\n   * word logic.\r\n   * @param char The character to check.\r\n   */\r\n  private _isCharWordSeparator(charData: CharData): boolean {\r\n    // Zero width characters are never separators as they are always to the\r\n    // right of wide characters\r\n    if (charData[CHAR_DATA_WIDTH_INDEX] === 0) {\r\n      return false;\r\n    }\r\n    return WORD_SEPARATORS.indexOf(charData[CHAR_DATA_CHAR_INDEX]) >= 0;\r\n  }\r\n\r\n  /**\r\n   * Selects the line specified.\r\n   * @param line The line index.\r\n   */\r\n  protected _selectLineAt(line: number): void {\r\n    const wrappedRange = this._buffer.getWrappedRangeForLine(line);\r\n    this._model.selectionStart = [0, wrappedRange.first];\r\n    this._model.selectionEnd = [this._terminal.cols, wrappedRange.last];\r\n    this._model.selectionStartLength = 0;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IMouseZoneManager } from './ui/Types';\r\nimport { ILinkHoverEvent, ILinkMatcher, LinkMatcherHandler, LinkHoverEventTypes, ILinkMatcherOptions, ILinkifier, ITerminal, IBufferStringIteratorResult } from './Types';\r\nimport { MouseZone } from './ui/MouseZoneManager';\r\nimport { EventEmitter } from './common/EventEmitter';\r\nimport { CHAR_DATA_ATTR_INDEX } from './Buffer';\r\nimport { getStringCellWidth } from './CharWidth';\r\n\r\n/**\r\n * The Linkifier applies links to rows shortly after they have been refreshed.\r\n */\r\nexport class Linkifier extends EventEmitter implements ILinkifier {\r\n  /**\r\n   * The time to wait after a row is changed before it is linkified. This prevents\r\n   * the costly operation of searching every row multiple times, potentially a\r\n   * huge amount of times.\r\n   */\r\n  protected static readonly TIME_BEFORE_LINKIFY = 200;\r\n\r\n  /**\r\n   * Limit of the unwrapping line expansion (overscan) at the top and bottom\r\n   * of the actual viewport in ASCII characters.\r\n   * A limit of 2000 should match most sane urls.\r\n   */\r\n  protected static readonly OVERSCAN_CHAR_LIMIT = 2000;\r\n\r\n  protected _linkMatchers: ILinkMatcher[] = [];\r\n\r\n  private _mouseZoneManager: IMouseZoneManager;\r\n  private _rowsTimeoutId: number;\r\n  private _nextLinkMatcherId = 0;\r\n  private _rowsToLinkify: { start: number, end: number };\r\n\r\n  constructor(\r\n    protected _terminal: ITerminal\r\n  ) {\r\n    super();\r\n    this._rowsToLinkify = {\r\n      start: null,\r\n      end: null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Attaches the linkifier to the DOM, enabling linkification.\r\n   * @param mouseZoneManager The mouse zone manager to register link zones with.\r\n   */\r\n  public attachToDom(mouseZoneManager: IMouseZoneManager): void {\r\n    this._mouseZoneManager = mouseZoneManager;\r\n  }\r\n\r\n  /**\r\n   * Queue linkification on a set of rows.\r\n   * @param start The row to linkify from (inclusive).\r\n   * @param end The row to linkify to (inclusive).\r\n   */\r\n  public linkifyRows(start: number, end: number): void {\r\n    // Don't attempt linkify if not yet attached to DOM\r\n    if (!this._mouseZoneManager) {\r\n      return;\r\n    }\r\n\r\n    // Increase range to linkify\r\n    if (this._rowsToLinkify.start === null) {\r\n      this._rowsToLinkify.start = start;\r\n      this._rowsToLinkify.end = end;\r\n    } else {\r\n      this._rowsToLinkify.start = Math.min(this._rowsToLinkify.start, start);\r\n      this._rowsToLinkify.end = Math.max(this._rowsToLinkify.end, end);\r\n    }\r\n\r\n    // Clear out any existing links on this row range\r\n    this._mouseZoneManager.clearAll(start, end);\r\n\r\n    // Restart timer\r\n    if (this._rowsTimeoutId) {\r\n      clearTimeout(this._rowsTimeoutId);\r\n    }\r\n    this._rowsTimeoutId = <number><any>setTimeout(() => this._linkifyRows(), Linkifier.TIME_BEFORE_LINKIFY);\r\n  }\r\n\r\n  /**\r\n   * Linkifies the rows requested.\r\n   */\r\n  private _linkifyRows(): void {\r\n    this._rowsTimeoutId = null;\r\n    const buffer = this._terminal.buffer;\r\n\r\n    // Ensure the start row exists\r\n    const absoluteRowIndexStart = buffer.ydisp + this._rowsToLinkify.start;\r\n    if (absoluteRowIndexStart >= buffer.lines.length) {\r\n      return;\r\n    }\r\n\r\n    // Invalidate bad end row values (if a resize happened)\r\n    const absoluteRowIndexEnd = buffer.ydisp + Math.min(this._rowsToLinkify.end, this._terminal.rows) + 1;\r\n\r\n    // Iterate over the range of unwrapped content strings within start..end\r\n    // (excluding).\r\n    // _doLinkifyRow gets full unwrapped lines with the start row as buffer offset\r\n    // for every matcher.\r\n    // The unwrapping is needed to also match content that got wrapped across\r\n    // several buffer lines. To avoid a worst case scenario where the whole buffer\r\n    // contains just a single unwrapped string we limit this line expansion beyond\r\n    // the viewport to +OVERSCAN_CHAR_LIMIT chars (overscan) at top and bottom.\r\n    // This comes with the tradeoff that matches longer than OVERSCAN_CHAR_LIMIT\r\n    // chars will not match anymore at the viewport borders.\r\n    const overscanLineLimit = Math.ceil(Linkifier.OVERSCAN_CHAR_LIMIT / this._terminal.cols);\r\n    const iterator = this._terminal.buffer.iterator(\r\n      false, absoluteRowIndexStart, absoluteRowIndexEnd, overscanLineLimit, overscanLineLimit);\r\n    while (iterator.hasNext()) {\r\n      const lineData: IBufferStringIteratorResult = iterator.next();\r\n      for (let i = 0; i < this._linkMatchers.length; i++) {\r\n        this._doLinkifyRow(lineData.range.first, lineData.content, this._linkMatchers[i]);\r\n      }\r\n    }\r\n\r\n    this._rowsToLinkify.start = null;\r\n    this._rowsToLinkify.end = null;\r\n  }\r\n\r\n  /**\r\n   * Registers a link matcher, allowing custom link patterns to be matched and\r\n   * handled.\r\n   * @param regex The regular expression to search for. Specifically, this\r\n   * searches the textContent of the rows. You will want to use \\s to match a\r\n   * space ' ' character for example.\r\n   * @param handler The callback when the link is called.\r\n   * @param options Options for the link matcher.\r\n   * @return The ID of the new matcher, this can be used to deregister.\r\n   */\r\n  public registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options: ILinkMatcherOptions = {}): number {\r\n    if (!handler) {\r\n      throw new Error('handler must be defined');\r\n    }\r\n    const matcher: ILinkMatcher = {\r\n      id: this._nextLinkMatcherId++,\r\n      regex,\r\n      handler,\r\n      matchIndex: options.matchIndex,\r\n      validationCallback: options.validationCallback,\r\n      hoverTooltipCallback: options.tooltipCallback,\r\n      hoverLeaveCallback: options.leaveCallback,\r\n      willLinkActivate: options.willLinkActivate,\r\n      priority: options.priority || 0\r\n    };\r\n    this._addLinkMatcherToList(matcher);\r\n    return matcher.id;\r\n  }\r\n\r\n  /**\r\n   * Inserts a link matcher to the list in the correct position based on the\r\n   * priority of each link matcher. New link matchers of equal priority are\r\n   * considered after older link matchers.\r\n   * @param matcher The link matcher to be added.\r\n   */\r\n  private _addLinkMatcherToList(matcher: ILinkMatcher): void {\r\n    if (this._linkMatchers.length === 0) {\r\n      this._linkMatchers.push(matcher);\r\n      return;\r\n    }\r\n\r\n    for (let i = this._linkMatchers.length - 1; i >= 0; i--) {\r\n      if (matcher.priority <= this._linkMatchers[i].priority) {\r\n        this._linkMatchers.splice(i + 1, 0, matcher);\r\n        return;\r\n      }\r\n    }\r\n\r\n    this._linkMatchers.splice(0, 0, matcher);\r\n  }\r\n\r\n  /**\r\n   * Deregisters a link matcher if it has been registered.\r\n   * @param matcherId The link matcher's ID (returned after register)\r\n   * @return Whether a link matcher was found and deregistered.\r\n   */\r\n  public deregisterLinkMatcher(matcherId: number): boolean {\r\n    for (let i = 0; i < this._linkMatchers.length; i++) {\r\n      if (this._linkMatchers[i].id === matcherId) {\r\n        this._linkMatchers.splice(i, 1);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Linkifies a row given a specific handler.\r\n   * @param rowIndex The row index to linkify (absolute index).\r\n   * @param text string content of the unwrapped row.\r\n   * @param matcher The link matcher for this line.\r\n   */\r\n  private _doLinkifyRow(rowIndex: number, text: string, matcher: ILinkMatcher): void {\r\n    // clone regex to do a global search on text\r\n    const rex = new RegExp(matcher.regex.source, matcher.regex.flags + 'g');\r\n    let match;\r\n    let stringIndex = -1;\r\n    while ((match = rex.exec(text)) !== null) {\r\n      const uri = match[typeof matcher.matchIndex !== 'number' ? 0 : matcher.matchIndex];\r\n      if (!uri) {\r\n        // something matched but does not comply with the given matchIndex\r\n        // since this is most likely a bug the regex itself we simply do nothing here\r\n        // DEBUG: print match and throw\r\n        if ((<any>this._terminal).debug) {\r\n          console.log({match, matcher});\r\n          throw new Error('match found without corresponding matchIndex');\r\n        }\r\n        break;\r\n      }\r\n\r\n      // Get index, match.index is for the outer match which includes negated chars\r\n      // therefore we cannot use match.index directly, instead we search the position\r\n      // of the match group in text again\r\n      // also correct regex and string search offsets for the next loop run\r\n      stringIndex = text.indexOf(uri, stringIndex + 1);\r\n      rex.lastIndex = stringIndex + uri.length;\r\n      if (stringIndex < 0) {\r\n        // invalid stringIndex (should not have happened)\r\n        break;\r\n      }\r\n\r\n      // get the buffer index as [absolute row, col] for the match\r\n      const bufferIndex = this._terminal.buffer.stringIndexToBufferIndex(rowIndex, stringIndex);\r\n      if (bufferIndex[0] < 0) {\r\n        // invalid bufferIndex (should not have happened)\r\n        break;\r\n      }\r\n\r\n      const line = this._terminal.buffer.lines.get(bufferIndex[0]);\r\n      const char = line.get(bufferIndex[1]);\r\n      let fg: number | undefined;\r\n      if (char) {\r\n        const attr: number = char[CHAR_DATA_ATTR_INDEX];\r\n        fg = (attr >> 9) & 0x1ff;\r\n      }\r\n\r\n      if (matcher.validationCallback) {\r\n        matcher.validationCallback(uri, isValid => {\r\n          // Discard link if the line has already changed\r\n          if (this._rowsTimeoutId) {\r\n            return;\r\n          }\r\n          if (isValid) {\r\n            this._addLink(bufferIndex[1], bufferIndex[0] - this._terminal.buffer.ydisp, uri, matcher, fg);\r\n          }\r\n        });\r\n      } else {\r\n        this._addLink(bufferIndex[1], bufferIndex[0] - this._terminal.buffer.ydisp, uri, matcher, fg);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers a link to the mouse zone manager.\r\n   * @param x The column the link starts.\r\n   * @param y The row the link is on.\r\n   * @param uri The URI of the link.\r\n   * @param matcher The link matcher for the link.\r\n   * @param fg The link color for hover event.\r\n   */\r\n  private _addLink(x: number, y: number, uri: string, matcher: ILinkMatcher, fg: number): void {\r\n    const width = getStringCellWidth(uri);\r\n    const x1 = x % this._terminal.cols;\r\n    const y1 = y + Math.floor(x / this._terminal.cols);\r\n    let x2 = (x1 + width) % this._terminal.cols;\r\n    let y2 = y1 + Math.floor((x1 + width) / this._terminal.cols);\r\n    if (x2 === 0) {\r\n      x2 = this._terminal.cols;\r\n      y2--;\r\n    }\r\n\r\n    this._mouseZoneManager.add(new MouseZone(\r\n      x1 + 1,\r\n      y1 + 1,\r\n      x2 + 1,\r\n      y2 + 1,\r\n      e => {\r\n        if (matcher.handler) {\r\n          return matcher.handler(e, uri);\r\n        }\r\n        window.open(uri, '_blank');\r\n      },\r\n      e => {\r\n        this.emit(LinkHoverEventTypes.HOVER, this._createLinkHoverEvent(x1, y1, x2, y2, fg));\r\n        this._terminal.element.classList.add('xterm-cursor-pointer');\r\n      },\r\n      e => {\r\n        this.emit(LinkHoverEventTypes.TOOLTIP, this._createLinkHoverEvent(x1, y1, x2, y2, fg));\r\n        if (matcher.hoverTooltipCallback) {\r\n          matcher.hoverTooltipCallback(e, uri);\r\n        }\r\n      },\r\n      () => {\r\n        this.emit(LinkHoverEventTypes.LEAVE, this._createLinkHoverEvent(x1, y1, x2, y2, fg));\r\n        this._terminal.element.classList.remove('xterm-cursor-pointer');\r\n        if (matcher.hoverLeaveCallback) {\r\n          matcher.hoverLeaveCallback();\r\n        }\r\n      },\r\n      e => {\r\n        if (matcher.willLinkActivate) {\r\n          return matcher.willLinkActivate(e, uri);\r\n        }\r\n        return true;\r\n      }\r\n    ));\r\n  }\r\n\r\n  private _createLinkHoverEvent(x1: number, y1: number, x2: number, y2: number, fg: number): ILinkHoverEvent {\r\n    return { x1, y1, x2, y2, cols: this._terminal.cols, fg };\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\r\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\r\n * @license MIT\r\n */\r\n\r\nimport { IInputHandler, IDcsHandler, IEscapeSequenceParser, IBuffer, IInputHandlingTerminal } from './Types';\r\nimport { C0, C1 } from './common/data/EscapeSequences';\r\nimport { CHARSETS, DEFAULT_CHARSET } from './core/data/Charsets';\r\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_CODE_INDEX, DEFAULT_ATTR, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE } from './Buffer';\r\nimport { FLAGS } from './renderer/Types';\r\nimport { wcwidth } from './CharWidth';\r\nimport { EscapeSequenceParser } from './EscapeSequenceParser';\r\nimport { ICharset } from './core/Types';\r\nimport { IDisposable } from 'xterm';\r\nimport { Disposable } from './common/Lifecycle';\r\nimport { concat } from './common/TypedArrayUtils';\r\nimport { StringToUtf32, stringFromCodePoint, utf32ToString } from './core/input/TextDecoder';\r\n\r\n/**\r\n * Map collect to glevel. Used in `selectCharset`.\r\n */\r\nconst GLEVEL: {[key: string]: number} = {'(': 0, ')': 1, '*': 2, '+': 3, '-': 1, '.': 2};\r\n\r\n\r\n/**\r\n * DCS subparser implementations\r\n */\r\n\r\n/**\r\n * DCS $ q Pt ST\r\n *   DECRQSS (https://vt100.net/docs/vt510-rm/DECRQSS.html)\r\n *   Request Status String (DECRQSS), VT420 and up.\r\n *   Response: DECRPSS (https://vt100.net/docs/vt510-rm/DECRPSS.html)\r\n */\r\nclass DECRQSS implements IDcsHandler {\r\n  private _data: Uint32Array = new Uint32Array(0);\r\n\r\n  constructor(private _terminal: any) { }\r\n\r\n  hook(collect: string, params: number[], flag: number): void {\r\n    this._data = new Uint32Array(0);\r\n  }\r\n\r\n  put(data: Uint32Array, start: number, end: number): void {\r\n    this._data = concat(this._data, data.subarray(start, end));\r\n  }\r\n\r\n  unhook(): void {\r\n    const data = utf32ToString(this._data);\r\n    this._data = new Uint32Array(0);\r\n    switch (data) {\r\n      // valid: DCS 1 $ r Pt ST (xterm)\r\n      case '\"q': // DECSCA\r\n        return this._terminal.handler(`${C0.ESC}P1$r0\"q${C0.ESC}\\\\`);\r\n      case '\"p': // DECSCL\r\n        return this._terminal.handler(`${C0.ESC}P1$r61\"p${C0.ESC}\\\\`);\r\n      case 'r': // DECSTBM\r\n        const pt = '' + (this._terminal.buffer.scrollTop + 1) +\r\n                ';' + (this._terminal.buffer.scrollBottom + 1) + 'r';\r\n        return this._terminal.handler(`${C0.ESC}P1$r${pt}${C0.ESC}\\\\`);\r\n      case 'm': // SGR\r\n        // TODO: report real settings instead of 0m\r\n        return this._terminal.handler(`${C0.ESC}P1$r0m${C0.ESC}\\\\`);\r\n      case ' q': // DECSCUSR\r\n        const STYLES: {[key: string]: number} = {'block': 2, 'underline': 4, 'bar': 6};\r\n        let style = STYLES[this._terminal.getOption('cursorStyle')];\r\n        style -= this._terminal.getOption('cursorBlink');\r\n        return this._terminal.handler(`${C0.ESC}P1$r${style} q${C0.ESC}\\\\`);\r\n      default:\r\n        // invalid: DCS 0 $ r Pt ST (xterm)\r\n        this._terminal.error('Unknown DCS $q %s', data);\r\n        this._terminal.handler(`${C0.ESC}P0$r${C0.ESC}\\\\`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * DCS Ps; Ps| Pt ST\r\n *   DECUDK (https://vt100.net/docs/vt510-rm/DECUDK.html)\r\n *   not supported\r\n */\r\n\r\n/**\r\n * DCS + q Pt ST (xterm)\r\n *   Request Terminfo String\r\n *   not implemented\r\n */\r\n\r\n/**\r\n * DCS + p Pt ST (xterm)\r\n *   Set Terminfo Data\r\n *   not supported\r\n */\r\n\r\n\r\n\r\n/**\r\n * The terminal's standard implementation of IInputHandler, this handles all\r\n * input from the Parser.\r\n *\r\n * Refer to http://invisible-island.net/xterm/ctlseqs/ctlseqs.html to understand\r\n * each function's header comment.\r\n */\r\nexport class InputHandler extends Disposable implements IInputHandler {\r\n  private _parseBuffer: Uint32Array = new Uint32Array(4096);\r\n  private _stringDecoder: StringToUtf32 = new StringToUtf32();\r\n\r\n  constructor(\r\n      protected _terminal: IInputHandlingTerminal,\r\n      private _parser: IEscapeSequenceParser = new EscapeSequenceParser())\r\n  {\r\n    super();\r\n\r\n    this.register(this._parser);\r\n\r\n    /**\r\n     * custom fallback handlers\r\n     */\r\n    this._parser.setCsiHandlerFallback((collect: string, params: number[], flag: number) => {\r\n      this._terminal.error('Unknown CSI code: ', { collect, params, flag: String.fromCharCode(flag) });\r\n    });\r\n    this._parser.setEscHandlerFallback((collect: string, flag: number) => {\r\n      this._terminal.error('Unknown ESC code: ', { collect, flag: String.fromCharCode(flag) });\r\n    });\r\n    this._parser.setExecuteHandlerFallback((code: number) => {\r\n      this._terminal.error('Unknown EXECUTE code: ', { code });\r\n    });\r\n    this._parser.setOscHandlerFallback((identifier: number, data: string) => {\r\n      this._terminal.error('Unknown OSC code: ', { identifier, data });\r\n    });\r\n\r\n    /**\r\n     * print handler\r\n     */\r\n    this._parser.setPrintHandler((data, start, end): void => this.print(data, start, end));\r\n\r\n    /**\r\n     * CSI handler\r\n     */\r\n    this._parser.setCsiHandler('@', (params, collect) => this.insertChars(params));\r\n    this._parser.setCsiHandler('A', (params, collect) => this.cursorUp(params));\r\n    this._parser.setCsiHandler('B', (params, collect) => this.cursorDown(params));\r\n    this._parser.setCsiHandler('C', (params, collect) => this.cursorForward(params));\r\n    this._parser.setCsiHandler('D', (params, collect) => this.cursorBackward(params));\r\n    this._parser.setCsiHandler('E', (params, collect) => this.cursorNextLine(params));\r\n    this._parser.setCsiHandler('F', (params, collect) => this.cursorPrecedingLine(params));\r\n    this._parser.setCsiHandler('G', (params, collect) => this.cursorCharAbsolute(params));\r\n    this._parser.setCsiHandler('H', (params, collect) => this.cursorPosition(params));\r\n    this._parser.setCsiHandler('I', (params, collect) => this.cursorForwardTab(params));\r\n    this._parser.setCsiHandler('J', (params, collect) => this.eraseInDisplay(params));\r\n    this._parser.setCsiHandler('K', (params, collect) => this.eraseInLine(params));\r\n    this._parser.setCsiHandler('L', (params, collect) => this.insertLines(params));\r\n    this._parser.setCsiHandler('M', (params, collect) => this.deleteLines(params));\r\n    this._parser.setCsiHandler('P', (params, collect) => this.deleteChars(params));\r\n    this._parser.setCsiHandler('S', (params, collect) => this.scrollUp(params));\r\n    this._parser.setCsiHandler('T', (params, collect) => this.scrollDown(params, collect));\r\n    this._parser.setCsiHandler('X', (params, collect) => this.eraseChars(params));\r\n    this._parser.setCsiHandler('Z', (params, collect) => this.cursorBackwardTab(params));\r\n    this._parser.setCsiHandler('`', (params, collect) => this.charPosAbsolute(params));\r\n    this._parser.setCsiHandler('a', (params, collect) => this.hPositionRelative(params));\r\n    this._parser.setCsiHandler('b', (params, collect) => this.repeatPrecedingCharacter(params));\r\n    this._parser.setCsiHandler('c', (params, collect) => this.sendDeviceAttributes(params, collect));\r\n    this._parser.setCsiHandler('d', (params, collect) => this.linePosAbsolute(params));\r\n    this._parser.setCsiHandler('e', (params, collect) => this.vPositionRelative(params));\r\n    this._parser.setCsiHandler('f', (params, collect) => this.hVPosition(params));\r\n    this._parser.setCsiHandler('g', (params, collect) => this.tabClear(params));\r\n    this._parser.setCsiHandler('h', (params, collect) => this.setMode(params, collect));\r\n    this._parser.setCsiHandler('l', (params, collect) => this.resetMode(params, collect));\r\n    this._parser.setCsiHandler('m', (params, collect) => this.charAttributes(params));\r\n    this._parser.setCsiHandler('n', (params, collect) => this.deviceStatus(params, collect));\r\n    this._parser.setCsiHandler('p', (params, collect) => this.softReset(params, collect));\r\n    this._parser.setCsiHandler('q', (params, collect) => this.setCursorStyle(params, collect));\r\n    this._parser.setCsiHandler('r', (params, collect) => this.setScrollRegion(params, collect));\r\n    this._parser.setCsiHandler('s', (params, collect) => this.saveCursor(params));\r\n    this._parser.setCsiHandler('u', (params, collect) => this.restoreCursor(params));\r\n\r\n    /**\r\n     * execute handler\r\n     */\r\n    this._parser.setExecuteHandler(C0.BEL, () => this.bell());\r\n    this._parser.setExecuteHandler(C0.LF, () => this.lineFeed());\r\n    this._parser.setExecuteHandler(C0.VT, () => this.lineFeed());\r\n    this._parser.setExecuteHandler(C0.FF, () => this.lineFeed());\r\n    this._parser.setExecuteHandler(C0.CR, () => this.carriageReturn());\r\n    this._parser.setExecuteHandler(C0.BS, () => this.backspace());\r\n    this._parser.setExecuteHandler(C0.HT, () => this.tab());\r\n    this._parser.setExecuteHandler(C0.SO, () => this.shiftOut());\r\n    this._parser.setExecuteHandler(C0.SI, () => this.shiftIn());\r\n    // FIXME:   What do to with missing? Old code just added those to print.\r\n\r\n    // some C1 control codes - FIXME: should those be enabled by default?\r\n    this._parser.setExecuteHandler(C1.IND, () => this.index());\r\n    this._parser.setExecuteHandler(C1.NEL, () => this.nextLine());\r\n    this._parser.setExecuteHandler(C1.HTS, () => this.tabSet());\r\n\r\n    /**\r\n     * OSC handler\r\n     */\r\n    //   0 - icon name + title\r\n    this._parser.setOscHandler(0, (data) => this.setTitle(data));\r\n    //   1 - icon name\r\n    //   2 - title\r\n    this._parser.setOscHandler(2, (data) => this.setTitle(data));\r\n    //   3 - set property X in the form \"prop=value\"\r\n    //   4 - Change Color Number\r\n    //   5 - Change Special Color Number\r\n    //   6 - Enable/disable Special Color Number c\r\n    //   7 - current directory? (not in xterm spec, see https://gitlab.com/gnachman/iterm2/issues/3939)\r\n    //  10 - Change VT100 text foreground color to Pt.\r\n    //  11 - Change VT100 text background color to Pt.\r\n    //  12 - Change text cursor color to Pt.\r\n    //  13 - Change mouse foreground color to Pt.\r\n    //  14 - Change mouse background color to Pt.\r\n    //  15 - Change Tektronix foreground color to Pt.\r\n    //  16 - Change Tektronix background color to Pt.\r\n    //  17 - Change highlight background color to Pt.\r\n    //  18 - Change Tektronix cursor color to Pt.\r\n    //  19 - Change highlight foreground color to Pt.\r\n    //  46 - Change Log File to Pt.\r\n    //  50 - Set Font to Pt.\r\n    //  51 - reserved for Emacs shell.\r\n    //  52 - Manipulate Selection Data.\r\n    // 104 ; c - Reset Color Number c.\r\n    // 105 ; c - Reset Special Color Number c.\r\n    // 106 ; c; f - Enable/disable Special Color Number c.\r\n    // 110 - Reset VT100 text foreground color.\r\n    // 111 - Reset VT100 text background color.\r\n    // 112 - Reset text cursor color.\r\n    // 113 - Reset mouse foreground color.\r\n    // 114 - Reset mouse background color.\r\n    // 115 - Reset Tektronix foreground color.\r\n    // 116 - Reset Tektronix background color.\r\n    // 117 - Reset highlight color.\r\n    // 118 - Reset Tektronix cursor color.\r\n    // 119 - Reset highlight foreground color.\r\n\r\n    /**\r\n     * ESC handlers\r\n     */\r\n    this._parser.setEscHandler('7', () => this.saveCursor([]));\r\n    this._parser.setEscHandler('8', () => this.restoreCursor([]));\r\n    this._parser.setEscHandler('D', () => this.index());\r\n    this._parser.setEscHandler('E', () => this.nextLine());\r\n    this._parser.setEscHandler('H', () => this.tabSet());\r\n    this._parser.setEscHandler('M', () => this.reverseIndex());\r\n    this._parser.setEscHandler('=', () => this.keypadApplicationMode());\r\n    this._parser.setEscHandler('>', () => this.keypadNumericMode());\r\n    this._parser.setEscHandler('c', () => this.reset());\r\n    this._parser.setEscHandler('n', () => this.setgLevel(2));\r\n    this._parser.setEscHandler('o', () => this.setgLevel(3));\r\n    this._parser.setEscHandler('|', () => this.setgLevel(3));\r\n    this._parser.setEscHandler('}', () => this.setgLevel(2));\r\n    this._parser.setEscHandler('~', () => this.setgLevel(1));\r\n    this._parser.setEscHandler('%@', () => this.selectDefaultCharset());\r\n    this._parser.setEscHandler('%G', () => this.selectDefaultCharset());\r\n    for (const flag in CHARSETS) {\r\n      this._parser.setEscHandler('(' + flag, () => this.selectCharset('(' + flag));\r\n      this._parser.setEscHandler(')' + flag, () => this.selectCharset(')' + flag));\r\n      this._parser.setEscHandler('*' + flag, () => this.selectCharset('*' + flag));\r\n      this._parser.setEscHandler('+' + flag, () => this.selectCharset('+' + flag));\r\n      this._parser.setEscHandler('-' + flag, () => this.selectCharset('-' + flag));\r\n      this._parser.setEscHandler('.' + flag, () => this.selectCharset('.' + flag));\r\n      this._parser.setEscHandler('/' + flag, () => this.selectCharset('/' + flag)); // TODO: supported?\r\n    }\r\n\r\n    /**\r\n     * error handler\r\n     */\r\n    this._parser.setErrorHandler((state) => {\r\n      this._terminal.error('Parsing error: ', state);\r\n      return state;\r\n    });\r\n\r\n    /**\r\n     * DCS handler\r\n     */\r\n    this._parser.setDcsHandler('$q', new DECRQSS(this._terminal));\r\n  }\r\n\r\n  public dispose(): void {\r\n    super.dispose();\r\n    this._terminal = null;\r\n  }\r\n\r\n  public parse(data: string): void {\r\n    // Ensure the terminal is not disposed\r\n    if (!this._terminal) {\r\n      return;\r\n    }\r\n\r\n    let buffer = this._terminal.buffer;\r\n    const cursorStartX = buffer.x;\r\n    const cursorStartY = buffer.y;\r\n\r\n    // TODO: Consolidate debug/logging #1560\r\n    if ((<any>this._terminal).debug) {\r\n      this._terminal.log('data: ' + data);\r\n    }\r\n\r\n    if (this._parseBuffer.length < data.length) {\r\n      this._parseBuffer = new Uint32Array(data.length);\r\n    }\r\n    for (let i = 0; i < data.length; ++i) {\r\n      this._parseBuffer[i] = data.charCodeAt(i);\r\n    }\r\n    this._parser.parse(this._parseBuffer, this._stringDecoder.decode(data, this._parseBuffer));\r\n\r\n    buffer = this._terminal.buffer;\r\n    if (buffer.x !== cursorStartX || buffer.y !== cursorStartY) {\r\n      this._terminal.emit('cursormove');\r\n    }\r\n  }\r\n\r\n  public print(data: Uint32Array, start: number, end: number): void {\r\n    let code: number;\r\n    let char: string;\r\n    let chWidth: number;\r\n    const buffer: IBuffer = this._terminal.buffer;\r\n    const charset: ICharset = this._terminal.charset;\r\n    const screenReaderMode: boolean = this._terminal.options.screenReaderMode;\r\n    const cols: number = this._terminal.cols;\r\n    const wraparoundMode: boolean = this._terminal.wraparoundMode;\r\n    const insertMode: boolean = this._terminal.insertMode;\r\n    const curAttr: number = this._terminal.curAttr;\r\n    let bufferRow = buffer.lines.get(buffer.y + buffer.ybase);\r\n\r\n    this._terminal.updateRange(buffer.y);\r\n    for (let pos = start; pos < end; ++pos) {\r\n      code = data[pos];\r\n      char = stringFromCodePoint(code);\r\n\r\n      // calculate print space\r\n      // expensive call, therefore we save width in line buffer\r\n      chWidth = wcwidth(code);\r\n\r\n      // get charset replacement character\r\n      // charset are only defined for ASCII, therefore we only\r\n      // search for an replacement char if code < 127\r\n      if (code < 127 && charset) {\r\n        const ch = charset[char];\r\n        if (ch) {\r\n          code = ch.charCodeAt(0);\r\n          char = ch;\r\n        }\r\n      }\r\n\r\n      if (screenReaderMode) {\r\n        this._terminal.emit('a11y.char', char);\r\n      }\r\n\r\n      // insert combining char at last cursor position\r\n      // FIXME: needs handling after cursor jumps\r\n      // buffer.x should never be 0 for a combining char\r\n      // since they always follow a cell consuming char\r\n      // therefore we can test for buffer.x to avoid overflow left\r\n      if (!chWidth && buffer.x) {\r\n        const chMinusOne = bufferRow.get(buffer.x - 1);\r\n        if (chMinusOne) {\r\n          if (!chMinusOne[CHAR_DATA_WIDTH_INDEX]) {\r\n            // found empty cell after fullwidth, need to go 2 cells back\r\n            // it is save to step 2 cells back here\r\n            // since an empty cell is only set by fullwidth chars\r\n            const chMinusTwo = bufferRow.get(buffer.x - 2);\r\n            if (chMinusTwo) {\r\n              chMinusTwo[CHAR_DATA_CHAR_INDEX] += char;\r\n              chMinusTwo[CHAR_DATA_CODE_INDEX] = code;\r\n              bufferRow.set(buffer.x - 2, chMinusTwo); // must be set explicitly now\r\n            }\r\n          } else {\r\n            chMinusOne[CHAR_DATA_CHAR_INDEX] += char;\r\n            chMinusOne[CHAR_DATA_CODE_INDEX] = code;\r\n            bufferRow.set(buffer.x - 1, chMinusOne); // must be set explicitly now\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n\r\n      // goto next line if ch would overflow\r\n      // TODO: needs a global min terminal width of 2\r\n      // FIXME: additionally ensure chWidth fits into a line\r\n      //   -->  maybe forbid cols<xy at higher level as it would\r\n      //        introduce a bad runtime penalty here\r\n      if (buffer.x + chWidth - 1 >= cols) {\r\n        // autowrap - DECAWM\r\n        // automatically wraps to the beginning of the next line\r\n        if (wraparoundMode) {\r\n          buffer.x = 0;\r\n          buffer.y++;\r\n          if (buffer.y > buffer.scrollBottom) {\r\n            buffer.y--;\r\n            this._terminal.scroll(true);\r\n          } else {\r\n            // The line already exists (eg. the initial viewport), mark it as a\r\n            // wrapped line\r\n            buffer.lines.get(buffer.y).isWrapped = true;\r\n          }\r\n          // row changed, get it again\r\n          bufferRow = buffer.lines.get(buffer.y + buffer.ybase);\r\n        } else {\r\n          if (chWidth === 2) {\r\n            // FIXME: check for xterm behavior\r\n            // What to do here? We got a wide char that does not fit into last cell\r\n            continue;\r\n          }\r\n          // FIXME: Do we have to set buffer.x to cols - 1, if not wrapping?\r\n        }\r\n      }\r\n\r\n      // insert mode: move characters to right\r\n      if (insertMode) {\r\n        // right shift cells according to the width\r\n        bufferRow.insertCells(buffer.x, chWidth, [curAttr, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\r\n        // test last cell - since the last cell has only room for\r\n        // a halfwidth char any fullwidth shifted there is lost\r\n        // and will be set to eraseChar\r\n        const lastCell = bufferRow.get(cols - 1);\r\n        if (lastCell[CHAR_DATA_WIDTH_INDEX] === 2) {\r\n          bufferRow.set(cols - 1, [curAttr, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\r\n        }\r\n      }\r\n\r\n      // write current char to buffer and advance cursor\r\n      bufferRow.set(buffer.x++, [curAttr, char, chWidth, code]);\r\n\r\n      // fullwidth char - also set next cell to placeholder stub and advance cursor\r\n      // for graphemes bigger than fullwidth we can simply loop to zero\r\n      // we already made sure above, that buffer.x + chWidth will not overflow right\r\n      if (chWidth > 0) {\r\n        while (--chWidth) {\r\n          bufferRow.set(buffer.x++, [curAttr, '', 0, undefined]);\r\n        }\r\n      }\r\n    }\r\n    this._terminal.updateRange(buffer.y);\r\n  }\r\n\r\n  addCsiHandler(flag: string, callback: (params: number[], collect: string) => boolean): IDisposable {\r\n    return this._parser.addCsiHandler(flag, callback);\r\n  }\r\n  addOscHandler(ident: number, callback: (data: string) => boolean): IDisposable {\r\n    return this._parser.addOscHandler(ident, callback);\r\n  }\r\n\r\n  /**\r\n   * BEL\r\n   * Bell (Ctrl-G).\r\n   */\r\n  public bell(): void {\r\n    this._terminal.bell();\r\n  }\r\n\r\n  /**\r\n   * LF\r\n   * Line Feed or New Line (NL).  (LF  is Ctrl-J).\r\n   */\r\n  public lineFeed(): void {\r\n    // make buffer local for faster access\r\n    const buffer = this._terminal.buffer;\r\n\r\n    if (this._terminal.options.convertEol) {\r\n      buffer.x = 0;\r\n    }\r\n    buffer.y++;\r\n    if (buffer.y > buffer.scrollBottom) {\r\n      buffer.y--;\r\n      this._terminal.scroll();\r\n    }\r\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\r\n    if (buffer.x >= this._terminal.cols) {\r\n      buffer.x--;\r\n    }\r\n    /**\r\n     * This event is emitted whenever the terminal outputs a LF or NL.\r\n     *\r\n     * @event linefeed\r\n     */\r\n    this._terminal.emit('linefeed');\r\n  }\r\n\r\n  /**\r\n   * CR\r\n   * Carriage Return (Ctrl-M).\r\n   */\r\n  public carriageReturn(): void {\r\n    this._terminal.buffer.x = 0;\r\n  }\r\n\r\n  /**\r\n   * BS\r\n   * Backspace (Ctrl-H).\r\n   */\r\n  public backspace(): void {\r\n    if (this._terminal.buffer.x > 0) {\r\n      this._terminal.buffer.x--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * TAB\r\n   * Horizontal Tab (HT) (Ctrl-I).\r\n   */\r\n  public tab(): void {\r\n    const originalX = this._terminal.buffer.x;\r\n    this._terminal.buffer.x = this._terminal.buffer.nextStop();\r\n    if (this._terminal.options.screenReaderMode) {\r\n      this._terminal.emit('a11y.tab', this._terminal.buffer.x - originalX);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * SO\r\n   * Shift Out (Ctrl-N) -> Switch to Alternate Character Set.  This invokes the\r\n   * G1 character set.\r\n   */\r\n  public shiftOut(): void {\r\n    this._terminal.setgLevel(1);\r\n  }\r\n\r\n  /**\r\n   * SI\r\n   * Shift In (Ctrl-O) -> Switch to Standard Character Set.  This invokes the G0\r\n   * character set (the default).\r\n   */\r\n  public shiftIn(): void {\r\n    this._terminal.setgLevel(0);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps @\r\n   * Insert Ps (Blank) Character(s) (default = 1) (ICH).\r\n   */\r\n  public insertChars(params: number[]): void {\r\n    this._terminal.buffer.lines.get(this._terminal.buffer.y + this._terminal.buffer.ybase).insertCells(\r\n      this._terminal.buffer.x,\r\n      params[0] || 1,\r\n      [this._terminal.eraseAttr(), NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]\r\n    );\r\n    this._terminal.updateRange(this._terminal.buffer.y);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps A\r\n   * Cursor Up Ps Times (default = 1) (CUU).\r\n   */\r\n  public cursorUp(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y -= param;\r\n    if (this._terminal.buffer.y < 0) {\r\n      this._terminal.buffer.y = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps B\r\n   * Cursor Down Ps Times (default = 1) (CUD).\r\n   */\r\n  public cursorDown(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y += param;\r\n    if (this._terminal.buffer.y >= this._terminal.rows) {\r\n      this._terminal.buffer.y = this._terminal.rows - 1;\r\n    }\r\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps C\r\n   * Cursor Forward Ps Times (default = 1) (CUF).\r\n   */\r\n  public cursorForward(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.x += param;\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x = this._terminal.cols - 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps D\r\n   * Cursor Backward Ps Times (default = 1) (CUB).\r\n   */\r\n  public cursorBackward(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x--;\r\n    }\r\n    this._terminal.buffer.x -= param;\r\n    if (this._terminal.buffer.x < 0) {\r\n      this._terminal.buffer.x = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps E\r\n   * Cursor Next Line Ps Times (default = 1) (CNL).\r\n   * same as CSI Ps B ?\r\n   */\r\n  public cursorNextLine(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y += param;\r\n    if (this._terminal.buffer.y >= this._terminal.rows) {\r\n      this._terminal.buffer.y = this._terminal.rows - 1;\r\n    }\r\n    this._terminal.buffer.x = 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * CSI Ps F\r\n   * Cursor Preceding Line Ps Times (default = 1) (CNL).\r\n   * reuse CSI Ps A ?\r\n   */\r\n  public cursorPrecedingLine(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y -= param;\r\n    if (this._terminal.buffer.y < 0) {\r\n      this._terminal.buffer.y = 0;\r\n    }\r\n    this._terminal.buffer.x = 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * CSI Ps G\r\n   * Cursor Character Absolute  [column] (default = [row,1]) (CHA).\r\n   */\r\n  public cursorCharAbsolute(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.x = param - 1;\r\n  }\r\n\r\n  /**\r\n   * CSI Ps ; Ps H\r\n   * Cursor Position [row;column] (default = [1,1]) (CUP).\r\n   */\r\n  public cursorPosition(params: number[]): void {\r\n    let col: number;\r\n    let row: number = params[0] - 1;\r\n\r\n    if (params.length >= 2) {\r\n      col = params[1] - 1;\r\n    } else {\r\n      col = 0;\r\n    }\r\n\r\n    if (row < 0) {\r\n      row = 0;\r\n    } else if (row >= this._terminal.rows) {\r\n      row = this._terminal.rows - 1;\r\n    }\r\n\r\n    if (col < 0) {\r\n      col = 0;\r\n    } else if (col >= this._terminal.cols) {\r\n      col = this._terminal.cols - 1;\r\n    }\r\n\r\n    this._terminal.buffer.x = col;\r\n    this._terminal.buffer.y = row;\r\n  }\r\n\r\n  /**\r\n   * CSI Ps I\r\n   *   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\r\n   */\r\n  public cursorForwardTab(params: number[]): void {\r\n    let param = params[0] || 1;\r\n    while (param--) {\r\n      this._terminal.buffer.x = this._terminal.buffer.nextStop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method to erase cells in a terminal row.\r\n   * The cell gets replaced with the eraseChar of the terminal.\r\n   * @param y row index\r\n   * @param start first cell index to be erased\r\n   * @param end   end - 1 is last erased cell\r\n   */\r\n  private _eraseInBufferLine(y: number, start: number, end: number, clearWrap: boolean = false): void {\r\n    const line = this._terminal.buffer.lines.get(this._terminal.buffer.ybase + y);\r\n    line.replaceCells(\r\n      start,\r\n      end,\r\n      [this._terminal.eraseAttr(), NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]\r\n    );\r\n    if (clearWrap) {\r\n      line.isWrapped = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method to reset cells in a terminal row.\r\n   * The cell gets replaced with the eraseChar of the terminal and the isWrapped property is set to false.\r\n   * @param y row index\r\n   */\r\n  private _resetBufferLine(y: number): void {\r\n    this._eraseInBufferLine(y, 0, this._terminal.cols, true);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps J  Erase in Display (ED).\r\n   *     Ps = 0  -> Erase Below (default).\r\n   *     Ps = 1  -> Erase Above.\r\n   *     Ps = 2  -> Erase All.\r\n   *     Ps = 3  -> Erase Saved Lines (xterm).\r\n   * CSI ? Ps J\r\n   *   Erase in Display (DECSED).\r\n   *     Ps = 0  -> Selective Erase Below (default).\r\n   *     Ps = 1  -> Selective Erase Above.\r\n   *     Ps = 2  -> Selective Erase All.\r\n   */\r\n  public eraseInDisplay(params: number[]): void {\r\n    let j;\r\n    switch (params[0]) {\r\n      case 0:\r\n        j = this._terminal.buffer.y;\r\n        this._terminal.updateRange(j);\r\n        this._eraseInBufferLine(j++, this._terminal.buffer.x, this._terminal.cols, this._terminal.buffer.x === 0);\r\n        for (; j < this._terminal.rows; j++) {\r\n          this._resetBufferLine(j);\r\n        }\r\n        this._terminal.updateRange(j);\r\n        break;\r\n      case 1:\r\n        j = this._terminal.buffer.y;\r\n        this._terminal.updateRange(j);\r\n        // Deleted front part of line and everything before. This line will no longer be wrapped.\r\n        this._eraseInBufferLine(j, 0, this._terminal.buffer.x + 1, true);\r\n        if (this._terminal.buffer.x + 1 >= this._terminal.cols) {\r\n          // Deleted entire previous line. This next line can no longer be wrapped.\r\n          this._terminal.buffer.lines.get(j + 1).isWrapped = false;\r\n        }\r\n        while (j--) {\r\n          this._resetBufferLine(j);\r\n        }\r\n        this._terminal.updateRange(0);\r\n        break;\r\n      case 2:\r\n        j = this._terminal.rows;\r\n        this._terminal.updateRange(j - 1);\r\n        while (j--) {\r\n          this._resetBufferLine(j);\r\n        }\r\n        this._terminal.updateRange(0);\r\n        break;\r\n      case 3:\r\n        // Clear scrollback (everything not in viewport)\r\n        const scrollBackSize = this._terminal.buffer.lines.length - this._terminal.rows;\r\n        if (scrollBackSize > 0) {\r\n          this._terminal.buffer.lines.trimStart(scrollBackSize);\r\n          this._terminal.buffer.ybase = Math.max(this._terminal.buffer.ybase - scrollBackSize, 0);\r\n          this._terminal.buffer.ydisp = Math.max(this._terminal.buffer.ydisp - scrollBackSize, 0);\r\n          // Force a scroll event to refresh viewport\r\n          this._terminal.emit('scroll', 0);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps K  Erase in Line (EL).\r\n   *     Ps = 0  -> Erase to Right (default).\r\n   *     Ps = 1  -> Erase to Left.\r\n   *     Ps = 2  -> Erase All.\r\n   * CSI ? Ps K\r\n   *   Erase in Line (DECSEL).\r\n   *     Ps = 0  -> Selective Erase to Right (default).\r\n   *     Ps = 1  -> Selective Erase to Left.\r\n   *     Ps = 2  -> Selective Erase All.\r\n   */\r\n  public eraseInLine(params: number[]): void {\r\n    switch (params[0]) {\r\n      case 0:\r\n        this._eraseInBufferLine(this._terminal.buffer.y, this._terminal.buffer.x, this._terminal.cols);\r\n        break;\r\n      case 1:\r\n        this._eraseInBufferLine(this._terminal.buffer.y, 0, this._terminal.buffer.x + 1);\r\n        break;\r\n      case 2:\r\n        this._eraseInBufferLine(this._terminal.buffer.y, 0, this._terminal.cols);\r\n        break;\r\n    }\r\n    this._terminal.updateRange(this._terminal.buffer.y);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps L\r\n   * Insert Ps Line(s) (default = 1) (IL).\r\n   */\r\n  public insertLines(params: number[]): void {\r\n    let param: number = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n\r\n    // make buffer local for faster access\r\n    const buffer = this._terminal.buffer;\r\n\r\n    const row: number = buffer.y + buffer.ybase;\r\n\r\n    const scrollBottomRowsOffset = this._terminal.rows - 1 - buffer.scrollBottom;\r\n    const scrollBottomAbsolute = this._terminal.rows - 1 + buffer.ybase - scrollBottomRowsOffset + 1;\r\n    while (param--) {\r\n      // test: echo -e '\\e[44m\\e[1L\\e[0m'\r\n      // blankLine(true) - xterm/linux behavior\r\n      buffer.lines.splice(scrollBottomAbsolute - 1, 1);\r\n      buffer.lines.splice(row, 0, buffer.getBlankLine(this._terminal.eraseAttr()));\r\n    }\r\n\r\n    // this.maxRange();\r\n    this._terminal.updateRange(buffer.y);\r\n    this._terminal.updateRange(buffer.scrollBottom);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps M\r\n   * Delete Ps Line(s) (default = 1) (DL).\r\n   */\r\n  public deleteLines(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n\r\n    // make buffer local for faster access\r\n    const buffer = this._terminal.buffer;\r\n\r\n    const row: number = buffer.y + buffer.ybase;\r\n\r\n    let j: number;\r\n    j = this._terminal.rows - 1 - buffer.scrollBottom;\r\n    j = this._terminal.rows - 1 + buffer.ybase - j;\r\n    while (param--) {\r\n      // test: echo -e '\\e[44m\\e[1M\\e[0m'\r\n      // blankLine(true) - xterm/linux behavior\r\n      buffer.lines.splice(row, 1);\r\n      buffer.lines.splice(j, 0, buffer.getBlankLine(this._terminal.eraseAttr()));\r\n    }\r\n\r\n    // this.maxRange();\r\n    this._terminal.updateRange(buffer.y);\r\n    this._terminal.updateRange(buffer.scrollBottom);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps P\r\n   * Delete Ps Character(s) (default = 1) (DCH).\r\n   */\r\n  public deleteChars(params: number[]): void {\r\n    this._terminal.buffer.lines.get(this._terminal.buffer.y + this._terminal.buffer.ybase).deleteCells(\r\n      this._terminal.buffer.x,\r\n      params[0] || 1,\r\n      [this._terminal.eraseAttr(), NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]\r\n    );\r\n    this._terminal.updateRange(this._terminal.buffer.y);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps S  Scroll up Ps lines (default = 1) (SU).\r\n   */\r\n  public scrollUp(params: number[]): void {\r\n    let param = params[0] || 1;\r\n\r\n    // make buffer local for faster access\r\n    const buffer = this._terminal.buffer;\r\n\r\n    while (param--) {\r\n      buffer.lines.splice(buffer.ybase + buffer.scrollTop, 1);\r\n      buffer.lines.splice(buffer.ybase + buffer.scrollBottom, 0, buffer.getBlankLine(DEFAULT_ATTR));\r\n    }\r\n    // this.maxRange();\r\n    this._terminal.updateRange(buffer.scrollTop);\r\n    this._terminal.updateRange(buffer.scrollBottom);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps T  Scroll down Ps lines (default = 1) (SD).\r\n   */\r\n  public scrollDown(params: number[], collect?: string): void {\r\n    if (params.length < 2 && !collect) {\r\n      let param = params[0] || 1;\r\n\r\n      // make buffer local for faster access\r\n      const buffer = this._terminal.buffer;\r\n\r\n      while (param--) {\r\n        buffer.lines.splice(buffer.ybase + buffer.scrollBottom, 1);\r\n        buffer.lines.splice(buffer.ybase + buffer.scrollBottom, 0, buffer.getBlankLine(DEFAULT_ATTR));\r\n      }\r\n      // this.maxRange();\r\n      this._terminal.updateRange(buffer.scrollTop);\r\n      this._terminal.updateRange(buffer.scrollBottom);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps X\r\n   * Erase Ps Character(s) (default = 1) (ECH).\r\n   */\r\n  public eraseChars(params: number[]): void {\r\n    this._terminal.buffer.lines.get(this._terminal.buffer.y + this._terminal.buffer.ybase).replaceCells(\r\n      this._terminal.buffer.x,\r\n      this._terminal.buffer.x + (params[0] || 1),\r\n      [this._terminal.eraseAttr(), NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\r\n   */\r\n  public cursorBackwardTab(params: number[]): void {\r\n    let param = params[0] || 1;\r\n\r\n    // make buffer local for faster access\r\n    const buffer = this._terminal.buffer;\r\n\r\n    while (param--) {\r\n      buffer.x = buffer.prevStop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm `  Character Position Absolute\r\n   *   [column] (default = [row,1]) (HPA).\r\n   */\r\n  public charPosAbsolute(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.x = param - 1;\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x = this._terminal.cols - 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm a  Character Position Relative\r\n   *   [columns] (default = [row,col+1]) (HPR)\r\n   * reuse CSI Ps C ?\r\n   */\r\n  public hPositionRelative(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.x += param;\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x = this._terminal.cols - 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps b  Repeat the preceding graphic character Ps times (REP).\r\n   */\r\n  public repeatPrecedingCharacter(params: number[]): void {\r\n    // make buffer local for faster access\r\n    const buffer = this._terminal.buffer;\r\n    const line = buffer.lines.get(buffer.ybase + buffer.y);\r\n    line.replaceCells(buffer.x,\r\n      buffer.x + (params[0] || 1),\r\n      line.get(buffer.x - 1) || [DEFAULT_ATTR, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]\r\n    );\r\n    // FIXME: no updateRange here?\r\n  }\r\n\r\n  /**\r\n   * CSI Ps c  Send Device Attributes (Primary DA).\r\n   *     Ps = 0  or omitted -> request attributes from terminal.  The\r\n   *     response depends on the decTerminalID resource setting.\r\n   *     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')\r\n   *     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')\r\n   *     -> CSI ? 6 c  (``VT102'')\r\n   *     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')\r\n   *   The VT100-style response parameters do not mean anything by\r\n   *   themselves.  VT220 parameters do, telling the host what fea-\r\n   *   tures the terminal supports:\r\n   *     Ps = 1  -> 132-columns.\r\n   *     Ps = 2  -> Printer.\r\n   *     Ps = 6  -> Selective erase.\r\n   *     Ps = 8  -> User-defined keys.\r\n   *     Ps = 9  -> National replacement character sets.\r\n   *     Ps = 1 5  -> Technical characters.\r\n   *     Ps = 2 2  -> ANSI color, e.g., VT525.\r\n   *     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).\r\n   * CSI > Ps c\r\n   *   Send Device Attributes (Secondary DA).\r\n   *     Ps = 0  or omitted -> request the terminal's identification\r\n   *     code.  The response depends on the decTerminalID resource set-\r\n   *     ting.  It should apply only to VT220 and up, but xterm extends\r\n   *     this to VT100.\r\n   *     -> CSI  > Pp ; Pv ; Pc c\r\n   *   where Pp denotes the terminal type\r\n   *     Pp = 0  -> ``VT100''.\r\n   *     Pp = 1  -> ``VT220''.\r\n   *   and Pv is the firmware version (for xterm, this was originally\r\n   *   the XFree86 patch number, starting with 95).  In a DEC termi-\r\n   *   nal, Pc indicates the ROM cartridge registration number and is\r\n   *   always zero.\r\n   * More information:\r\n   *   xterm/charproc.c - line 2012, for more information.\r\n   *   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)\r\n   */\r\n  public sendDeviceAttributes(params: number[], collect?: string): void {\r\n    if (params[0] > 0) {\r\n      return;\r\n    }\r\n\r\n    if (!collect) {\r\n      if (this._terminal.is('xterm') || this._terminal.is('rxvt-unicode') || this._terminal.is('screen')) {\r\n        this._terminal.handler(C0.ESC + '[?1;2c');\r\n      } else if (this._terminal.is('linux')) {\r\n        this._terminal.handler(C0.ESC + '[?6c');\r\n      }\r\n    } else if (collect === '>') {\r\n      // xterm and urxvt\r\n      // seem to spit this\r\n      // out around ~370 times (?).\r\n      if (this._terminal.is('xterm')) {\r\n        this._terminal.handler(C0.ESC + '[>0;276;0c');\r\n      } else if (this._terminal.is('rxvt-unicode')) {\r\n        this._terminal.handler(C0.ESC + '[>85;95;0c');\r\n      } else if (this._terminal.is('linux')) {\r\n        // not supported by linux console.\r\n        // linux console echoes parameters.\r\n        this._terminal.handler(params[0] + 'c');\r\n      } else if (this._terminal.is('screen')) {\r\n        this._terminal.handler(C0.ESC + '[>83;40003;0c');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm d  Vertical Position Absolute (VPA)\r\n   *   [row] (default = [1,column])\r\n   */\r\n  public linePosAbsolute(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y = param - 1;\r\n    if (this._terminal.buffer.y >= this._terminal.rows) {\r\n      this._terminal.buffer.y = this._terminal.rows - 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm e  Vertical Position Relative (VPR)\r\n   *   [rows] (default = [row+1,column])\r\n   * reuse CSI Ps B ?\r\n   */\r\n  public vPositionRelative(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y += param;\r\n    if (this._terminal.buffer.y >= this._terminal.rows) {\r\n      this._terminal.buffer.y = this._terminal.rows - 1;\r\n    }\r\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps ; Ps f\r\n   *   Horizontal and Vertical Position [row;column] (default =\r\n   *   [1,1]) (HVP).\r\n   */\r\n  public hVPosition(params: number[]): void {\r\n    if (params[0] < 1) params[0] = 1;\r\n    if (params[1] < 1) params[1] = 1;\r\n\r\n    this._terminal.buffer.y = params[0] - 1;\r\n    if (this._terminal.buffer.y >= this._terminal.rows) {\r\n      this._terminal.buffer.y = this._terminal.rows - 1;\r\n    }\r\n\r\n    this._terminal.buffer.x = params[1] - 1;\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x = this._terminal.cols - 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps g  Tab Clear (TBC).\r\n   *     Ps = 0  -> Clear Current Column (default).\r\n   *     Ps = 3  -> Clear All.\r\n   * Potentially:\r\n   *   Ps = 2  -> Clear Stops on Line.\r\n   *   http://vt100.net/annarbor/aaa-ug/section6.html\r\n   */\r\n  public tabClear(params: number[]): void {\r\n    const param = params[0];\r\n    if (param <= 0) {\r\n      delete this._terminal.buffer.tabs[this._terminal.buffer.x];\r\n    } else if (param === 3) {\r\n      this._terminal.buffer.tabs = {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm h  Set Mode (SM).\r\n   *     Ps = 2  -> Keyboard Action Mode (AM).\r\n   *     Ps = 4  -> Insert Mode (IRM).\r\n   *     Ps = 1 2  -> Send/receive (SRM).\r\n   *     Ps = 2 0  -> Automatic Newline (LNM).\r\n   * CSI ? Pm h\r\n   *   DEC Private Mode Set (DECSET).\r\n   *     Ps = 1  -> Application Cursor Keys (DECCKM).\r\n   *     Ps = 2  -> Designate USASCII for character sets G0-G3\r\n   *     (DECANM), and set VT100 mode.\r\n   *     Ps = 3  -> 132 Column Mode (DECCOLM).\r\n   *     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).\r\n   *     Ps = 5  -> Reverse Video (DECSCNM).\r\n   *     Ps = 6  -> Origin Mode (DECOM).\r\n   *     Ps = 7  -> Wraparound Mode (DECAWM).\r\n   *     Ps = 8  -> Auto-repeat Keys (DECARM).\r\n   *     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\r\n   *     tion Mouse Tracking.\r\n   *     Ps = 1 0  -> Show toolbar (rxvt).\r\n   *     Ps = 1 2  -> Start Blinking Cursor (att610).\r\n   *     Ps = 1 8  -> Print form feed (DECPFF).\r\n   *     Ps = 1 9  -> Set print extent to full screen (DECPEX).\r\n   *     Ps = 2 5  -> Show Cursor (DECTCEM).\r\n   *     Ps = 3 0  -> Show scrollbar (rxvt).\r\n   *     Ps = 3 5  -> Enable font-shifting functions (rxvt).\r\n   *     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).\r\n   *     Ps = 4 0  -> Allow 80 -> 132 Mode.\r\n   *     Ps = 4 1  -> more(1) fix (see curses resource).\r\n   *     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-\r\n   *     RCM).\r\n   *     Ps = 4 4  -> Turn On Margin Bell.\r\n   *     Ps = 4 5  -> Reverse-wraparound Mode.\r\n   *     Ps = 4 6  -> Start Logging.  This is normally disabled by a\r\n   *     compile-time option.\r\n   *     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-\r\n   *     abled by the titeInhibit resource).\r\n   *     Ps = 6 6  -> Application keypad (DECNKM).\r\n   *     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).\r\n   *     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\r\n   *     release.  See the section Mouse Tracking.\r\n   *     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\r\n   *     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\r\n   *     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\r\n   *     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\r\n   *     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\r\n   *     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).\r\n   *     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).\r\n   *     Ps = 1 0 3 4  -> Interpret \"meta\" key, sets eighth bit.\r\n   *     (enables the eightBitInput resource).\r\n   *     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-\r\n   *     Lock keys.  (This enables the numLock resource).\r\n   *     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This\r\n   *     enables the metaSendsEscape resource).\r\n   *     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete\r\n   *     key.\r\n   *     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This\r\n   *     enables the altSendsEscape resource).\r\n   *     Ps = 1 0 4 0  -> Keep selection even if not highlighted.\r\n   *     (This enables the keepSelection resource).\r\n   *     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables\r\n   *     the selectToClipboard resource).\r\n   *     Ps = 1 0 4 2  -> Enable Urgency window manager hint when\r\n   *     Control-G is received.  (This enables the bellIsUrgent\r\n   *     resource).\r\n   *     Ps = 1 0 4 3  -> Enable raising of the window when Control-G\r\n   *     is received.  (enables the popOnBell resource).\r\n   *     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be\r\n   *     disabled by the titeInhibit resource).\r\n   *     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-\r\n   *     abled by the titeInhibit resource).\r\n   *     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate\r\n   *     Screen Buffer, clearing it first.  (This may be disabled by\r\n   *     the titeInhibit resource).  This combines the effects of the 1\r\n   *     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based\r\n   *     applications rather than the 4 7  mode.\r\n   *     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.\r\n   *     Ps = 1 0 5 1  -> Set Sun function-key mode.\r\n   *     Ps = 1 0 5 2  -> Set HP function-key mode.\r\n   *     Ps = 1 0 5 3  -> Set SCO function-key mode.\r\n   *     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).\r\n   *     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.\r\n   *     Ps = 2 0 0 4  -> Set bracketed paste mode.\r\n   * Modes:\r\n   *   http: *vt100.net/docs/vt220-rm/chapter4.html\r\n   */\r\n  public setMode(params: number[], collect?: string): void {\r\n    if (params.length > 1) {\r\n      for (let i = 0; i < params.length; i++) {\r\n        this.setMode([params[i]]);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!collect) {\r\n      switch (params[0]) {\r\n        case 4:\r\n          this._terminal.insertMode = true;\r\n          break;\r\n        case 20:\r\n          // this._t.convertEol = true;\r\n          break;\r\n      }\r\n    } else if (collect === '?') {\r\n      switch (params[0]) {\r\n        case 1:\r\n          this._terminal.applicationCursor = true;\r\n          break;\r\n        case 2:\r\n          this._terminal.setgCharset(0, DEFAULT_CHARSET);\r\n          this._terminal.setgCharset(1, DEFAULT_CHARSET);\r\n          this._terminal.setgCharset(2, DEFAULT_CHARSET);\r\n          this._terminal.setgCharset(3, DEFAULT_CHARSET);\r\n          // set VT100 mode here\r\n          break;\r\n        case 3: // 132 col mode\r\n          this._terminal.savedCols = this._terminal.cols;\r\n          this._terminal.resize(132, this._terminal.rows);\r\n          break;\r\n        case 6:\r\n          this._terminal.originMode = true;\r\n          break;\r\n        case 7:\r\n          this._terminal.wraparoundMode = true;\r\n          break;\r\n        case 12:\r\n          // this.cursorBlink = true;\r\n          break;\r\n        case 66:\r\n          this._terminal.log('Serial port requested application keypad.');\r\n          this._terminal.applicationKeypad = true;\r\n          if (this._terminal.viewport) {\r\n            this._terminal.viewport.syncScrollArea();\r\n          }\r\n          break;\r\n        case 9: // X10 Mouse\r\n          // no release, no motion, no wheel, no modifiers.\r\n        case 1000: // vt200 mouse\r\n          // no motion.\r\n          // no modifiers, except control on the wheel.\r\n        case 1002: // button event mouse\r\n        case 1003: // any event mouse\r\n          // any event - sends motion events,\r\n          // even if there is no button held down.\r\n\r\n          // TODO: Why are params[0] compares nested within a switch for params[0]?\r\n\r\n          this._terminal.x10Mouse = params[0] === 9;\r\n          this._terminal.vt200Mouse = params[0] === 1000;\r\n          this._terminal.normalMouse = params[0] > 1000;\r\n          this._terminal.mouseEvents = true;\r\n          if (this._terminal.element) {\r\n            this._terminal.element.classList.add('enable-mouse-events');\r\n          }\r\n          this._terminal.selectionManager.disable();\r\n          this._terminal.log('Binding to mouse events.');\r\n          break;\r\n        case 1004: // send focusin/focusout events\r\n          // focusin: ^[[I\r\n          // focusout: ^[[O\r\n          this._terminal.sendFocus = true;\r\n          break;\r\n        case 1005: // utf8 ext mode mouse\r\n          this._terminal.utfMouse = true;\r\n          // for wide terminals\r\n          // simply encodes large values as utf8 characters\r\n          break;\r\n        case 1006: // sgr ext mode mouse\r\n          this._terminal.sgrMouse = true;\r\n          // for wide terminals\r\n          // does not add 32 to fields\r\n          // press: ^[[<b;x;yM\r\n          // release: ^[[<b;x;ym\r\n          break;\r\n        case 1015: // urxvt ext mode mouse\r\n          this._terminal.urxvtMouse = true;\r\n          // for wide terminals\r\n          // numbers for fields\r\n          // press: ^[[b;x;yM\r\n          // motion: ^[[b;x;yT\r\n          break;\r\n        case 25: // show cursor\r\n          this._terminal.cursorHidden = false;\r\n          break;\r\n        case 1048: // alt screen cursor\r\n          this.saveCursor(params);\r\n          break;\r\n        case 1049: // alt screen buffer cursor\r\n          this.saveCursor(params);\r\n          // FALL-THROUGH\r\n        case 47: // alt screen buffer\r\n        case 1047: // alt screen buffer\r\n          this._terminal.buffers.activateAltBuffer(this._terminal.eraseAttr());\r\n          this._terminal.refresh(0, this._terminal.rows - 1);\r\n          if (this._terminal.viewport) {\r\n            this._terminal.viewport.syncScrollArea();\r\n          }\r\n          this._terminal.showCursor();\r\n          break;\r\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\r\n          this._terminal.bracketedPasteMode = true;\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm l  Reset Mode (RM).\r\n   *     Ps = 2  -> Keyboard Action Mode (AM).\r\n   *     Ps = 4  -> Replace Mode (IRM).\r\n   *     Ps = 1 2  -> Send/receive (SRM).\r\n   *     Ps = 2 0  -> Normal Linefeed (LNM).\r\n   * CSI ? Pm l\r\n   *   DEC Private Mode Reset (DECRST).\r\n   *     Ps = 1  -> Normal Cursor Keys (DECCKM).\r\n   *     Ps = 2  -> Designate VT52 mode (DECANM).\r\n   *     Ps = 3  -> 80 Column Mode (DECCOLM).\r\n   *     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).\r\n   *     Ps = 5  -> Normal Video (DECSCNM).\r\n   *     Ps = 6  -> Normal Cursor Mode (DECOM).\r\n   *     Ps = 7  -> No Wraparound Mode (DECAWM).\r\n   *     Ps = 8  -> No Auto-repeat Keys (DECARM).\r\n   *     Ps = 9  -> Don't send Mouse X & Y on button press.\r\n   *     Ps = 1 0  -> Hide toolbar (rxvt).\r\n   *     Ps = 1 2  -> Stop Blinking Cursor (att610).\r\n   *     Ps = 1 8  -> Don't print form feed (DECPFF).\r\n   *     Ps = 1 9  -> Limit print to scrolling region (DECPEX).\r\n   *     Ps = 2 5  -> Hide Cursor (DECTCEM).\r\n   *     Ps = 3 0  -> Don't show scrollbar (rxvt).\r\n   *     Ps = 3 5  -> Disable font-shifting functions (rxvt).\r\n   *     Ps = 4 0  -> Disallow 80 -> 132 Mode.\r\n   *     Ps = 4 1  -> No more(1) fix (see curses resource).\r\n   *     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-\r\n   *     NRCM).\r\n   *     Ps = 4 4  -> Turn Off Margin Bell.\r\n   *     Ps = 4 5  -> No Reverse-wraparound Mode.\r\n   *     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a\r\n   *     compile-time option).\r\n   *     Ps = 4 7  -> Use Normal Screen Buffer.\r\n   *     Ps = 6 6  -> Numeric keypad (DECNKM).\r\n   *     Ps = 6 7  -> Backarrow key sends delete (DECBKM).\r\n   *     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\r\n   *     release.  See the section Mouse Tracking.\r\n   *     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\r\n   *     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\r\n   *     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\r\n   *     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\r\n   *     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\r\n   *     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output\r\n   *     (rxvt).\r\n   *     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).\r\n   *     Ps = 1 0 3 4  -> Don't interpret \"meta\" key.  (This disables\r\n   *     the eightBitInput resource).\r\n   *     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-\r\n   *     Lock keys.  (This disables the numLock resource).\r\n   *     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.\r\n   *     (This disables the metaSendsEscape resource).\r\n   *     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad\r\n   *     Delete key.\r\n   *     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.\r\n   *     (This disables the altSendsEscape resource).\r\n   *     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.\r\n   *     (This disables the keepSelection resource).\r\n   *     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables\r\n   *     the selectToClipboard resource).\r\n   *     Ps = 1 0 4 2  -> Disable Urgency window manager hint when\r\n   *     Control-G is received.  (This disables the bellIsUrgent\r\n   *     resource).\r\n   *     Ps = 1 0 4 3  -> Disable raising of the window when Control-\r\n   *     G is received.  (This disables the popOnBell resource).\r\n   *     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen\r\n   *     first if in the Alternate Screen.  (This may be disabled by\r\n   *     the titeInhibit resource).\r\n   *     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be\r\n   *     disabled by the titeInhibit resource).\r\n   *     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor\r\n   *     as in DECRC.  (This may be disabled by the titeInhibit\r\n   *     resource).  This combines the effects of the 1 0 4 7  and 1 0\r\n   *     4 8  modes.  Use this with terminfo-based applications rather\r\n   *     than the 4 7  mode.\r\n   *     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.\r\n   *     Ps = 1 0 5 1  -> Reset Sun function-key mode.\r\n   *     Ps = 1 0 5 2  -> Reset HP function-key mode.\r\n   *     Ps = 1 0 5 3  -> Reset SCO function-key mode.\r\n   *     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).\r\n   *     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.\r\n   *     Ps = 2 0 0 4  -> Reset bracketed paste mode.\r\n   */\r\n  public resetMode(params: number[], collect?: string): void {\r\n    if (params.length > 1) {\r\n      for (let i = 0; i < params.length; i++) {\r\n        this.resetMode([params[i]]);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!collect) {\r\n      switch (params[0]) {\r\n        case 4:\r\n          this._terminal.insertMode = false;\r\n          break;\r\n        case 20:\r\n          // this._t.convertEol = false;\r\n          break;\r\n      }\r\n    } else if (collect === '?') {\r\n      switch (params[0]) {\r\n        case 1:\r\n          this._terminal.applicationCursor = false;\r\n          break;\r\n        case 3:\r\n          if (this._terminal.cols === 132 && this._terminal.savedCols) {\r\n            this._terminal.resize(this._terminal.savedCols, this._terminal.rows);\r\n          }\r\n          delete this._terminal.savedCols;\r\n          break;\r\n        case 6:\r\n          this._terminal.originMode = false;\r\n          break;\r\n        case 7:\r\n          this._terminal.wraparoundMode = false;\r\n          break;\r\n        case 12:\r\n          // this.cursorBlink = false;\r\n          break;\r\n        case 66:\r\n          this._terminal.log('Switching back to normal keypad.');\r\n          this._terminal.applicationKeypad = false;\r\n          if (this._terminal.viewport) {\r\n            this._terminal.viewport.syncScrollArea();\r\n          }\r\n          break;\r\n        case 9: // X10 Mouse\r\n        case 1000: // vt200 mouse\r\n        case 1002: // button event mouse\r\n        case 1003: // any event mouse\r\n          this._terminal.x10Mouse = false;\r\n          this._terminal.vt200Mouse = false;\r\n          this._terminal.normalMouse = false;\r\n          this._terminal.mouseEvents = false;\r\n          if (this._terminal.element) {\r\n            this._terminal.element.classList.remove('enable-mouse-events');\r\n          }\r\n          this._terminal.selectionManager.enable();\r\n          break;\r\n        case 1004: // send focusin/focusout events\r\n          this._terminal.sendFocus = false;\r\n          break;\r\n        case 1005: // utf8 ext mode mouse\r\n          this._terminal.utfMouse = false;\r\n          break;\r\n        case 1006: // sgr ext mode mouse\r\n          this._terminal.sgrMouse = false;\r\n          break;\r\n        case 1015: // urxvt ext mode mouse\r\n          this._terminal.urxvtMouse = false;\r\n          break;\r\n        case 25: // hide cursor\r\n          this._terminal.cursorHidden = true;\r\n          break;\r\n        case 1048: // alt screen cursor\r\n          this.restoreCursor(params);\r\n          break;\r\n        case 1049: // alt screen buffer cursor\r\n           // FALL-THROUGH\r\n        case 47: // normal screen buffer\r\n        case 1047: // normal screen buffer - clearing it first\r\n          // Ensure the selection manager has the correct buffer\r\n          this._terminal.buffers.activateNormalBuffer();\r\n          if (params[0] === 1049) {\r\n            this.restoreCursor(params);\r\n          }\r\n          this._terminal.refresh(0, this._terminal.rows - 1);\r\n          if (this._terminal.viewport) {\r\n            this._terminal.viewport.syncScrollArea();\r\n          }\r\n          this._terminal.showCursor();\r\n          break;\r\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\r\n          this._terminal.bracketedPasteMode = false;\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm m  Character Attributes (SGR).\r\n   *     Ps = 0  -> Normal (default).\r\n   *     Ps = 1  -> Bold.\r\n   *     Ps = 2  -> Faint, decreased intensity (ISO 6429).\r\n   *     Ps = 4  -> Underlined.\r\n   *     Ps = 5  -> Blink (appears as Bold).\r\n   *     Ps = 7  -> Inverse.\r\n   *     Ps = 8  -> Invisible, i.e., hidden (VT300).\r\n   *     Ps = 2 2  -> Normal (neither bold nor faint).\r\n   *     Ps = 2 4  -> Not underlined.\r\n   *     Ps = 2 5  -> Steady (not blinking).\r\n   *     Ps = 2 7  -> Positive (not inverse).\r\n   *     Ps = 2 8  -> Visible, i.e., not hidden (VT300).\r\n   *     Ps = 3 0  -> Set foreground color to Black.\r\n   *     Ps = 3 1  -> Set foreground color to Red.\r\n   *     Ps = 3 2  -> Set foreground color to Green.\r\n   *     Ps = 3 3  -> Set foreground color to Yellow.\r\n   *     Ps = 3 4  -> Set foreground color to Blue.\r\n   *     Ps = 3 5  -> Set foreground color to Magenta.\r\n   *     Ps = 3 6  -> Set foreground color to Cyan.\r\n   *     Ps = 3 7  -> Set foreground color to White.\r\n   *     Ps = 3 9  -> Set foreground color to default (original).\r\n   *     Ps = 4 0  -> Set background color to Black.\r\n   *     Ps = 4 1  -> Set background color to Red.\r\n   *     Ps = 4 2  -> Set background color to Green.\r\n   *     Ps = 4 3  -> Set background color to Yellow.\r\n   *     Ps = 4 4  -> Set background color to Blue.\r\n   *     Ps = 4 5  -> Set background color to Magenta.\r\n   *     Ps = 4 6  -> Set background color to Cyan.\r\n   *     Ps = 4 7  -> Set background color to White.\r\n   *     Ps = 4 9  -> Set background color to default (original).\r\n   *\r\n   *   If 16-color support is compiled, the following apply.  Assume\r\n   *   that xterm's resources are set so that the ISO color codes are\r\n   *   the first 8 of a set of 16.  Then the aixterm colors are the\r\n   *   bright versions of the ISO colors:\r\n   *     Ps = 9 0  -> Set foreground color to Black.\r\n   *     Ps = 9 1  -> Set foreground color to Red.\r\n   *     Ps = 9 2  -> Set foreground color to Green.\r\n   *     Ps = 9 3  -> Set foreground color to Yellow.\r\n   *     Ps = 9 4  -> Set foreground color to Blue.\r\n   *     Ps = 9 5  -> Set foreground color to Magenta.\r\n   *     Ps = 9 6  -> Set foreground color to Cyan.\r\n   *     Ps = 9 7  -> Set foreground color to White.\r\n   *     Ps = 1 0 0  -> Set background color to Black.\r\n   *     Ps = 1 0 1  -> Set background color to Red.\r\n   *     Ps = 1 0 2  -> Set background color to Green.\r\n   *     Ps = 1 0 3  -> Set background color to Yellow.\r\n   *     Ps = 1 0 4  -> Set background color to Blue.\r\n   *     Ps = 1 0 5  -> Set background color to Magenta.\r\n   *     Ps = 1 0 6  -> Set background color to Cyan.\r\n   *     Ps = 1 0 7  -> Set background color to White.\r\n   *\r\n   *   If xterm is compiled with the 16-color support disabled, it\r\n   *   supports the following, from rxvt:\r\n   *     Ps = 1 0 0  -> Set foreground and background color to\r\n   *     default.\r\n   *\r\n   *   If 88- or 256-color support is compiled, the following apply.\r\n   *     Ps = 3 8  ; 5  ; Ps -> Set foreground color to the second\r\n   *     Ps.\r\n   *     Ps = 4 8  ; 5  ; Ps -> Set background color to the second\r\n   *     Ps.\r\n   */\r\n  public charAttributes(params: number[]): void {\r\n    // Optimize a single SGR0.\r\n    if (params.length === 1 && params[0] === 0) {\r\n      this._terminal.curAttr = DEFAULT_ATTR;\r\n      return;\r\n    }\r\n\r\n    const l = params.length;\r\n    let flags = this._terminal.curAttr >> 18;\r\n    let fg = (this._terminal.curAttr >> 9) & 0x1ff;\r\n    let bg = this._terminal.curAttr & 0x1ff;\r\n    let p;\r\n\r\n    for (let i = 0; i < l; i++) {\r\n      p = params[i];\r\n      if (p >= 30 && p <= 37) {\r\n        // fg color 8\r\n        fg = p - 30;\r\n      } else if (p >= 40 && p <= 47) {\r\n        // bg color 8\r\n        bg = p - 40;\r\n      } else if (p >= 90 && p <= 97) {\r\n        // fg color 16\r\n        p += 8;\r\n        fg = p - 90;\r\n      } else if (p >= 100 && p <= 107) {\r\n        // bg color 16\r\n        p += 8;\r\n        bg = p - 100;\r\n      } else if (p === 0) {\r\n        // default\r\n        flags = DEFAULT_ATTR >> 18;\r\n        fg = (DEFAULT_ATTR >> 9) & 0x1ff;\r\n        bg = DEFAULT_ATTR & 0x1ff;\r\n        // flags = 0;\r\n        // fg = 0x1ff;\r\n        // bg = 0x1ff;\r\n      } else if (p === 1) {\r\n        // bold text\r\n        flags |= FLAGS.BOLD;\r\n      } else if (p === 3) {\r\n        // italic text\r\n        flags |= FLAGS.ITALIC;\r\n      } else if (p === 4) {\r\n        // underlined text\r\n        flags |= FLAGS.UNDERLINE;\r\n      } else if (p === 5) {\r\n        // blink\r\n        flags |= FLAGS.BLINK;\r\n      } else if (p === 7) {\r\n        // inverse and positive\r\n        // test with: echo -e '\\e[31m\\e[42mhello\\e[7mworld\\e[27mhi\\e[m'\r\n        flags |= FLAGS.INVERSE;\r\n      } else if (p === 8) {\r\n        // invisible\r\n        flags |= FLAGS.INVISIBLE;\r\n      } else if (p === 2) {\r\n        // dimmed text\r\n        flags |= FLAGS.DIM;\r\n      } else if (p === 22) {\r\n        // not bold nor faint\r\n        flags &= ~FLAGS.BOLD;\r\n        flags &= ~FLAGS.DIM;\r\n      } else if (p === 23) {\r\n        // not italic\r\n        flags &= ~FLAGS.ITALIC;\r\n      } else if (p === 24) {\r\n        // not underlined\r\n        flags &= ~FLAGS.UNDERLINE;\r\n      } else if (p === 25) {\r\n        // not blink\r\n        flags &= ~FLAGS.BLINK;\r\n      } else if (p === 27) {\r\n        // not inverse\r\n        flags &= ~FLAGS.INVERSE;\r\n      } else if (p === 28) {\r\n        // not invisible\r\n        flags &= ~FLAGS.INVISIBLE;\r\n      } else if (p === 39) {\r\n        // reset fg\r\n        fg = (DEFAULT_ATTR >> 9) & 0x1ff;\r\n      } else if (p === 49) {\r\n        // reset bg\r\n        bg = DEFAULT_ATTR & 0x1ff;\r\n      } else if (p === 38) {\r\n        // fg color 256\r\n        if (params[i + 1] === 2) {\r\n          i += 2;\r\n          fg = this._terminal.matchColor(\r\n            params[i] & 0xff,\r\n            params[i + 1] & 0xff,\r\n            params[i + 2] & 0xff);\r\n          if (fg === -1) fg = 0x1ff;\r\n          i += 2;\r\n        } else if (params[i + 1] === 5) {\r\n          i += 2;\r\n          p = params[i] & 0xff;\r\n          fg = p;\r\n        }\r\n      } else if (p === 48) {\r\n        // bg color 256\r\n        if (params[i + 1] === 2) {\r\n          i += 2;\r\n          bg = this._terminal.matchColor(\r\n            params[i] & 0xff,\r\n            params[i + 1] & 0xff,\r\n            params[i + 2] & 0xff);\r\n          if (bg === -1) bg = 0x1ff;\r\n          i += 2;\r\n        } else if (params[i + 1] === 5) {\r\n          i += 2;\r\n          p = params[i] & 0xff;\r\n          bg = p;\r\n        }\r\n      } else if (p === 100) {\r\n        // reset fg/bg\r\n        fg = (DEFAULT_ATTR >> 9) & 0x1ff;\r\n        bg = DEFAULT_ATTR & 0x1ff;\r\n      } else {\r\n        this._terminal.error('Unknown SGR attribute: %d.', p);\r\n      }\r\n    }\r\n\r\n    this._terminal.curAttr = (flags << 18) | (fg << 9) | bg;\r\n  }\r\n\r\n  /**\r\n   * CSI Ps n  Device Status Report (DSR).\r\n   *     Ps = 5  -> Status Report.  Result (``OK'') is\r\n   *   CSI 0 n\r\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column].\r\n   *   Result is\r\n   *   CSI r ; c R\r\n   * CSI ? Ps n\r\n   *   Device Status Report (DSR, DEC-specific).\r\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\r\n   *     ? r ; c R (assumes page is zero).\r\n   *     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\r\n   *     or CSI ? 1 1  n  (not ready).\r\n   *     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\r\n   *     or CSI ? 2 1  n  (locked).\r\n   *     Ps = 2 6  -> Report Keyboard status as\r\n   *   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\r\n   *   The last two parameters apply to VT400 & up, and denote key-\r\n   *   board ready and LK01 respectively.\r\n   *     Ps = 5 3  -> Report Locator status as\r\n   *   CSI ? 5 3  n  Locator available, if compiled-in, or\r\n   *   CSI ? 5 0  n  No Locator, if not.\r\n   */\r\n  public deviceStatus(params: number[], collect?: string): void {\r\n    if (!collect) {\r\n      switch (params[0]) {\r\n        case 5:\r\n          // status report\r\n          this._terminal.emit('data', `${C0.ESC}[0n`);\r\n          break;\r\n        case 6:\r\n          // cursor position\r\n          const y = this._terminal.buffer.y + 1;\r\n          const x = this._terminal.buffer.x + 1;\r\n          this._terminal.emit('data', `${C0.ESC}[${y};${x}R`);\r\n          break;\r\n      }\r\n    } else if (collect === '?') {\r\n      // modern xterm doesnt seem to\r\n      // respond to any of these except ?6, 6, and 5\r\n      switch (params[0]) {\r\n        case 6:\r\n          // cursor position\r\n          const y = this._terminal.buffer.y + 1;\r\n          const x = this._terminal.buffer.x + 1;\r\n          this._terminal.emit('data', `${C0.ESC}[?${y};${x}R`);\r\n          break;\r\n        case 15:\r\n          // no printer\r\n          // this.handler(C0.ESC + '[?11n');\r\n          break;\r\n        case 25:\r\n          // dont support user defined keys\r\n          // this.handler(C0.ESC + '[?21n');\r\n          break;\r\n        case 26:\r\n          // north american keyboard\r\n          // this.handler(C0.ESC + '[?27;1;0;0n');\r\n          break;\r\n        case 53:\r\n          // no dec locator/mouse\r\n          // this.handler(C0.ESC + '[?50n');\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI ! p   Soft terminal reset (DECSTR).\r\n   * http://vt100.net/docs/vt220-rm/table4-10.html\r\n   */\r\n  public softReset(params: number[], collect?: string): void {\r\n    if (collect === '!') {\r\n      this._terminal.cursorHidden = false;\r\n      this._terminal.insertMode = false;\r\n      this._terminal.originMode = false;\r\n      this._terminal.wraparoundMode = true;  // defaults: xterm - true, vt100 - false\r\n      this._terminal.applicationKeypad = false; // ?\r\n      if (this._terminal.viewport) {\r\n        this._terminal.viewport.syncScrollArea();\r\n      }\r\n      this._terminal.applicationCursor = false;\r\n      this._terminal.buffer.scrollTop = 0;\r\n      this._terminal.buffer.scrollBottom = this._terminal.rows - 1;\r\n      this._terminal.curAttr = DEFAULT_ATTR;\r\n      this._terminal.buffer.x = this._terminal.buffer.y = 0; // ?\r\n      this._terminal.charset = null;\r\n      this._terminal.glevel = 0; // ??\r\n      this._terminal.charsets = [null]; // ??\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps SP q  Set cursor style (DECSCUSR, VT520).\r\n   *   Ps = 0  -> blinking block.\r\n   *   Ps = 1  -> blinking block (default).\r\n   *   Ps = 2  -> steady block.\r\n   *   Ps = 3  -> blinking underline.\r\n   *   Ps = 4  -> steady underline.\r\n   *   Ps = 5  -> blinking bar (xterm).\r\n   *   Ps = 6  -> steady bar (xterm).\r\n   */\r\n  public setCursorStyle(params?: number[], collect?: string): void {\r\n    if (collect === ' ') {\r\n      const param = params[0] < 1 ? 1 : params[0];\r\n      switch (param) {\r\n        case 1:\r\n        case 2:\r\n          this._terminal.setOption('cursorStyle', 'block');\r\n          break;\r\n        case 3:\r\n        case 4:\r\n          this._terminal.setOption('cursorStyle', 'underline');\r\n          break;\r\n        case 5:\r\n        case 6:\r\n          this._terminal.setOption('cursorStyle', 'bar');\r\n          break;\r\n      }\r\n      const isBlinking = param % 2 === 1;\r\n      this._terminal.setOption('cursorBlink', isBlinking);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps ; Ps r\r\n   *   Set Scrolling Region [top;bottom] (default = full size of win-\r\n   *   dow) (DECSTBM).\r\n   * CSI ? Pm r\r\n   */\r\n  public setScrollRegion(params: number[], collect?: string): void {\r\n    if (collect) return;\r\n    this._terminal.buffer.scrollTop = (params[0] || 1) - 1;\r\n    this._terminal.buffer.scrollBottom = (params[1] && params[1] <= this._terminal.rows ? params[1] : this._terminal.rows) - 1;\r\n    this._terminal.buffer.x = 0;\r\n    this._terminal.buffer.y = 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * CSI s\r\n   * ESC 7\r\n   *   Save cursor (ANSI.SYS).\r\n   */\r\n  public saveCursor(params: number[]): void {\r\n    this._terminal.buffer.savedX = this._terminal.buffer.x;\r\n    this._terminal.buffer.savedY = this._terminal.buffer.y;\r\n    this._terminal.buffer.savedCurAttr = this._terminal.curAttr;\r\n  }\r\n\r\n\r\n  /**\r\n   * CSI u\r\n   * ESC 8\r\n   *   Restore cursor (ANSI.SYS).\r\n   */\r\n  public restoreCursor(params: number[]): void {\r\n    this._terminal.buffer.x = this._terminal.buffer.savedX || 0;\r\n    this._terminal.buffer.y = this._terminal.buffer.savedY || 0;\r\n    this._terminal.curAttr = this._terminal.buffer.savedCurAttr || DEFAULT_ATTR;\r\n  }\r\n\r\n\r\n  /**\r\n   * OSC 0; <data> ST (set icon name + window title)\r\n   * OSC 2; <data> ST (set window title)\r\n   *   Proxy to set window title. Icon name is not supported.\r\n   */\r\n  public setTitle(data: string): void {\r\n    this._terminal.handleTitle(data);\r\n  }\r\n\r\n  /**\r\n   * ESC E\r\n   * C1.NEL\r\n   *   DEC mnemonic: NEL (https://vt100.net/docs/vt510-rm/NEL)\r\n   *   Moves cursor to first position on next line.\r\n   */\r\n  public nextLine(): void {\r\n    this._terminal.buffer.x = 0;\r\n    this.index();\r\n  }\r\n\r\n  /**\r\n   * ESC =\r\n   *   DEC mnemonic: DECKPAM (https://vt100.net/docs/vt510-rm/DECKPAM.html)\r\n   *   Enables the numeric keypad to send application sequences to the host.\r\n   */\r\n  public keypadApplicationMode(): void {\r\n    this._terminal.log('Serial port requested application keypad.');\r\n    this._terminal.applicationKeypad = true;\r\n    if (this._terminal.viewport) {\r\n      this._terminal.viewport.syncScrollArea();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ESC >\r\n   *   DEC mnemonic: DECKPNM (https://vt100.net/docs/vt510-rm/DECKPNM.html)\r\n   *   Enables the keypad to send numeric characters to the host.\r\n   */\r\n  public keypadNumericMode(): void {\r\n    this._terminal.log('Switching back to normal keypad.');\r\n    this._terminal.applicationKeypad = false;\r\n    if (this._terminal.viewport) {\r\n      this._terminal.viewport.syncScrollArea();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ESC % @\r\n   * ESC % G\r\n   *   Select default character set. UTF-8 is not supported (string are unicode anyways)\r\n   *   therefore ESC % G does the same.\r\n   */\r\n  public selectDefaultCharset(): void {\r\n    this._terminal.setgLevel(0);\r\n    this._terminal.setgCharset(0, DEFAULT_CHARSET); // US (default)\r\n  }\r\n\r\n  /**\r\n   * ESC ( C\r\n   *   Designate G0 Character Set, VT100, ISO 2022.\r\n   * ESC ) C\r\n   *   Designate G1 Character Set (ISO 2022, VT100).\r\n   * ESC * C\r\n   *   Designate G2 Character Set (ISO 2022, VT220).\r\n   * ESC + C\r\n   *   Designate G3 Character Set (ISO 2022, VT220).\r\n   * ESC - C\r\n   *   Designate G1 Character Set (VT300).\r\n   * ESC . C\r\n   *   Designate G2 Character Set (VT300).\r\n   * ESC / C\r\n   *   Designate G3 Character Set (VT300). C = A  -> ISO Latin-1 Supplemental. - Supported?\r\n   */\r\n  public selectCharset(collectAndFlag: string): void {\r\n    if (collectAndFlag.length !== 2) return this.selectDefaultCharset();\r\n    if (collectAndFlag[0] === '/') return;  // TODO: Is this supported?\r\n    this._terminal.setgCharset(GLEVEL[collectAndFlag[0]], CHARSETS[collectAndFlag[1]] || DEFAULT_CHARSET);\r\n  }\r\n\r\n  /**\r\n   * ESC D\r\n   * C1.IND\r\n   *   DEC mnemonic: IND (https://vt100.net/docs/vt510-rm/IND.html)\r\n   *   Moves the cursor down one line in the same column.\r\n   */\r\n  public index(): void {\r\n    this._terminal.index();  // TODO: save to move from terminal?\r\n  }\r\n\r\n  /**\r\n   * ESC H\r\n   * C1.HTS\r\n   *   DEC mnemonic: HTS (https://vt100.net/docs/vt510-rm/HTS.html)\r\n   *   Sets a horizontal tab stop at the column position indicated by\r\n   *   the value of the active column when the terminal receives an HTS.\r\n   */\r\n  public tabSet(): void {\r\n    this._terminal.tabSet();  // TODO: save to move from terminal?\r\n  }\r\n\r\n  /**\r\n   * ESC M\r\n   * C1.RI\r\n   *   DEC mnemonic: HTS\r\n   *   Moves the cursor up one line in the same column. If the cursor is at the top margin,\r\n   *   the page scrolls down.\r\n   */\r\n  public reverseIndex(): void {\r\n    this._terminal.reverseIndex();  // TODO: save to move from terminal?\r\n  }\r\n\r\n  /**\r\n   * ESC c\r\n   *   DEC mnemonic: RIS (https://vt100.net/docs/vt510-rm/RIS.html)\r\n   *   Reset to initial state.\r\n   */\r\n  public reset(): void {\r\n    this._parser.reset();\r\n    this._terminal.reset();  // TODO: save to move from terminal?\r\n  }\r\n\r\n  /**\r\n   * ESC n\r\n   * ESC o\r\n   * ESC |\r\n   * ESC }\r\n   * ESC ~\r\n   *   DEC mnemonic: LS (https://vt100.net/docs/vt510-rm/LS.html)\r\n   *   When you use a locking shift, the character set remains in GL or GR until\r\n   *   you use another locking shift. (partly supported)\r\n   */\r\n  public setgLevel(level: number): void {\r\n    this._terminal.setgLevel(level);  // TODO: save to move from terminal?\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ParserState, ParserAction, IParsingState, IDcsHandler, IEscapeSequenceParser } from './Types';\r\nimport { IDisposable } from 'xterm';\r\nimport { Disposable } from './common/Lifecycle';\r\nimport { utf32ToString } from './core/input/TextDecoder';\r\n\r\ninterface IHandlerCollection<T> {\r\n  [key: string]: T[];\r\n}\r\n\r\ntype CsiHandler = (params: number[], collect: string) => boolean | void;\r\ntype OscHandler = (data: string) => boolean | void;\r\n\r\n/**\r\n * Returns an array filled with numbers between the low and high parameters (right exclusive).\r\n * @param low The low number.\r\n * @param high The high number.\r\n */\r\nfunction r(low: number, high: number): number[] {\r\n  let c = high - low;\r\n  const arr = new Array(c);\r\n  while (c--) {\r\n    arr[c] = --high;\r\n  }\r\n  return arr;\r\n}\r\n\r\n/**\r\n * Transition table for EscapeSequenceParser.\r\n * NOTE: data in the underlying table is packed like this:\r\n *   currentState << 8 | characterCode  -->  action << 4 | nextState\r\n */\r\nexport class TransitionTable {\r\n  public table: Uint8Array | number[];\r\n\r\n  constructor(length: number) {\r\n    this.table = (typeof Uint8Array === 'undefined')\r\n      ? new Array(length)\r\n      : new Uint8Array(length);\r\n  }\r\n\r\n  /**\r\n   * Add a transition to the transition table.\r\n   * @param code input character code\r\n   * @param state current parser state\r\n   * @param action parser action to be done\r\n   * @param next next parser state\r\n   */\r\n  add(code: number, state: number, action: number | null, next: number | null): void {\r\n    this.table[state << 8 | code] = ((action | 0) << 4) | ((next === undefined) ? state : next);\r\n  }\r\n\r\n  /**\r\n   * Add transitions for multiple input character codes.\r\n   * @param codes input character code array\r\n   * @param state current parser state\r\n   * @param action parser action to be done\r\n   * @param next next parser state\r\n   */\r\n  addMany(codes: number[], state: number, action: number | null, next: number | null): void {\r\n    for (let i = 0; i < codes.length; i++) {\r\n      this.add(codes[i], state, action, next);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Default definitions for the VT500_TRANSITION_TABLE.\r\n */\r\nconst PRINTABLES = r(0x20, 0x7f);\r\nconst EXECUTABLES = r(0x00, 0x18);\r\nEXECUTABLES.push(0x19);\r\nEXECUTABLES.push.apply(EXECUTABLES, r(0x1c, 0x20));\r\n// Pseudo-character placeholder for printable non-ascii characters.\r\nconst NON_ASCII_PRINTABLE = 0xA0;\r\n\r\n/**\r\n * VT500 compatible transition table.\r\n * Taken from https://vt100.net/emu/dec_ansi_parser.\r\n */\r\nexport const VT500_TRANSITION_TABLE = (function (): TransitionTable {\r\n  const table: TransitionTable = new TransitionTable(4095);\r\n\r\n  const states: number[] = r(ParserState.GROUND, ParserState.DCS_PASSTHROUGH + 1);\r\n  let state: any;\r\n\r\n  // table with default transition\r\n  for (state in states) {\r\n    // NOTE: table lookup is capped at 0xa0 in parse to keep the table small\r\n    for (let code = 0; code <= NON_ASCII_PRINTABLE; ++code) {\r\n      table.add(code, state, ParserAction.ERROR, ParserState.GROUND);\r\n    }\r\n  }\r\n  // printables\r\n  table.addMany(PRINTABLES, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\r\n  // global anywhere rules\r\n  for (state in states) {\r\n    table.addMany([0x18, 0x1a, 0x99, 0x9a], state, ParserAction.EXECUTE, ParserState.GROUND);\r\n    table.addMany(r(0x80, 0x90), state, ParserAction.EXECUTE, ParserState.GROUND);\r\n    table.addMany(r(0x90, 0x98), state, ParserAction.EXECUTE, ParserState.GROUND);\r\n    table.add(0x9c, state, ParserAction.IGNORE, ParserState.GROUND); // ST as terminator\r\n    table.add(0x1b, state, ParserAction.CLEAR, ParserState.ESCAPE);  // ESC\r\n    table.add(0x9d, state, ParserAction.OSC_START, ParserState.OSC_STRING);  // OSC\r\n    table.addMany([0x98, 0x9e, 0x9f], state, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\r\n    table.add(0x9b, state, ParserAction.CLEAR, ParserState.CSI_ENTRY);  // CSI\r\n    table.add(0x90, state, ParserAction.CLEAR, ParserState.DCS_ENTRY);  // DCS\r\n  }\r\n  // rules for executables and 7f\r\n  table.addMany(EXECUTABLES, ParserState.GROUND, ParserAction.EXECUTE, ParserState.GROUND);\r\n  table.addMany(EXECUTABLES, ParserState.ESCAPE, ParserAction.EXECUTE, ParserState.ESCAPE);\r\n  table.add(0x7f, ParserState.ESCAPE, ParserAction.IGNORE, ParserState.ESCAPE);\r\n  table.addMany(EXECUTABLES, ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\r\n  table.addMany(EXECUTABLES, ParserState.CSI_ENTRY, ParserAction.EXECUTE, ParserState.CSI_ENTRY);\r\n  table.add(0x7f, ParserState.CSI_ENTRY, ParserAction.IGNORE, ParserState.CSI_ENTRY);\r\n  table.addMany(EXECUTABLES, ParserState.CSI_PARAM, ParserAction.EXECUTE, ParserState.CSI_PARAM);\r\n  table.add(0x7f, ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_PARAM);\r\n  table.addMany(EXECUTABLES, ParserState.CSI_IGNORE, ParserAction.EXECUTE, ParserState.CSI_IGNORE);\r\n  table.addMany(EXECUTABLES, ParserState.CSI_INTERMEDIATE, ParserAction.EXECUTE, ParserState.CSI_INTERMEDIATE);\r\n  table.add(0x7f, ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_INTERMEDIATE);\r\n  table.addMany(EXECUTABLES, ParserState.ESCAPE_INTERMEDIATE, ParserAction.EXECUTE, ParserState.ESCAPE_INTERMEDIATE);\r\n  table.add(0x7f, ParserState.ESCAPE_INTERMEDIATE, ParserAction.IGNORE, ParserState.ESCAPE_INTERMEDIATE);\r\n  // osc\r\n  table.add(0x5d, ParserState.ESCAPE, ParserAction.OSC_START, ParserState.OSC_STRING);\r\n  table.addMany(PRINTABLES, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\r\n  table.add(0x7f, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\r\n  table.addMany([0x9c, 0x1b, 0x18, 0x1a, 0x07], ParserState.OSC_STRING, ParserAction.OSC_END, ParserState.GROUND);\r\n  table.addMany(r(0x1c, 0x20), ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\r\n  // sos/pm/apc does nothing\r\n  table.addMany([0x58, 0x5e, 0x5f], ParserState.ESCAPE, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\r\n  table.addMany(PRINTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\r\n  table.addMany(EXECUTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\r\n  table.add(0x9c, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.GROUND);\r\n  table.add(0x7f, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\r\n  // csi entries\r\n  table.add(0x5b, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.CSI_ENTRY);\r\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_ENTRY, ParserAction.CSI_DISPATCH, ParserState.GROUND);\r\n  table.addMany(r(0x30, 0x3a), ParserState.CSI_ENTRY, ParserAction.PARAM, ParserState.CSI_PARAM);\r\n  table.add(0x3b, ParserState.CSI_ENTRY, ParserAction.PARAM, ParserState.CSI_PARAM);\r\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_PARAM);\r\n  table.addMany(r(0x30, 0x3a), ParserState.CSI_PARAM, ParserAction.PARAM, ParserState.CSI_PARAM);\r\n  table.add(0x3b, ParserState.CSI_PARAM, ParserAction.PARAM, ParserState.CSI_PARAM);\r\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_PARAM, ParserAction.CSI_DISPATCH, ParserState.GROUND);\r\n  table.addMany([0x3a, 0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_IGNORE);\r\n  table.addMany(r(0x20, 0x40), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\r\n  table.add(0x7f, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\r\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.GROUND);\r\n  table.add(0x3a, ParserState.CSI_ENTRY, ParserAction.IGNORE, ParserState.CSI_IGNORE);\r\n  table.addMany(r(0x20, 0x30), ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\r\n  table.addMany(r(0x20, 0x30), ParserState.CSI_INTERMEDIATE, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\r\n  table.addMany(r(0x30, 0x40), ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\r\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_INTERMEDIATE, ParserAction.CSI_DISPATCH, ParserState.GROUND);\r\n  table.addMany(r(0x20, 0x30), ParserState.CSI_PARAM, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\r\n  // esc_intermediate\r\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\r\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE_INTERMEDIATE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\r\n  table.addMany(r(0x30, 0x7f), ParserState.ESCAPE_INTERMEDIATE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\r\n  table.addMany(r(0x30, 0x50), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\r\n  table.addMany(r(0x51, 0x58), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\r\n  table.addMany([0x59, 0x5a, 0x5c], ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\r\n  table.addMany(r(0x60, 0x7f), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\r\n  // dcs entry\r\n  table.add(0x50, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.DCS_ENTRY);\r\n  table.addMany(EXECUTABLES, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\r\n  table.add(0x7f, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\r\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\r\n  table.addMany(r(0x20, 0x30), ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\r\n  table.add(0x3a, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_IGNORE);\r\n  table.addMany(r(0x30, 0x3a), ParserState.DCS_ENTRY, ParserAction.PARAM, ParserState.DCS_PARAM);\r\n  table.add(0x3b, ParserState.DCS_ENTRY, ParserAction.PARAM, ParserState.DCS_PARAM);\r\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_PARAM);\r\n  table.addMany(EXECUTABLES, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\r\n  table.addMany(r(0x20, 0x80), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\r\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\r\n  table.addMany(EXECUTABLES, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\r\n  table.add(0x7f, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\r\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\r\n  table.addMany(r(0x30, 0x3a), ParserState.DCS_PARAM, ParserAction.PARAM, ParserState.DCS_PARAM);\r\n  table.add(0x3b, ParserState.DCS_PARAM, ParserAction.PARAM, ParserState.DCS_PARAM);\r\n  table.addMany([0x3a, 0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_IGNORE);\r\n  table.addMany(r(0x20, 0x30), ParserState.DCS_PARAM, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\r\n  table.addMany(EXECUTABLES, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\r\n  table.add(0x7f, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\r\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\r\n  table.addMany(r(0x20, 0x30), ParserState.DCS_INTERMEDIATE, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\r\n  table.addMany(r(0x30, 0x40), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\r\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_INTERMEDIATE, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\r\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_PARAM, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\r\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_ENTRY, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\r\n  table.addMany(EXECUTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\r\n  table.addMany(PRINTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\r\n  table.add(0x7f, ParserState.DCS_PASSTHROUGH, ParserAction.IGNORE, ParserState.DCS_PASSTHROUGH);\r\n  table.addMany([0x1b, 0x9c], ParserState.DCS_PASSTHROUGH, ParserAction.DCS_UNHOOK, ParserState.GROUND);\r\n  table.add(NON_ASCII_PRINTABLE, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\r\n  return table;\r\n})();\r\n\r\n/**\r\n * Dummy DCS handler as default fallback.\r\n */\r\nclass DcsDummy implements IDcsHandler {\r\n  hook(collect: string, params: number[], flag: number): void { }\r\n  put(data: Uint32Array, start: number, end: number): void { }\r\n  unhook(): void { }\r\n}\r\n\r\n/**\r\n * EscapeSequenceParser.\r\n * This class implements the ANSI/DEC compatible parser described by\r\n * Paul Williams (https://vt100.net/emu/dec_ansi_parser).\r\n * To implement custom ANSI compliant escape sequences it is not needed to\r\n * alter this parser, instead consider registering a custom handler.\r\n * For non ANSI compliant sequences change the transition table with\r\n * the optional `transitions` contructor argument and\r\n * reimplement the `parse` method.\r\n * NOTE: The parameter element notation is currently not supported.\r\n * TODO: implement error recovery hook via error handler return values\r\n */\r\nexport class EscapeSequenceParser extends Disposable implements IEscapeSequenceParser {\r\n  public initialState: number;\r\n  public currentState: number;\r\n\r\n  // buffers over several parse calls\r\n  protected _osc: string;\r\n  protected _params: number[];\r\n  protected _collect: string;\r\n\r\n  // handler lookup containers\r\n  protected _printHandler: (data: Uint32Array, start: number, end: number) => void;\r\n  protected _executeHandlers: any;\r\n  protected _csiHandlers: IHandlerCollection<CsiHandler>;\r\n  protected _escHandlers: any;\r\n  protected _oscHandlers: IHandlerCollection<OscHandler>;\r\n  protected _dcsHandlers: any;\r\n  protected _activeDcsHandler: IDcsHandler | null;\r\n  protected _errorHandler: (state: IParsingState) => IParsingState;\r\n\r\n  // fallback handlers\r\n  protected _printHandlerFb: (data: Uint32Array, start: number, end: number) => void;\r\n  protected _executeHandlerFb: (code: number) => void;\r\n  protected _csiHandlerFb: (collect: string, params: number[], flag: number) => void;\r\n  protected _escHandlerFb: (collect: string, flag: number) => void;\r\n  protected _oscHandlerFb: (identifier: number, data: string) => void;\r\n  protected _dcsHandlerFb: IDcsHandler;\r\n  protected _errorHandlerFb: (state: IParsingState) => IParsingState;\r\n\r\n  constructor(readonly TRANSITIONS: TransitionTable = VT500_TRANSITION_TABLE) {\r\n    super();\r\n\r\n    this.initialState = ParserState.GROUND;\r\n    this.currentState = this.initialState;\r\n    this._osc = '';\r\n    this._params = [0];\r\n    this._collect = '';\r\n\r\n    // set default fallback handlers and handler lookup containers\r\n    this._printHandlerFb = (data, start, end): void => { };\r\n    this._executeHandlerFb = (code: number): void => { };\r\n    this._csiHandlerFb = (collect: string, params: number[], flag: number): void => { };\r\n    this._escHandlerFb = (collect: string, flag: number): void => { };\r\n    this._oscHandlerFb = (identifier: number, data: string): void => { };\r\n    this._dcsHandlerFb = new DcsDummy();\r\n    this._errorHandlerFb = (state: IParsingState): IParsingState => state;\r\n    this._printHandler = this._printHandlerFb;\r\n    this._executeHandlers = Object.create(null);\r\n    this._csiHandlers = Object.create(null);\r\n    this._escHandlers = Object.create(null);\r\n    this._oscHandlers = Object.create(null);\r\n    this._dcsHandlers = Object.create(null);\r\n    this._activeDcsHandler = null;\r\n    this._errorHandler = this._errorHandlerFb;\r\n\r\n    // swallow 7bit ST (ESC+\\)\r\n    this.setEscHandler('\\\\', () => {});\r\n  }\r\n\r\n  public dispose(): void {\r\n    this._printHandlerFb = null;\r\n    this._executeHandlerFb = null;\r\n    this._csiHandlerFb = null;\r\n    this._escHandlerFb = null;\r\n    this._oscHandlerFb = null;\r\n    this._dcsHandlerFb = null;\r\n    this._errorHandlerFb = null;\r\n    this._printHandler = null;\r\n    this._executeHandlers = null;\r\n    this._escHandlers = null;\r\n    this._csiHandlers = null;\r\n    this._oscHandlers = null;\r\n    this._dcsHandlers = null;\r\n    this._activeDcsHandler = null;\r\n    this._errorHandler = null;\r\n  }\r\n\r\n  setPrintHandler(callback: (data: Uint32Array, start: number, end: number) => void): void {\r\n    this._printHandler = callback;\r\n  }\r\n  clearPrintHandler(): void {\r\n    this._printHandler = this._printHandlerFb;\r\n  }\r\n\r\n  setExecuteHandler(flag: string, callback: () => void): void {\r\n    this._executeHandlers[flag.charCodeAt(0)] = callback;\r\n  }\r\n  clearExecuteHandler(flag: string): void {\r\n    if (this._executeHandlers[flag.charCodeAt(0)]) delete this._executeHandlers[flag.charCodeAt(0)];\r\n  }\r\n  setExecuteHandlerFallback(callback: (code: number) => void): void {\r\n    this._executeHandlerFb = callback;\r\n  }\r\n\r\n  addCsiHandler(flag: string, callback: CsiHandler): IDisposable {\r\n    const index = flag.charCodeAt(0);\r\n    if (this._csiHandlers[index] === undefined) {\r\n      this._csiHandlers[index] = [];\r\n    }\r\n    const handlerList = this._csiHandlers[index];\r\n    handlerList.push(callback);\r\n    return {\r\n      dispose: () => {\r\n        const handlerIndex = handlerList.indexOf(callback);\r\n        if (handlerIndex !== -1) {\r\n          handlerList.splice(handlerIndex, 1);\r\n        }\r\n      }\r\n    };\r\n  }\r\n  setCsiHandler(flag: string, callback: (params: number[], collect: string) => void): void {\r\n    this._csiHandlers[flag.charCodeAt(0)] = [callback];\r\n  }\r\n  clearCsiHandler(flag: string): void {\r\n    if (this._csiHandlers[flag.charCodeAt(0)]) delete this._csiHandlers[flag.charCodeAt(0)];\r\n  }\r\n  setCsiHandlerFallback(callback: (collect: string, params: number[], flag: number) => void): void {\r\n    this._csiHandlerFb = callback;\r\n  }\r\n\r\n  setEscHandler(collectAndFlag: string, callback: () => void): void {\r\n    this._escHandlers[collectAndFlag] = callback;\r\n  }\r\n  clearEscHandler(collectAndFlag: string): void {\r\n    if (this._escHandlers[collectAndFlag]) delete this._escHandlers[collectAndFlag];\r\n  }\r\n  setEscHandlerFallback(callback: (collect: string, flag: number) => void): void {\r\n    this._escHandlerFb = callback;\r\n  }\r\n\r\n  addOscHandler(ident: number, callback: (data: string) => boolean): IDisposable {\r\n    if (this._oscHandlers[ident] === undefined) {\r\n      this._oscHandlers[ident] = [];\r\n    }\r\n    const handlerList =  this._oscHandlers[ident];\r\n    handlerList.push(callback);\r\n    return {\r\n      dispose: () => {\r\n        const handlerIndex = handlerList.indexOf(callback);\r\n        if (handlerIndex !== -1) {\r\n          handlerList.splice(handlerIndex, 1);\r\n        }\r\n      }\r\n    };\r\n  }\r\n  setOscHandler(ident: number, callback: (data: string) => void): void {\r\n    this._oscHandlers[ident] = [callback];\r\n  }\r\n  clearOscHandler(ident: number): void {\r\n    if (this._oscHandlers[ident]) delete this._oscHandlers[ident];\r\n  }\r\n  setOscHandlerFallback(callback: (identifier: number, data: string) => void): void {\r\n    this._oscHandlerFb = callback;\r\n  }\r\n\r\n  setDcsHandler(collectAndFlag: string, handler: IDcsHandler): void {\r\n    this._dcsHandlers[collectAndFlag] = handler;\r\n  }\r\n  clearDcsHandler(collectAndFlag: string): void {\r\n    if (this._dcsHandlers[collectAndFlag]) delete this._dcsHandlers[collectAndFlag];\r\n  }\r\n  setDcsHandlerFallback(handler: IDcsHandler): void {\r\n    this._dcsHandlerFb = handler;\r\n  }\r\n\r\n  setErrorHandler(callback: (state: IParsingState) => IParsingState): void {\r\n    this._errorHandler = callback;\r\n  }\r\n  clearErrorHandler(): void {\r\n    this._errorHandler = this._errorHandlerFb;\r\n  }\r\n\r\n  reset(): void {\r\n    this.currentState = this.initialState;\r\n    this._osc = '';\r\n    this._params = [0];\r\n    this._collect = '';\r\n    this._activeDcsHandler = null;\r\n  }\r\n\r\n  parse(data: Uint32Array, length: number): void {\r\n    let code = 0;\r\n    let transition = 0;\r\n    let error = false;\r\n    let currentState = this.currentState;\r\n    let print = -1;\r\n    let dcs = -1;\r\n    let osc = this._osc;\r\n    let collect = this._collect;\r\n    let params = this._params;\r\n    const table: Uint8Array | number[] = this.TRANSITIONS.table;\r\n    let dcsHandler: IDcsHandler | null = this._activeDcsHandler;\r\n    let callback: Function | null = null;\r\n\r\n    // process input string\r\n    for (let i = 0; i < length; ++i) {\r\n      code = data[i];\r\n\r\n      // shortcut for most chars (print action)\r\n      if (currentState === ParserState.GROUND && code > 0x1f && code < 0x80) {\r\n        print = (~print) ? print : i;\r\n        do i++;\r\n        while (i < length && data[i] > 0x1f && data[i] < 0x80);\r\n        i--;\r\n        continue;\r\n      }\r\n\r\n      // shortcut for CSI params\r\n      if (currentState === ParserState.CSI_PARAM && (code > 0x2f && code < 0x39)) {\r\n        params[params.length - 1] = params[params.length - 1] * 10 + code - 48;\r\n        continue;\r\n      }\r\n\r\n      // normal transition & action lookup\r\n      transition = table[currentState << 8 | (code < 0xa0 ? code : NON_ASCII_PRINTABLE)];\r\n      switch (transition >> 4) {\r\n        case ParserAction.PRINT:\r\n          print = (~print) ? print : i;\r\n          break;\r\n        case ParserAction.EXECUTE:\r\n          if (~print) {\r\n            this._printHandler(data, print, i);\r\n            print = -1;\r\n          }\r\n          callback = this._executeHandlers[code];\r\n          if (callback) callback();\r\n          else this._executeHandlerFb(code);\r\n          break;\r\n        case ParserAction.IGNORE:\r\n          // handle leftover print or dcs chars\r\n          if (~print) {\r\n            this._printHandler(data, print, i);\r\n            print = -1;\r\n          } else if (~dcs) {\r\n            dcsHandler.put(data, dcs, i);\r\n            dcs = -1;\r\n          }\r\n          break;\r\n        case ParserAction.ERROR:\r\n          // chars higher than 0x9f are handled by this action\r\n          // to keep the transition table small\r\n          if (code > 0x9f) {\r\n            switch (currentState) {\r\n              case ParserState.GROUND:\r\n                print = (~print) ? print : i;\r\n                break;\r\n              case ParserState.CSI_IGNORE:\r\n                transition |= ParserState.CSI_IGNORE;\r\n                break;\r\n              case ParserState.DCS_IGNORE:\r\n                transition |= ParserState.DCS_IGNORE;\r\n                break;\r\n              case ParserState.DCS_PASSTHROUGH:\r\n                dcs = (~dcs) ? dcs : i;\r\n                transition |= ParserState.DCS_PASSTHROUGH;\r\n                break;\r\n              default:\r\n                error = true;\r\n            }\r\n          } else {\r\n            error = true;\r\n          }\r\n          // if we end up here a real error happened\r\n          if (error) {\r\n            const inject: IParsingState = this._errorHandler(\r\n              {\r\n                position: i,\r\n                code,\r\n                currentState,\r\n                print,\r\n                dcs,\r\n                osc,\r\n                collect,\r\n                params,\r\n                abort: false\r\n              });\r\n            if (inject.abort) return;\r\n          // TODO: inject return values\r\n            error = false;\r\n          }\r\n          break;\r\n        case ParserAction.CSI_DISPATCH:\r\n          // Trigger CSI Handler\r\n          const handlers = this._csiHandlers[code];\r\n          let j = handlers ? handlers.length - 1 : -1;\r\n          for (; j >= 0; j--) {\r\n            if (handlers[j](params, collect)) {\r\n              break;\r\n            }\r\n          }\r\n          if (j < 0) {\r\n            this._csiHandlerFb(collect, params, code);\r\n          }\r\n          break;\r\n        case ParserAction.PARAM:\r\n          if (code === 0x3b) params.push(0);\r\n          else params[params.length - 1] = params[params.length - 1] * 10 + code - 48;\r\n          break;\r\n        case ParserAction.COLLECT:\r\n          collect += String.fromCharCode(code);\r\n          break;\r\n        case ParserAction.ESC_DISPATCH:\r\n          callback = this._escHandlers[collect + String.fromCharCode(code)];\r\n          if (callback) callback(collect, code);\r\n          else this._escHandlerFb(collect, code);\r\n          break;\r\n        case ParserAction.CLEAR:\r\n          if (~print) {\r\n            this._printHandler(data, print, i);\r\n            print = -1;\r\n          }\r\n          osc = '';\r\n          params = [0];\r\n          collect = '';\r\n          dcs = -1;\r\n          break;\r\n        case ParserAction.DCS_HOOK:\r\n          dcsHandler = this._dcsHandlers[collect + String.fromCharCode(code)];\r\n          if (!dcsHandler) dcsHandler = this._dcsHandlerFb;\r\n          dcsHandler.hook(collect, params, code);\r\n          break;\r\n        case ParserAction.DCS_PUT:\r\n          dcs = (~dcs) ? dcs : i;\r\n          break;\r\n        case ParserAction.DCS_UNHOOK:\r\n          if (dcsHandler) {\r\n            if (~dcs) dcsHandler.put(data, dcs, i);\r\n            dcsHandler.unhook();\r\n            dcsHandler = null;\r\n          }\r\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\r\n          osc = '';\r\n          params = [0];\r\n          collect = '';\r\n          dcs = -1;\r\n          break;\r\n        case ParserAction.OSC_START:\r\n          if (~print) {\r\n            this._printHandler(data, print, i);\r\n            print = -1;\r\n          }\r\n          osc = '';\r\n          break;\r\n        case ParserAction.OSC_PUT:\r\n          for (let j = i + 1; ; j++) {\r\n            if (j >= length\r\n                || (code = data[j]) < 0x20\r\n                || (code > 0x7f && code <= 0x9f)) {\r\n              osc += utf32ToString(data, i, j);\r\n              i = j - 1;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        case ParserAction.OSC_END:\r\n          if (osc && code !== 0x18 && code !== 0x1a) {\r\n            // NOTE: OSC subparsing is not part of the original parser\r\n            // we do basic identifier parsing here to offer a jump table for OSC as well\r\n            const idx = osc.indexOf(';');\r\n            if (idx === -1) {\r\n              this._oscHandlerFb(-1, osc);  // this is an error (malformed OSC)\r\n            } else {\r\n              // Note: NaN is not handled here\r\n              // either catch it with the fallback handler\r\n              // or with an explicit NaN OSC handler\r\n              const identifier = parseInt(osc.substring(0, idx));\r\n              const content = osc.substring(idx + 1);\r\n              // Trigger OSC Handler\r\n              const handlers = this._oscHandlers[identifier];\r\n              let j = handlers ? handlers.length - 1 : -1;\r\n              for (; j >= 0; j--) {\r\n                if (handlers[j](content)) {\r\n                  break;\r\n                }\r\n              }\r\n              if (j < 0) {\r\n                this._oscHandlerFb(identifier, content);\r\n              }\r\n            }\r\n          }\r\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\r\n          osc = '';\r\n          params = [0];\r\n          collect = '';\r\n          dcs = -1;\r\n          break;\r\n      }\r\n      currentState = transition & 15;\r\n    }\r\n\r\n    // push leftover pushable buffers to terminal\r\n    if (currentState === ParserState.GROUND && ~print) {\r\n      this._printHandler(data, print, length);\r\n    } else if (currentState === ParserState.DCS_PASSTHROUGH && ~dcs && dcsHandler) {\r\n      dcsHandler.put(data, dcs, length);\r\n    }\r\n\r\n    // save non pushable buffers\r\n    this._osc = osc;\r\n    this._collect = collect;\r\n    this._params = params;\r\n\r\n    // save active dcs handler reference\r\n    this._activeDcsHandler = dcsHandler;\r\n\r\n    // save state\r\n    this.currentState = currentState;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal } from './Types';\r\n\r\ninterface IPosition {\r\n  start: number;\r\n  end: number;\r\n}\r\n\r\n/**\r\n * Encapsulates the logic for handling compositionstart, compositionupdate and compositionend\r\n * events, displaying the in-progress composition to the UI and forwarding the final composition\r\n * to the handler.\r\n */\r\nexport class CompositionHelper {\r\n  /**\r\n   * Whether input composition is currently happening, eg. via a mobile keyboard, speech input or\r\n   * IME. This variable determines whether the compositionText should be displayed on the UI.\r\n   */\r\n  private _isComposing: boolean;\r\n\r\n  /**\r\n   * The position within the input textarea's value of the current composition.\r\n   */\r\n  private _compositionPosition: IPosition;\r\n\r\n  /**\r\n   * Whether a composition is in the process of being sent, setting this to false will cancel any\r\n   * in-progress composition.\r\n   */\r\n  private _isSendingComposition: boolean;\r\n\r\n  /**\r\n   * Creates a new CompositionHelper.\r\n   * @param _textarea The textarea that xterm uses for input.\r\n   * @param _compositionView The element to display the in-progress composition in.\r\n   * @param _terminal The Terminal to forward the finished composition to.\r\n   */\r\n  constructor(\r\n    private _textarea: HTMLTextAreaElement,\r\n    private _compositionView: HTMLElement,\r\n    private _terminal: ITerminal\r\n  ) {\r\n    this._isComposing = false;\r\n    this._isSendingComposition = false;\r\n    this._compositionPosition = { start: null, end: null };\r\n  }\r\n\r\n  /**\r\n   * Handles the compositionstart event, activating the composition view.\r\n   */\r\n  public compositionstart(): void {\r\n    this._isComposing = true;\r\n    this._compositionPosition.start = this._textarea.value.length;\r\n    this._compositionView.textContent = '';\r\n    this._compositionView.classList.add('active');\r\n  }\r\n\r\n  /**\r\n   * Handles the compositionupdate event, updating the composition view.\r\n   * @param ev The event.\r\n   */\r\n  public compositionupdate(ev: CompositionEvent): void {\r\n    this._compositionView.textContent = ev.data;\r\n    this.updateCompositionElements();\r\n    setTimeout(() => {\r\n      this._compositionPosition.end = this._textarea.value.length;\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Handles the compositionend event, hiding the composition view and sending the composition to\r\n   * the handler.\r\n   */\r\n  public compositionend(): void {\r\n    this._finalizeComposition(true);\r\n  }\r\n\r\n  /**\r\n   * Handles the keydown event, routing any necessary events to the CompositionHelper functions.\r\n   * @param ev The keydown event.\r\n   * @return Whether the Terminal should continue processing the keydown event.\r\n   */\r\n  public keydown(ev: KeyboardEvent): boolean {\r\n    if (this._isComposing || this._isSendingComposition) {\r\n      if (ev.keyCode === 229) {\r\n        // Continue composing if the keyCode is the \"composition character\"\r\n        return false;\r\n      } else if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\r\n        // Continue composing if the keyCode is a modifier key\r\n        return false;\r\n      }\r\n      // Finish composition immediately. This is mainly here for the case where enter is\r\n      // pressed and the handler needs to be triggered before the command is executed.\r\n      this._finalizeComposition(false);\r\n    }\r\n\r\n    if (ev.keyCode === 229) {\r\n      // If the \"composition character\" is used but gets to this point it means a non-composition\r\n      // character (eg. numbers and punctuation) was pressed when the IME was active.\r\n      this._handleAnyTextareaChanges();\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Finalizes the composition, resuming regular input actions. This is called when a composition\r\n   * is ending.\r\n   * @param waitForPropagation Whether to wait for events to propagate before sending\r\n   *   the input. This should be false if a non-composition keystroke is entered before the\r\n   *   compositionend event is triggered, such as enter, so that the composition is sent before\r\n   *   the command is executed.\r\n   */\r\n  private _finalizeComposition(waitForPropagation: boolean): void {\r\n    this._compositionView.classList.remove('active');\r\n    this._isComposing = false;\r\n    this._clearTextareaPosition();\r\n\r\n    if (!waitForPropagation) {\r\n      // Cancel any delayed composition send requests and send the input immediately.\r\n      this._isSendingComposition = false;\r\n      const input = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);\r\n      this._terminal.handler(input);\r\n    } else {\r\n      // Make a deep copy of the composition position here as a new compositionstart event may\r\n      // fire before the setTimeout executes.\r\n      const currentCompositionPosition = {\r\n        start: this._compositionPosition.start,\r\n        end: this._compositionPosition.end\r\n      };\r\n\r\n      // Since composition* events happen before the changes take place in the textarea on most\r\n      // browsers, use a setTimeout with 0ms time to allow the native compositionend event to\r\n      // complete. This ensures the correct character is retrieved.\r\n      // This solution was used because:\r\n      // - The compositionend event's data property is unreliable, at least on Chromium\r\n      // - The last compositionupdate event's data property does not always accurately describe\r\n      //   the character, a counter example being Korean where an ending consonsant can move to\r\n      //   the following character if the following input is a vowel.\r\n      this._isSendingComposition = true;\r\n      setTimeout(() => {\r\n        // Ensure that the input has not already been sent\r\n        if (this._isSendingComposition) {\r\n          this._isSendingComposition = false;\r\n          let input;\r\n          if (this._isComposing) {\r\n            // Use the end position to get the string if a new composition has started.\r\n            input = this._textarea.value.substring(currentCompositionPosition.start, currentCompositionPosition.end);\r\n          } else {\r\n            // Don't use the end position here in order to pick up any characters after the\r\n            // composition has finished, for example when typing a non-composition character\r\n            // (eg. 2) after a composition character.\r\n            input = this._textarea.value.substring(currentCompositionPosition.start);\r\n          }\r\n          this._terminal.handler(input);\r\n        }\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply any changes made to the textarea after the current event chain is allowed to complete.\r\n   * This should be called when not currently composing but a keydown event with the \"composition\r\n   * character\" (229) is triggered, in order to allow non-composition text to be entered when an\r\n   * IME is active.\r\n   */\r\n  private _handleAnyTextareaChanges(): void {\r\n    const oldValue = this._textarea.value;\r\n    setTimeout(() => {\r\n      // Ignore if a composition has started since the timeout\r\n      if (!this._isComposing) {\r\n        const newValue = this._textarea.value;\r\n        const diff = newValue.replace(oldValue, '');\r\n        if (diff.length > 0) {\r\n          this._terminal.handler(diff);\r\n        }\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Positions the composition view on top of the cursor and the textarea just below it (so the\r\n   * IME helper dialog is positioned correctly).\r\n   * @param dontRecurse Whether to use setTimeout to recursively trigger another update, this is\r\n   *   necessary as the IME events across browsers are not consistently triggered.\r\n   */\r\n  public updateCompositionElements(dontRecurse?: boolean): void {\r\n    if (!this._isComposing) {\r\n      return;\r\n    }\r\n\r\n    if (this._terminal.buffer.isCursorInViewport) {\r\n      const cellHeight = Math.ceil(this._terminal.charMeasure.height * this._terminal.options.lineHeight);\r\n      const cursorTop = this._terminal.buffer.y * cellHeight;\r\n      const cursorLeft = this._terminal.buffer.x * this._terminal.charMeasure.width;\r\n\r\n      this._compositionView.style.left = cursorLeft + 'px';\r\n      this._compositionView.style.top = cursorTop + 'px';\r\n      this._compositionView.style.height = cellHeight + 'px';\r\n      this._compositionView.style.lineHeight = cellHeight + 'px';\r\n      // Sync the textarea to the exact position of the composition view so the IME knows where the\r\n      // text is.\r\n      const compositionViewBounds = this._compositionView.getBoundingClientRect();\r\n      this._textarea.style.left = cursorLeft + 'px';\r\n      this._textarea.style.top = cursorTop + 'px';\r\n      this._textarea.style.width = compositionViewBounds.width + 'px';\r\n      this._textarea.style.height = compositionViewBounds.height + 'px';\r\n      this._textarea.style.lineHeight = compositionViewBounds.height + 'px';\r\n    }\r\n\r\n    if (!dontRecurse) {\r\n      setTimeout(() => this.updateCompositionElements(true), 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears the textarea's position so that the cursor does not blink on IE.\r\n   * @private\r\n   */\r\n  private _clearTextareaPosition(): void {\r\n    this._textarea.style.left = '';\r\n    this._textarea.style.top = '';\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { fill } from './common/TypedArrayUtils';\r\n\r\nexport const wcwidth = (function(opts: {nul: number, control: number}): (ucs: number) => number {\r\n  // extracted from https://www.cl.cam.ac.uk/%7Emgk25/ucs/wcwidth.c\r\n  // combining characters\r\n  const COMBINING_BMP = [\r\n    [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\r\n    [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\r\n    [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\r\n    [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\r\n    [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\r\n    [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\r\n    [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\r\n    [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\r\n    [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\r\n    [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\r\n    [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\r\n    [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\r\n    [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\r\n    [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\r\n    [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\r\n    [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\r\n    [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\r\n    [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\r\n    [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\r\n    [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\r\n    [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\r\n    [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\r\n    [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\r\n    [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\r\n    [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\r\n    [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\r\n    [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\r\n    [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\r\n    [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\r\n    [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\r\n    [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\r\n    [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\r\n    [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\r\n    [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\r\n    [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\r\n    [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\r\n    [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\r\n    [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\r\n    [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\r\n    [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\r\n    [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\r\n    [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\r\n    [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB]\r\n  ];\r\n  const COMBINING_HIGH = [\r\n    [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\r\n    [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\r\n    [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\r\n    [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\r\n    [0xE0100, 0xE01EF]\r\n  ];\r\n  // binary search\r\n  function bisearch(ucs: number, data: number[][]): boolean {\r\n    let min = 0;\r\n    let max = data.length - 1;\r\n    let mid;\r\n    if (ucs < data[0][0] || ucs > data[max][1]) {\r\n      return false;\r\n    }\r\n    while (max >= min) {\r\n      mid = (min + max) >> 1;\r\n      if (ucs > data[mid][1]) {\r\n        min = mid + 1;\r\n      } else if (ucs < data[mid][0]) {\r\n        max = mid - 1;\r\n      } else {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  function wcwidthHigh(ucs: number): 0 | 1 | 2 {\r\n    if (bisearch(ucs, COMBINING_HIGH)) {\r\n      return 0;\r\n    }\r\n    if ((ucs >= 0x20000 && ucs <= 0x2fffd) || (ucs >= 0x30000 && ucs <= 0x3fffd)) {\r\n      return 2;\r\n    }\r\n    return 1;\r\n  }\r\n  const control = opts.control | 0;\r\n\r\n  // create lookup table for BMP plane\r\n  const table = new Uint8Array(65536);\r\n  fill(table, 1);\r\n  table[0] = opts.nul;\r\n  // control chars\r\n  fill(table, opts.control, 1, 32);\r\n  fill(table, opts.control, 0x7f, 0xa0);\r\n\r\n  // apply wide char rules first\r\n  // wide chars\r\n  fill(table, 2, 0x1100, 0x1160);\r\n  table[0x2329] = 2;\r\n  table[0x232a] = 2;\r\n  fill(table, 2, 0x2e80, 0xa4d0);\r\n  table[0x303f] = 1;  // wrongly in last line\r\n\r\n  fill(table, 2, 0xac00, 0xd7a4);\r\n  fill(table, 2, 0xf900, 0xfb00);\r\n  fill(table, 2, 0xfe10, 0xfe1a);\r\n  fill(table, 2, 0xfe30, 0xfe70);\r\n  fill(table, 2, 0xff00, 0xff61);\r\n  fill(table, 2, 0xffe0, 0xffe7);\r\n\r\n  // apply combining last to ensure we overwrite\r\n  // wrongly wide set chars:\r\n  //    the original algo evals combining first and falls\r\n  //    through to wide check so we simply do here the opposite\r\n  // combining 0\r\n  for (let r = 0; r < COMBINING_BMP.length; ++r) {\r\n    fill(table, 0, COMBINING_BMP[r][0], COMBINING_BMP[r][1] + 1);\r\n  }\r\n\r\n  return function (num: number): number {\r\n    if (num < 32) {\r\n      return control | 0;\r\n    }\r\n    if (num < 127) {\r\n      return 1;\r\n    }\r\n    if (num < 65536) {\r\n      return table[num];\r\n    }\r\n    // do a full search for high codepoints\r\n    return wcwidthHigh(num);\r\n  };\r\n})({nul: 0, control: 0});  // configurable options\r\n\r\n/**\r\n * Get the terminal cell width for a string.\r\n */\r\nexport function getStringCellWidth(s: string): number {\r\n  let result = 0;\r\n  const length = s.length;\r\n  for (let i = 0; i < length; ++i) {\r\n    let code = s.charCodeAt(i);\r\n    // surrogate pair first\r\n    if (0xD800 <= code && code <= 0xDBFF) {\r\n      if (++i >= length) {\r\n        // this should not happen with strings retrieved from\r\n        // Buffer.translateToString as it converts from UTF-32\r\n        // and therefore always should contain the second part\r\n        // for any other string we still have to handle it somehow:\r\n        // simply treat the lonely surrogate first as a single char (UCS-2 behavior)\r\n        return result + wcwidth(code);\r\n      }\r\n      const second = s.charCodeAt(i);\r\n      // convert surrogate pair to high codepoint only for valid second part (UTF-16)\r\n      // otherwise treat them independently (UCS-2 behavior)\r\n      if (0xDC00 <= second && second <= 0xDFFF) {\r\n        code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\r\n      } else {\r\n        result += wcwidth(second);\r\n      }\r\n    }\r\n    result += wcwidth(code);\r\n  }\r\n  return result;\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal, IBufferSet } from './Types';\r\nimport { Buffer } from './Buffer';\r\nimport { EventEmitter } from './common/EventEmitter';\r\n\r\n/**\r\n * The BufferSet represents the set of two buffers used by xterm terminals (normal and alt) and\r\n * provides also utilities for working with them.\r\n */\r\nexport class BufferSet extends EventEmitter implements IBufferSet {\r\n  private _normal: Buffer;\r\n  private _alt: Buffer;\r\n  private _activeBuffer: Buffer;\r\n\r\n  /**\r\n   * Create a new BufferSet for the given terminal.\r\n   * @param _terminal - The terminal the BufferSet will belong to\r\n   */\r\n  constructor(private _terminal: ITerminal) {\r\n    super();\r\n    this._normal = new Buffer(this._terminal, true);\r\n    this._normal.fillViewportRows();\r\n\r\n    // The alt buffer should never have scrollback.\r\n    // See http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-The-Alternate-Screen-Buffer\r\n    this._alt = new Buffer(this._terminal, false);\r\n    this._activeBuffer = this._normal;\r\n\r\n    this.setupTabStops();\r\n  }\r\n\r\n  /**\r\n   * Returns the alt Buffer of the BufferSet\r\n   */\r\n  public get alt(): Buffer {\r\n    return this._alt;\r\n  }\r\n\r\n  /**\r\n   * Returns the normal Buffer of the BufferSet\r\n   */\r\n  public get active(): Buffer {\r\n    return this._activeBuffer;\r\n  }\r\n\r\n  /**\r\n   * Returns the currently active Buffer of the BufferSet\r\n   */\r\n  public get normal(): Buffer {\r\n    return this._normal;\r\n  }\r\n\r\n  /**\r\n   * Sets the normal Buffer of the BufferSet as its currently active Buffer\r\n   */\r\n  public activateNormalBuffer(): void {\r\n    if (this._activeBuffer === this._normal) {\r\n      return;\r\n    }\r\n    this._normal.x = this._alt.x;\r\n    this._normal.y = this._alt.y;\r\n    // The alt buffer should always be cleared when we switch to the normal\r\n    // buffer. This frees up memory since the alt buffer should always be new\r\n    // when activated.\r\n    this._alt.clear();\r\n    this._activeBuffer = this._normal;\r\n    this.emit('activate', {\r\n      activeBuffer: this._normal,\r\n      inactiveBuffer: this._alt\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the alt Buffer of the BufferSet as its currently active Buffer\r\n   */\r\n  public activateAltBuffer(fillAttr?: number): void {\r\n    if (this._activeBuffer === this._alt) {\r\n      return;\r\n    }\r\n    // Since the alt buffer is always cleared when the normal buffer is\r\n    // activated, we want to fill it when switching to it.\r\n    this._alt.fillViewportRows(fillAttr);\r\n    this._alt.x = this._normal.x;\r\n    this._alt.y = this._normal.y;\r\n    this._activeBuffer = this._alt;\r\n    this.emit('activate', {\r\n      activeBuffer: this._alt,\r\n      inactiveBuffer: this._normal\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Resizes both normal and alt buffers, adjusting their data accordingly.\r\n   * @param newCols The new number of columns.\r\n   * @param newRows The new number of rows.\r\n   */\r\n  public resize(newCols: number, newRows: number): void {\r\n    this._normal.resize(newCols, newRows);\r\n    this._alt.resize(newCols, newRows);\r\n  }\r\n\r\n  /**\r\n   * Setup the tab stops.\r\n   * @param i The index to start setting up tab stops from.\r\n   */\r\n  public setupTabStops(i?: number): void {\r\n    this._normal.setupTabStops(i);\r\n    this._alt.setupTabStops(i);\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { BufferLine } from './BufferLine';\r\nimport { CircularList, IDeleteEvent } from './common/CircularList';\r\nimport { IBufferLine } from './Types';\r\nimport { FILL_CHAR_DATA } from './Buffer';\r\n\r\nexport interface INewLayoutResult {\r\n  layout: number[];\r\n  countRemoved: number;\r\n}\r\n\r\n/**\r\n * Evaluates and returns indexes to be removed after a reflow larger occurs. Lines will be removed\r\n * when a wrapped line unwraps.\r\n * @param lines The buffer lines.\r\n * @param newCols The columns after resize.\r\n */\r\nexport function reflowLargerGetLinesToRemove(lines: CircularList<IBufferLine>, newCols: number): number[] {\r\n  // Gather all BufferLines that need to be removed from the Buffer here so that they can be\r\n  // batched up and only committed once\r\n  const toRemove: number[] = [];\r\n\r\n  for (let y = 0; y < lines.length - 1; y++) {\r\n    // Check if this row is wrapped\r\n    let i = y;\r\n    let nextLine = lines.get(++i) as BufferLine;\r\n    if (!nextLine.isWrapped) {\r\n      continue;\r\n    }\r\n\r\n    // Check how many lines it's wrapped for\r\n    const wrappedLines: BufferLine[] = [lines.get(y) as BufferLine];\r\n    while (i < lines.length && nextLine.isWrapped) {\r\n      wrappedLines.push(nextLine);\r\n      nextLine = lines.get(++i) as BufferLine;\r\n    }\r\n\r\n    // Copy buffer data to new locations\r\n    let destLineIndex = 0;\r\n    let destCol = wrappedLines[destLineIndex].getTrimmedLength();\r\n    let srcLineIndex = 1;\r\n    let srcCol = 0;\r\n    while (srcLineIndex < wrappedLines.length) {\r\n      const srcTrimmedTineLength = wrappedLines[srcLineIndex].getTrimmedLength();\r\n      const srcRemainingCells = srcTrimmedTineLength - srcCol;\r\n      const destRemainingCells = newCols - destCol;\r\n      const cellsToCopy = Math.min(srcRemainingCells, destRemainingCells);\r\n\r\n      wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol, destCol, cellsToCopy, false);\r\n\r\n      destCol += cellsToCopy;\r\n      if (destCol === newCols) {\r\n        destLineIndex++;\r\n        destCol = 0;\r\n      }\r\n      srcCol += cellsToCopy;\r\n      if (srcCol === srcTrimmedTineLength) {\r\n        srcLineIndex++;\r\n        srcCol = 0;\r\n      }\r\n\r\n      // Make sure the last cell isn't wide, if it is copy it to the current dest\r\n      if (destCol === 0) {\r\n        if (wrappedLines[destLineIndex - 1].getWidth(newCols - 1) === 2) {\r\n          wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[destLineIndex - 1], newCols - 1, destCol++, 1, false);\r\n          // Null out the end of the last row\r\n          wrappedLines[destLineIndex - 1].set(newCols - 1, FILL_CHAR_DATA);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Clear out remaining cells or fragments could remain;\r\n    wrappedLines[destLineIndex].replaceCells(destCol, newCols, FILL_CHAR_DATA);\r\n\r\n    // Work backwards and remove any rows at the end that only contain null cells\r\n    let countToRemove = 0;\r\n    for (let i = wrappedLines.length - 1; i > 0; i--) {\r\n      if (i > destLineIndex || wrappedLines[i].getTrimmedLength() === 0) {\r\n        countToRemove++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (countToRemove > 0) {\r\n      toRemove.push(y + wrappedLines.length - countToRemove); // index\r\n      toRemove.push(countToRemove);\r\n    }\r\n\r\n    y += wrappedLines.length - 1;\r\n  }\r\n  return toRemove;\r\n}\r\n\r\n/**\r\n * Creates and return the new layout for lines given an array of indexes to be removed.\r\n * @param lines The buffer lines.\r\n * @param toRemove The indexes to remove.\r\n */\r\nexport function reflowLargerCreateNewLayout(lines: CircularList<IBufferLine>, toRemove: number[]): INewLayoutResult {\r\n  const layout: number[] = [];\r\n  // First iterate through the list and get the actual indexes to use for rows\r\n  let nextToRemoveIndex = 0;\r\n  let nextToRemoveStart = toRemove[nextToRemoveIndex];\r\n  let countRemovedSoFar = 0;\r\n  for (let i = 0; i < lines.length; i++) {\r\n    if (nextToRemoveStart === i) {\r\n      const countToRemove = toRemove[++nextToRemoveIndex];\r\n\r\n      // Tell markers that there was a deletion\r\n      lines.emit('delete', {\r\n        index: i - countRemovedSoFar,\r\n        amount: countToRemove\r\n      } as IDeleteEvent);\r\n\r\n      i += countToRemove - 1;\r\n      countRemovedSoFar += countToRemove;\r\n      nextToRemoveStart = toRemove[++nextToRemoveIndex];\r\n    } else {\r\n      layout.push(i);\r\n    }\r\n  }\r\n  return {\r\n    layout,\r\n    countRemoved: countRemovedSoFar\r\n  };\r\n}\r\n\r\n/**\r\n * Applies a new layout to the buffer. This essentially does the same as many splice calls but it's\r\n * done all at once in a single iteration through the list since splice is very expensive.\r\n * @param lines The buffer lines.\r\n * @param newLayout The new layout to apply.\r\n */\r\nexport function reflowLargerApplyNewLayout(lines: CircularList<IBufferLine>, newLayout: number[]): void {\r\n  // Record original lines so they don't get overridden when we rearrange the list\r\n  const newLayoutLines: BufferLine[] = [];\r\n  for (let i = 0; i < newLayout.length; i++) {\r\n    newLayoutLines.push(lines.get(newLayout[i]) as BufferLine);\r\n  }\r\n\r\n  // Rearrange the list\r\n  for (let i = 0; i < newLayoutLines.length; i++) {\r\n    lines.set(i, newLayoutLines[i]);\r\n  }\r\n  lines.length = newLayout.length;\r\n}\r\n\r\n/**\r\n * Gets the new line lengths for a given wrapped line. The purpose of this function it to pre-\r\n * compute the wrapping points since wide characters may need to be wrapped onto the following line.\r\n * This function will return an array of numbers of where each line wraps to, the resulting array\r\n * will only contain the values `newCols` (when the line does not end with a wide character) and\r\n * `newCols - 1` (when the line does end with a wide character), except for the last value which\r\n * will contain the remaining items to fill the line.\r\n *\r\n * Calling this with a `newCols` value of `1` will lock up.\r\n *\r\n * @param wrappedLines The wrapped lines to evaluate.\r\n * @param oldCols The columns before resize.\r\n * @param newCols The columns after resize.\r\n */\r\nexport function reflowSmallerGetNewLineLengths(wrappedLines: BufferLine[], oldCols: number, newCols: number): number[] {\r\n  const newLineLengths: number[] = [];\r\n\r\n  const cellsNeeded = wrappedLines.map(l => l.getTrimmedLength()).reduce((p, c) => p + c);\r\n\r\n  // Use srcCol and srcLine to find the new wrapping point, use that to get the cellsAvailable and\r\n  // linesNeeded\r\n  let srcCol = 0;\r\n  let srcLine = 0;\r\n  let cellsAvailable = 0;\r\n  while (cellsAvailable < cellsNeeded) {\r\n    if (cellsNeeded - cellsAvailable < newCols) {\r\n      // Add the final line and exit the loop\r\n      newLineLengths.push(cellsNeeded - cellsAvailable);\r\n      break;\r\n    }\r\n    srcCol += newCols;\r\n    const oldTrimmedLength = wrappedLines[srcLine].getTrimmedLength();\r\n    if (srcCol > oldTrimmedLength) {\r\n      srcCol -= oldTrimmedLength;\r\n      srcLine++;\r\n    }\r\n    const endsWithWide = wrappedLines[srcLine].getWidth(srcCol - 1) === 2;\r\n    if (endsWithWide) {\r\n      srcCol--;\r\n    }\r\n    const lineLength = endsWithWide ? newCols - 1 : newCols;\r\n    newLineLengths.push(lineLength);\r\n    cellsAvailable += lineLength;\r\n  }\r\n\r\n  return newLineLengths;\r\n}\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\nimport { CharData, IBufferLine } from './Types';\r\nimport { NULL_CELL_CODE, NULL_CELL_WIDTH, NULL_CELL_CHAR, WHITESPACE_CELL_CHAR } from './Buffer';\r\n\r\n\r\n/** typed array slots taken by one cell */\r\nconst CELL_SIZE = 3;\r\n\r\n/** cell member indices */\r\nconst enum Cell {\r\n  FLAGS = 0,\r\n  STRING = 1,\r\n  WIDTH = 2\r\n}\r\n\r\n/** single vs. combined char distinction */\r\nconst IS_COMBINED_BIT_MASK = 0x80000000;\r\n\r\n/**\r\n * Typed array based bufferline implementation.\r\n */\r\nexport class BufferLine implements IBufferLine {\r\n  protected _data: Uint32Array | null = null;\r\n  protected _combined: {[index: number]: string} = {};\r\n  public length: number;\r\n\r\n  constructor(cols: number, fillCharData?: CharData, public isWrapped: boolean = false) {\r\n    if (!fillCharData) {\r\n      fillCharData = [0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE];\r\n    }\r\n    if (cols) {\r\n      this._data = new Uint32Array(cols * CELL_SIZE);\r\n      for (let i = 0; i < cols; ++i) {\r\n        this.set(i, fillCharData);\r\n      }\r\n    }\r\n    this.length = cols;\r\n  }\r\n\r\n  public get(index: number): CharData {\r\n    const stringData = this._data[index * CELL_SIZE + Cell.STRING];\r\n    return [\r\n      this._data[index * CELL_SIZE + Cell.FLAGS],\r\n      (stringData & IS_COMBINED_BIT_MASK)\r\n        ? this._combined[index]\r\n        : (stringData) ? String.fromCharCode(stringData) : '',\r\n      this._data[index * CELL_SIZE + Cell.WIDTH],\r\n      (stringData & IS_COMBINED_BIT_MASK)\r\n        ? this._combined[index].charCodeAt(this._combined[index].length - 1)\r\n        : stringData\r\n    ];\r\n  }\r\n\r\n  public getWidth(index: number): number {\r\n    return this._data[index * CELL_SIZE + Cell.WIDTH];\r\n  }\r\n\r\n  public set(index: number, value: CharData): void {\r\n    this._data[index * CELL_SIZE + Cell.FLAGS] = value[0];\r\n    if (value[1].length > 1) {\r\n      this._combined[index] = value[1];\r\n      this._data[index * CELL_SIZE + Cell.STRING] = index | IS_COMBINED_BIT_MASK;\r\n    } else {\r\n      this._data[index * CELL_SIZE + Cell.STRING] = value[1].charCodeAt(0);\r\n    }\r\n    this._data[index * CELL_SIZE + Cell.WIDTH] = value[2];\r\n  }\r\n\r\n  public insertCells(pos: number, n: number, fillCharData: CharData): void {\r\n    pos %= this.length;\r\n    if (n < this.length - pos) {\r\n      for (let i = this.length - pos - n - 1; i >= 0; --i) {\r\n        this.set(pos + n + i, this.get(pos + i));\r\n      }\r\n      for (let i = 0; i < n; ++i) {\r\n        this.set(pos + i, fillCharData);\r\n      }\r\n    } else {\r\n      for (let i = pos; i < this.length; ++i) {\r\n        this.set(i, fillCharData);\r\n      }\r\n    }\r\n  }\r\n\r\n  public deleteCells(pos: number, n: number, fillCharData: CharData): void {\r\n    pos %= this.length;\r\n    if (n < this.length - pos) {\r\n      for (let i = 0; i < this.length - pos - n; ++i) {\r\n        this.set(pos + i, this.get(pos + n + i));\r\n      }\r\n      for (let i = this.length - n; i < this.length; ++i) {\r\n        this.set(i, fillCharData);\r\n      }\r\n    } else {\r\n      for (let i = pos; i < this.length; ++i) {\r\n        this.set(i, fillCharData);\r\n      }\r\n    }\r\n  }\r\n\r\n  public replaceCells(start: number, end: number, fillCharData: CharData): void {\r\n    while (start < end  && start < this.length) {\r\n      this.set(start++, fillCharData);\r\n    }\r\n  }\r\n\r\n  public resize(cols: number, fillCharData: CharData): void {\r\n    if (cols === this.length) {\r\n      return;\r\n    }\r\n    if (cols > this.length) {\r\n      const data = new Uint32Array(cols * CELL_SIZE);\r\n      if (this.length) {\r\n        if (cols * CELL_SIZE < this._data.length) {\r\n          data.set(this._data.subarray(0, cols * CELL_SIZE));\r\n        } else {\r\n          data.set(this._data);\r\n        }\r\n      }\r\n      this._data = data;\r\n      for (let i = this.length; i < cols; ++i) {\r\n        this.set(i, fillCharData);\r\n      }\r\n    } else {\r\n      if (cols) {\r\n        const data = new Uint32Array(cols * CELL_SIZE);\r\n        data.set(this._data.subarray(0, cols * CELL_SIZE));\r\n        this._data = data;\r\n        // Remove any cut off combined data\r\n        const keys = Object.keys(this._combined);\r\n        for (let i = 0; i < keys.length; i++) {\r\n          const key = parseInt(keys[i], 10);\r\n          if (key >= cols) {\r\n            delete this._combined[key];\r\n          }\r\n        }\r\n      } else {\r\n        this._data = null;\r\n        this._combined = {};\r\n      }\r\n    }\r\n    this.length = cols;\r\n  }\r\n\r\n  /** fill a line with fillCharData */\r\n  public fill(fillCharData: CharData): void {\r\n    this._combined = {};\r\n    for (let i = 0; i < this.length; ++i) {\r\n      this.set(i, fillCharData);\r\n    }\r\n  }\r\n\r\n  /** alter to a full copy of line  */\r\n  public copyFrom(line: BufferLine): void {\r\n    if (this.length !== line.length) {\r\n      this._data = new Uint32Array(line._data);\r\n    } else {\r\n      // use high speed copy if lengths are equal\r\n      this._data.set(line._data);\r\n    }\r\n    this.length = line.length;\r\n    this._combined = {};\r\n    for (const el in line._combined) {\r\n      this._combined[el] = line._combined[el];\r\n    }\r\n    this.isWrapped = line.isWrapped;\r\n  }\r\n\r\n  /** create a new clone */\r\n  public clone(): IBufferLine {\r\n    const newLine = new BufferLine(0);\r\n    // creation of new typed array from another is actually pretty slow :(\r\n    // still faster than copying values one by one\r\n    newLine._data = new Uint32Array(this._data);\r\n    newLine.length = this.length;\r\n    for (const el in this._combined) {\r\n      newLine._combined[el] = this._combined[el];\r\n    }\r\n    newLine.isWrapped = this.isWrapped;\r\n    return newLine;\r\n  }\r\n\r\n  public getTrimmedLength(): number {\r\n    for (let i = this.length - 1; i >= 0; --i) {\r\n      if (this._data[i * CELL_SIZE + Cell.STRING] !== 0) {  // 0 ==> ''.charCodeAt(0) ==> NaN ==> 0\r\n        return i + this._data[i * CELL_SIZE + Cell.WIDTH];\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  public copyCellsFrom(src: BufferLine, srcCol: number, destCol: number, length: number, applyInReverse: boolean): void {\r\n    const srcData = src._data;\r\n    if (applyInReverse) {\r\n      for (let cell = length - 1; cell >= 0; cell--) {\r\n        for (let i = 0; i < CELL_SIZE; i++) {\r\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\r\n        }\r\n      }\r\n    } else {\r\n      for (let cell = 0; cell < length; cell++) {\r\n        for (let i = 0; i < CELL_SIZE; i++) {\r\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\r\n        }\r\n      }\r\n    }\r\n\r\n    // Move any combined data over as needed\r\n    const srcCombinedKeys = Object.keys(src._combined);\r\n    for (let i = 0; i < srcCombinedKeys.length; i++) {\r\n      const key = parseInt(srcCombinedKeys[i], 10);\r\n      if (key >= srcCol) {\r\n        this._combined[key - srcCol + destCol] = src._combined[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  public translateToString(trimRight: boolean = false, startCol: number = 0, endCol: number = this.length): string {\r\n    if (trimRight) {\r\n      endCol = Math.min(endCol, this.getTrimmedLength());\r\n    }\r\n    let result = '';\r\n    while (startCol < endCol) {\r\n      const stringData = this._data[startCol * CELL_SIZE + Cell.STRING];\r\n      result += (stringData & IS_COMBINED_BIT_MASK) ? this._combined[startCol] : (stringData) ? String.fromCharCode(stringData) : WHITESPACE_CELL_CHAR;\r\n      startCol += this._data[startCol * CELL_SIZE + Cell.WIDTH] || 1;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { CircularList, IInsertEvent, IDeleteEvent } from './common/CircularList';\r\nimport { CharData, ITerminal, IBuffer, IBufferLine, BufferIndex, IBufferStringIterator, IBufferStringIteratorResult } from './Types';\r\nimport { EventEmitter } from './common/EventEmitter';\r\nimport { IMarker } from 'xterm';\r\nimport { BufferLine } from './BufferLine';\r\nimport { DEFAULT_COLOR } from './renderer/atlas/Types';\r\nimport { reflowSmallerGetNewLineLengths, reflowLargerGetLinesToRemove, reflowLargerCreateNewLayout, reflowLargerApplyNewLayout } from './BufferReflow';\r\n\r\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\r\nexport const CHAR_DATA_ATTR_INDEX = 0;\r\nexport const CHAR_DATA_CHAR_INDEX = 1;\r\nexport const CHAR_DATA_WIDTH_INDEX = 2;\r\nexport const CHAR_DATA_CODE_INDEX = 3;\r\nexport const MAX_BUFFER_SIZE = 4294967295; // 2^32 - 1\r\n\r\nexport const NULL_CELL_CHAR = '';\r\nexport const NULL_CELL_WIDTH = 1;\r\nexport const NULL_CELL_CODE = 0;\r\n\r\nexport const WHITESPACE_CELL_CHAR = ' ';\r\nexport const WHITESPACE_CELL_WIDTH = 1;\r\nexport const WHITESPACE_CELL_CODE = 32;\r\n\r\nexport const FILL_CHAR_DATA: CharData = [DEFAULT_ATTR, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE];\r\n\r\n/**\r\n * This class represents a terminal buffer (an internal state of the terminal), where the\r\n * following information is stored (in high-level):\r\n *   - text content of this particular buffer\r\n *   - cursor position\r\n *   - scroll position\r\n */\r\nexport class Buffer implements IBuffer {\r\n  public lines: CircularList<IBufferLine>;\r\n  public ydisp: number;\r\n  public ybase: number;\r\n  public y: number;\r\n  public x: number;\r\n  public scrollBottom: number;\r\n  public scrollTop: number;\r\n  public tabs: any;\r\n  public savedY: number;\r\n  public savedX: number;\r\n  public savedCurAttr: number;\r\n  public markers: Marker[] = [];\r\n  private _cols: number;\r\n  private _rows: number;\r\n\r\n  /**\r\n   * Create a new Buffer.\r\n   * @param _terminal The terminal the Buffer will belong to.\r\n   * @param _hasScrollback Whether the buffer should respect the scrollback of\r\n   * the terminal.\r\n   */\r\n  constructor(\r\n    private _terminal: ITerminal,\r\n    private _hasScrollback: boolean\r\n  ) {\r\n    this._cols = this._terminal.cols;\r\n    this._rows = this._terminal.rows;\r\n    this.clear();\r\n  }\r\n\r\n  public getBlankLine(attr: number, isWrapped?: boolean): IBufferLine {\r\n    const fillCharData: CharData = [attr, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE];\r\n    return new BufferLine(this._cols, fillCharData, isWrapped);\r\n  }\r\n\r\n  public get hasScrollback(): boolean {\r\n    return this._hasScrollback && this.lines.maxLength > this._rows;\r\n  }\r\n\r\n  public get isCursorInViewport(): boolean {\r\n    const absoluteY = this.ybase + this.y;\r\n    const relativeY = absoluteY - this.ydisp;\r\n    return (relativeY >= 0 && relativeY < this._rows);\r\n  }\r\n\r\n  /**\r\n   * Gets the correct buffer length based on the rows provided, the terminal's\r\n   * scrollback and whether this buffer is flagged to have scrollback or not.\r\n   * @param rows The terminal rows to use in the calculation.\r\n   */\r\n  private _getCorrectBufferLength(rows: number): number {\r\n    if (!this._hasScrollback) {\r\n      return rows;\r\n    }\r\n\r\n    const correctBufferLength = rows + this._terminal.options.scrollback;\r\n\r\n    return correctBufferLength > MAX_BUFFER_SIZE ? MAX_BUFFER_SIZE : correctBufferLength;\r\n  }\r\n\r\n  /**\r\n   * Fills the buffer's viewport with blank lines.\r\n   */\r\n  public fillViewportRows(fillAttr?: number): void {\r\n    if (this.lines.length === 0) {\r\n      if (fillAttr === undefined) {\r\n        fillAttr = DEFAULT_ATTR;\r\n      }\r\n      let i = this._rows;\r\n      while (i--) {\r\n        this.lines.push(this.getBlankLine(fillAttr));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears the buffer to it's initial state, discarding all previous data.\r\n   */\r\n  public clear(): void {\r\n    this.ydisp = 0;\r\n    this.ybase = 0;\r\n    this.y = 0;\r\n    this.x = 0;\r\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\r\n    this.scrollTop = 0;\r\n    this.scrollBottom = this._rows - 1;\r\n    this.setupTabStops();\r\n  }\r\n\r\n  /**\r\n   * Resizes the buffer, adjusting its data accordingly.\r\n   * @param newCols The new number of columns.\r\n   * @param newRows The new number of rows.\r\n   */\r\n  public resize(newCols: number, newRows: number): void {\r\n    // Increase max length if needed before adjustments to allow space to fill\r\n    // as required.\r\n    const newMaxLength = this._getCorrectBufferLength(newRows);\r\n    if (newMaxLength > this.lines.maxLength) {\r\n      this.lines.maxLength = newMaxLength;\r\n    }\r\n\r\n    // The following adjustments should only happen if the buffer has been\r\n    // initialized/filled.\r\n    if (this.lines.length > 0) {\r\n      // Deal with columns increasing (reducing needs to happen after reflow)\r\n      if (this._cols < newCols) {\r\n        for (let i = 0; i < this.lines.length; i++) {\r\n          this.lines.get(i).resize(newCols, FILL_CHAR_DATA);\r\n        }\r\n      }\r\n\r\n      // Resize rows in both directions as needed\r\n      let addToY = 0;\r\n      if (this._rows < newRows) {\r\n        for (let y = this._rows; y < newRows; y++) {\r\n          if (this.lines.length < newRows + this.ybase) {\r\n            if (this.ybase > 0 && this.lines.length <= this.ybase + this.y + addToY + 1) {\r\n              // There is room above the buffer and there are no empty elements below the line,\r\n              // scroll up\r\n              this.ybase--;\r\n              addToY++;\r\n              if (this.ydisp > 0) {\r\n                // Viewport is at the top of the buffer, must increase downwards\r\n                this.ydisp--;\r\n              }\r\n            } else {\r\n              // Add a blank line if there is no buffer left at the top to scroll to, or if there\r\n              // are blank lines after the cursor\r\n              this.lines.push(new BufferLine(newCols, FILL_CHAR_DATA));\r\n            }\r\n          }\r\n        }\r\n      } else { // (this._rows >= newRows)\r\n        for (let y = this._rows; y > newRows; y--) {\r\n          if (this.lines.length > newRows + this.ybase) {\r\n            if (this.lines.length > this.ybase + this.y + 1) {\r\n              // The line is a blank line below the cursor, remove it\r\n              this.lines.pop();\r\n            } else {\r\n              // The line is the cursor, scroll down\r\n              this.ybase++;\r\n              this.ydisp++;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Reduce max length if needed after adjustments, this is done after as it\r\n      // would otherwise cut data from the bottom of the buffer.\r\n      if (newMaxLength < this.lines.maxLength) {\r\n        // Trim from the top of the buffer and adjust ybase and ydisp.\r\n        const amountToTrim = this.lines.length - newMaxLength;\r\n        if (amountToTrim > 0) {\r\n          this.lines.trimStart(amountToTrim);\r\n          this.ybase = Math.max(this.ybase - amountToTrim, 0);\r\n          this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\r\n        }\r\n        this.lines.maxLength = newMaxLength;\r\n      }\r\n\r\n      // Make sure that the cursor stays on screen\r\n      this.x = Math.min(this.x, newCols - 1);\r\n      this.y = Math.min(this.y, newRows - 1);\r\n      if (addToY) {\r\n        this.y += addToY;\r\n      }\r\n      this.savedY = Math.min(this.savedY, newRows - 1);\r\n      this.savedX = Math.min(this.savedX, newCols - 1);\r\n\r\n      this.scrollTop = 0;\r\n    }\r\n\r\n    this.scrollBottom = newRows - 1;\r\n\r\n    if (this._hasScrollback) {\r\n      this._reflow(newCols);\r\n\r\n      // Trim the end of the line off if cols shrunk\r\n      if (this._cols > newCols) {\r\n        for (let i = 0; i < this.lines.length; i++) {\r\n          this.lines.get(i).resize(newCols, FILL_CHAR_DATA);\r\n        }\r\n      }\r\n    }\r\n\r\n    this._cols = newCols;\r\n    this._rows = newRows;\r\n  }\r\n\r\n  private _reflow(newCols: number): void {\r\n    if (this._cols === newCols) {\r\n      return;\r\n    }\r\n\r\n    // Iterate through rows, ignore the last one as it cannot be wrapped\r\n    if (newCols > this._cols) {\r\n      this._reflowLarger(newCols);\r\n    } else {\r\n      this._reflowSmaller(newCols);\r\n    }\r\n  }\r\n\r\n  private _reflowLarger(newCols: number): void {\r\n    const toRemove: number[] = reflowLargerGetLinesToRemove(this.lines, newCols);\r\n    if (toRemove.length > 0) {\r\n      const newLayoutResult = reflowLargerCreateNewLayout(this.lines, toRemove);\r\n      reflowLargerApplyNewLayout(this.lines, newLayoutResult.layout);\r\n      this._reflowLargerAdjustViewport(newCols, newLayoutResult.countRemoved);\r\n    }\r\n  }\r\n\r\n  private _reflowLargerAdjustViewport(newCols: number, countRemoved: number): void {\r\n    // Adjust viewport based on number of items removed\r\n    let viewportAdjustments = countRemoved;\r\n    while (viewportAdjustments-- > 0) {\r\n      if (this.ybase === 0) {\r\n        this.y--;\r\n        // Add an extra row at the bottom of the viewport\r\n        this.lines.push(new BufferLine(newCols, FILL_CHAR_DATA));\r\n      } else {\r\n        if (this.ydisp === this.ybase) {\r\n          this.ydisp--;\r\n        }\r\n        this.ybase--;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _reflowSmaller(newCols: number): void {\r\n    // Gather all BufferLines that need to be inserted into the Buffer here so that they can be\r\n    // batched up and only committed once\r\n    const toInsert = [];\r\n    let countToInsert = 0;\r\n    // Go backwards as many lines may be trimmed and this will avoid considering them\r\n    for (let y = this.lines.length - 1; y >= 0; y--) {\r\n      // Check whether this line is a problem\r\n      let nextLine = this.lines.get(y) as BufferLine;\r\n      if (!nextLine.isWrapped && nextLine.getTrimmedLength() <= newCols) {\r\n        continue;\r\n      }\r\n\r\n      // Gather wrapped lines and adjust y to be the starting line\r\n      const wrappedLines: BufferLine[] = [nextLine];\r\n      while (nextLine.isWrapped && y > 0) {\r\n        nextLine = this.lines.get(--y) as BufferLine;\r\n        wrappedLines.unshift(nextLine);\r\n      }\r\n\r\n      const lastLineLength = wrappedLines[wrappedLines.length - 1].getTrimmedLength();\r\n      const destLineLengths = reflowSmallerGetNewLineLengths(wrappedLines, this._cols, newCols);\r\n      const linesToAdd = destLineLengths.length - wrappedLines.length;\r\n      let trimmedLines: number;\r\n      if (this.ybase === 0 && this.y !== this.lines.length - 1) {\r\n        // If the top section of the buffer is not yet filled\r\n        trimmedLines = Math.max(0, this.y - this.lines.maxLength + linesToAdd);\r\n      } else {\r\n        trimmedLines = Math.max(0, this.lines.length - this.lines.maxLength + linesToAdd);\r\n      }\r\n\r\n      // Add the new lines\r\n      const newLines: BufferLine[] = [];\r\n      for (let i = 0; i < linesToAdd; i++) {\r\n        const newLine = this.getBlankLine(DEFAULT_ATTR, true) as BufferLine;\r\n        newLines.push(newLine);\r\n      }\r\n      if (newLines.length > 0) {\r\n        toInsert.push({\r\n          // countToInsert here gets the actual index, taking into account other inserted items.\r\n          // using this we can iterate through the list forwards\r\n          start: y + wrappedLines.length + countToInsert,\r\n          newLines\r\n        });\r\n        countToInsert += newLines.length;\r\n      }\r\n      wrappedLines.push(...newLines);\r\n\r\n      // Copy buffer data to new locations, this needs to happen backwards to do in-place\r\n      let destLineIndex = destLineLengths.length - 1; // Math.floor(cellsNeeded / newCols);\r\n      let destCol = destLineLengths[destLineIndex]; // cellsNeeded % newCols;\r\n      if (destCol === 0) {\r\n        destLineIndex--;\r\n        destCol = destLineLengths[destLineIndex];\r\n      }\r\n      let srcLineIndex = wrappedLines.length - linesToAdd - 1;\r\n      let srcCol = lastLineLength;\r\n      while (srcLineIndex >= 0) {\r\n        const cellsToCopy = Math.min(srcCol, destCol);\r\n        wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol - cellsToCopy, destCol - cellsToCopy, cellsToCopy, true);\r\n        destCol -= cellsToCopy;\r\n        if (destCol === 0) {\r\n          destLineIndex--;\r\n          destCol = destLineLengths[destLineIndex];\r\n        }\r\n        srcCol -= cellsToCopy;\r\n        if (srcCol === 0) {\r\n          srcLineIndex--;\r\n          // TODO: srcCol shoudl take trimmed length into account\r\n          srcCol = wrappedLines[Math.max(srcLineIndex, 0)].getTrimmedLength(); // this._cols;\r\n        }\r\n      }\r\n\r\n      // Null out the end of the line ends if a wide character wrapped to the following line\r\n      for (let i = 0; i < wrappedLines.length; i++) {\r\n        if (destLineLengths[i] < newCols) {\r\n          wrappedLines[i].set(destLineLengths[i], FILL_CHAR_DATA);\r\n        }\r\n      }\r\n\r\n      // Adjust viewport as needed\r\n      let viewportAdjustments = linesToAdd - trimmedLines;\r\n      while (viewportAdjustments-- > 0) {\r\n        if (this.ybase === 0) {\r\n          if (this.y < this._rows - 1) {\r\n            this.y++;\r\n            this.lines.pop();\r\n          } else {\r\n            this.ybase++;\r\n            this.ydisp++;\r\n          }\r\n        } else {\r\n          if (this.ybase === this.ydisp) {\r\n            this.ydisp++;\r\n          }\r\n          this.ybase++;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Rearrange lines in the buffer if there are any insertions, this is done at the end rather\r\n    // than earlier so that it's a single O(n) pass through the buffer, instead of O(n^2) from many\r\n    // costly calls to CircularList.splice.\r\n    if (toInsert.length > 0) {\r\n      // Record buffer insert events and then play them back backwards so that the indexes are\r\n      // correct\r\n      const insertEvents: IInsertEvent[] = [];\r\n\r\n      // Record original lines so they don't get overridden when we rearrange the list\r\n      const originalLines: BufferLine[] = [];\r\n      for (let i = 0; i < this.lines.length; i++) {\r\n        originalLines.push(this.lines.get(i) as BufferLine);\r\n      }\r\n      const originalLinesLength = this.lines.length;\r\n\r\n      let originalLineIndex = originalLinesLength - 1;\r\n      let nextToInsertIndex = 0;\r\n      let nextToInsert = toInsert[nextToInsertIndex];\r\n      this.lines.length = Math.min(this.lines.maxLength, this.lines.length + countToInsert);\r\n      let countInsertedSoFar = 0;\r\n      for (let i = Math.min(this.lines.maxLength - 1, originalLinesLength + countToInsert - 1); i >= 0; i--) {\r\n        if (nextToInsert && nextToInsert.start > originalLineIndex + countInsertedSoFar) {\r\n          // Insert extra lines here, adjusting i as needed\r\n          for (let nextI = nextToInsert.newLines.length - 1; nextI >= 0; nextI--) {\r\n            this.lines.set(i--, nextToInsert.newLines[nextI]);\r\n          }\r\n          i++;\r\n\r\n          // Create insert events for later\r\n          insertEvents.push({\r\n            index: originalLineIndex + 1,\r\n            amount: nextToInsert.newLines.length\r\n          } as IInsertEvent);\r\n\r\n          countInsertedSoFar += nextToInsert.newLines.length;\r\n          nextToInsert = toInsert[++nextToInsertIndex];\r\n        } else {\r\n          this.lines.set(i, originalLines[originalLineIndex--]);\r\n        }\r\n      }\r\n\r\n      // Update markers\r\n      let insertCountEmitted = 0;\r\n      for (let i = insertEvents.length - 1; i >= 0; i--) {\r\n        insertEvents[i].index += insertCountEmitted;\r\n        this.lines.emit('insert', insertEvents[i]);\r\n        insertCountEmitted += insertEvents[i].amount;\r\n      }\r\n      const amountToTrim = Math.max(0, originalLinesLength + countToInsert - this.lines.maxLength);\r\n      if (amountToTrim > 0) {\r\n        this.lines.emitMayRemoveListeners('trim', amountToTrim);\r\n      }\r\n    }\r\n  }\r\n\r\n  // private _reflowSmallerGetLinesNeeded()\r\n\r\n  /**\r\n   * Translates a string index back to a BufferIndex.\r\n   * To get the correct buffer position the string must start at `startCol` 0\r\n   * (default in translateBufferLineToString).\r\n   * The method also works on wrapped line strings given rows were not trimmed.\r\n   * The method operates on the CharData string length, there are no\r\n   * additional content or boundary checks. Therefore the string and the buffer\r\n   * should not be altered in between.\r\n   * TODO: respect trim flag after fixing #1685\r\n   * @param lineIndex line index the string was retrieved from\r\n   * @param stringIndex index within the string\r\n   * @param startCol column offset the string was retrieved from\r\n   */\r\n  public stringIndexToBufferIndex(lineIndex: number, stringIndex: number): BufferIndex {\r\n    while (stringIndex) {\r\n      const line = this.lines.get(lineIndex);\r\n      if (!line) {\r\n        return [-1, -1];\r\n      }\r\n      for (let i = 0; i < line.length; ++i) {\r\n        stringIndex -= line.get(i)[CHAR_DATA_CHAR_INDEX].length;\r\n        if (stringIndex < 0) {\r\n          return [lineIndex, i];\r\n        }\r\n      }\r\n      lineIndex++;\r\n    }\r\n    return [lineIndex, 0];\r\n  }\r\n\r\n  /**\r\n   * Translates a buffer line to a string, with optional start and end columns.\r\n   * Wide characters will count as two columns in the resulting string. This\r\n   * function is useful for getting the actual text underneath the raw selection\r\n   * position.\r\n   * @param line The line being translated.\r\n   * @param trimRight Whether to trim whitespace to the right.\r\n   * @param startCol The column to start at.\r\n   * @param endCol The column to end at.\r\n   */\r\n  public translateBufferLineToString(lineIndex: number, trimRight: boolean, startCol: number = 0, endCol?: number): string {\r\n    const line = this.lines.get(lineIndex);\r\n    if (!line) {\r\n      return '';\r\n    }\r\n    return line.translateToString(trimRight, startCol, endCol);\r\n  }\r\n\r\n  public getWrappedRangeForLine(y: number): { first: number, last: number } {\r\n    let first = y;\r\n    let last = y;\r\n    // Scan upwards for wrapped lines\r\n    while (first > 0 && this.lines.get(first).isWrapped) {\r\n      first--;\r\n    }\r\n    // Scan downwards for wrapped lines\r\n    while (last + 1 < this.lines.length && this.lines.get(last + 1).isWrapped) {\r\n      last++;\r\n    }\r\n    return { first, last };\r\n  }\r\n\r\n  /**\r\n   * Setup the tab stops.\r\n   * @param i The index to start setting up tab stops from.\r\n   */\r\n  public setupTabStops(i?: number): void {\r\n    if (i !== null && i !== undefined) {\r\n      if (!this.tabs[i]) {\r\n        i = this.prevStop(i);\r\n      }\r\n    } else {\r\n      this.tabs = {};\r\n      i = 0;\r\n    }\r\n\r\n    for (; i < this._cols; i += this._terminal.options.tabStopWidth) {\r\n      this.tabs[i] = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move the cursor to the previous tab stop from the given position (default is current).\r\n   * @param x The position to move the cursor to the previous tab stop.\r\n   */\r\n  public prevStop(x?: number): number {\r\n    if (x === null || x === undefined) {\r\n      x = this.x;\r\n    }\r\n    while (!this.tabs[--x] && x > 0);\r\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\r\n  }\r\n\r\n  /**\r\n   * Move the cursor one tab stop forward from the given position (default is current).\r\n   * @param x The position to move the cursor one tab stop forward.\r\n   */\r\n  public nextStop(x?: number): number {\r\n    if (x === null || x === undefined) {\r\n      x = this.x;\r\n    }\r\n    while (!this.tabs[++x] && x < this._cols);\r\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\r\n  }\r\n\r\n  public addMarker(y: number): Marker {\r\n    const marker = new Marker(y);\r\n    this.markers.push(marker);\r\n    marker.register(this.lines.addDisposableListener('trim', amount => {\r\n      marker.line -= amount;\r\n      // The marker should be disposed when the line is trimmed from the buffer\r\n      if (marker.line < 0) {\r\n        marker.dispose();\r\n      }\r\n    }));\r\n    marker.register(this.lines.addDisposableListener('insert', (event: IInsertEvent) => {\r\n      if (marker.line >= event.index) {\r\n        marker.line += event.amount;\r\n      }\r\n    }));\r\n    marker.register(this.lines.addDisposableListener('delete', (event: IDeleteEvent) => {\r\n      // Delete the marker if it's within the range\r\n      if (marker.line >= event.index && marker.line < event.index + event.amount) {\r\n        marker.dispose();\r\n      }\r\n\r\n      // Shift the marker if it's after the deleted range\r\n      if (marker.line > event.index) {\r\n        marker.line -= event.amount;\r\n      }\r\n    }));\r\n    marker.register(marker.addDisposableListener('dispose', () => this._removeMarker(marker)));\r\n    return marker;\r\n  }\r\n\r\n  private _removeMarker(marker: Marker): void {\r\n    this.markers.splice(this.markers.indexOf(marker), 1);\r\n  }\r\n\r\n  public iterator(trimRight: boolean, startIndex?: number, endIndex?: number, startOverscan?: number, endOverscan?: number): IBufferStringIterator {\r\n    return new BufferStringIterator(this, trimRight, startIndex, endIndex, startOverscan, endOverscan);\r\n  }\r\n}\r\n\r\nexport class Marker extends EventEmitter implements IMarker {\r\n  private static _nextId = 1;\r\n\r\n  private _id: number = Marker._nextId++;\r\n  public isDisposed: boolean = false;\r\n\r\n  public get id(): number { return this._id; }\r\n\r\n  constructor(\r\n    public line: number\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public dispose(): void {\r\n    if (this.isDisposed) {\r\n      return;\r\n    }\r\n    this.isDisposed = true;\r\n    // Emit before super.dispose such that dispose listeners get a change to react\r\n    this.emit('dispose');\r\n    super.dispose();\r\n  }\r\n}\r\n\r\n/**\r\n * Iterator to get unwrapped content strings from the buffer.\r\n * The iterator returns at least the string data between the borders\r\n * `startIndex` and `endIndex` (exclusive) and will expand the lines\r\n * by `startOverscan` to the top and by `endOverscan` to the bottom,\r\n * if no new line was found in between.\r\n * It will never read/return string data beyond `startIndex - startOverscan`\r\n * or `endIndex + endOverscan`. Therefore the first and last line might be truncated.\r\n * It is possible to always get the full string for the first and last line as well\r\n * by setting the overscan values to the actual buffer length. This not recommended\r\n * since it might return the whole buffer within a single string in a worst case scenario.\r\n */\r\nexport class BufferStringIterator implements IBufferStringIterator {\r\n  private _current: number;\r\n\r\n  constructor (\r\n    private _buffer: IBuffer,\r\n    private _trimRight: boolean,\r\n    private _startIndex: number = 0,\r\n    private _endIndex: number = _buffer.lines.length,\r\n    private _startOverscan: number = 0,\r\n    private _endOverscan: number = 0\r\n  ) {\r\n    if (this._startIndex < 0) {\r\n      this._startIndex = 0;\r\n    }\r\n    if (this._endIndex > this._buffer.lines.length) {\r\n      this._endIndex = this._buffer.lines.length;\r\n    }\r\n    this._current = this._startIndex;\r\n  }\r\n\r\n  public hasNext(): boolean {\r\n    return this._current < this._endIndex;\r\n  }\r\n\r\n  public next(): IBufferStringIteratorResult {\r\n    const range = this._buffer.getWrappedRangeForLine(this._current);\r\n    // limit search window to overscan value at both borders\r\n    if (range.first < this._startIndex - this._startOverscan) {\r\n      range.first = this._startIndex - this._startOverscan;\r\n    }\r\n    if (range.last > this._endIndex + this._endOverscan) {\r\n      range.last = this._endIndex + this._endOverscan;\r\n    }\r\n    // limit to current buffer length\r\n    range.first = Math.max(range.first, 0);\r\n    range.last = Math.min(range.last, this._buffer.lines.length);\r\n    let result = '';\r\n    for (let i = range.first; i <= range.last; ++i) {\r\n      result += this._buffer.translateBufferLineToString(i, this._trimRight);\r\n    }\r\n    this._current = range.last + 1;\r\n    return {range: range, content: result};\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport * as Strings from './Strings';\r\nimport { ITerminal, IBuffer } from './Types';\r\nimport { isMac } from './core/Platform';\r\nimport { RenderDebouncer } from './ui/RenderDebouncer';\r\nimport { addDisposableDomListener } from './ui/Lifecycle';\r\nimport { Disposable } from './common/Lifecycle';\r\n\r\nconst MAX_ROWS_TO_READ = 20;\r\n\r\nconst enum BoundaryPosition {\r\n  TOP,\r\n  BOTTOM\r\n}\r\n\r\nexport class AccessibilityManager extends Disposable {\r\n  private _accessibilityTreeRoot: HTMLElement;\r\n  private _rowContainer: HTMLElement;\r\n  private _rowElements: HTMLElement[];\r\n  private _liveRegion: HTMLElement;\r\n  private _liveRegionLineCount: number = 0;\r\n\r\n  private _renderRowsDebouncer: RenderDebouncer;\r\n\r\n  private _topBoundaryFocusListener: (e: FocusEvent) => void;\r\n  private _bottomBoundaryFocusListener: (e: FocusEvent) => void;\r\n\r\n  /**\r\n   * This queue has a character pushed to it for keys that are pressed, if the\r\n   * next character added to the terminal is equal to the key char then it is\r\n   * not announced (added to live region) because it has already been announced\r\n   * by the textarea event (which cannot be canceled). There are some race\r\n   * condition cases if there is typing while data is streaming, but this covers\r\n   * the main case of typing into the prompt and inputting the answer to a\r\n   * question (Y/N, etc.).\r\n   */\r\n  private _charsToConsume: string[] = [];\r\n\r\n  constructor(private _terminal: ITerminal) {\r\n    super();\r\n    this._accessibilityTreeRoot = document.createElement('div');\r\n    this._accessibilityTreeRoot.classList.add('xterm-accessibility');\r\n\r\n    this._rowContainer = document.createElement('div');\r\n    this._rowContainer.classList.add('xterm-accessibility-tree');\r\n    this._rowElements = [];\r\n    for (let i = 0; i < this._terminal.rows; i++) {\r\n      this._rowElements[i] = this._createAccessibilityTreeNode();\r\n      this._rowContainer.appendChild(this._rowElements[i]);\r\n    }\r\n\r\n    this._topBoundaryFocusListener = e => this._onBoundaryFocus(e, BoundaryPosition.TOP);\r\n    this._bottomBoundaryFocusListener = e => this._onBoundaryFocus(e, BoundaryPosition.BOTTOM);\r\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\r\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\r\n\r\n    this._refreshRowsDimensions();\r\n    this._accessibilityTreeRoot.appendChild(this._rowContainer);\r\n\r\n    this._renderRowsDebouncer = new RenderDebouncer(this._terminal, this._renderRows.bind(this));\r\n    this._refreshRows();\r\n\r\n    this._liveRegion = document.createElement('div');\r\n    this._liveRegion.classList.add('live-region');\r\n    this._liveRegion.setAttribute('aria-live', 'assertive');\r\n    this._accessibilityTreeRoot.appendChild(this._liveRegion);\r\n\r\n    this._terminal.element.insertAdjacentElement('afterbegin', this._accessibilityTreeRoot);\r\n\r\n    this.register(this._renderRowsDebouncer);\r\n    this.register(this._terminal.addDisposableListener('resize', data => this._onResize(data.rows)));\r\n    this.register(this._terminal.addDisposableListener('refresh', data => this._refreshRows(data.start, data.end)));\r\n    this.register(this._terminal.addDisposableListener('scroll', data => this._refreshRows()));\r\n    // Line feed is an issue as the prompt won't be read out after a command is run\r\n    this.register(this._terminal.addDisposableListener('a11y.char', (char) => this._onChar(char)));\r\n    this.register(this._terminal.addDisposableListener('linefeed', () => this._onChar('\\n')));\r\n    this.register(this._terminal.addDisposableListener('a11y.tab', spaceCount => this._onTab(spaceCount)));\r\n    this.register(this._terminal.addDisposableListener('key', keyChar => this._onKey(keyChar)));\r\n    this.register(this._terminal.addDisposableListener('blur', () => this._clearLiveRegion()));\r\n    // TODO: Maybe renderer should fire an event on terminal when the characters change and that\r\n    //       should be listened to instead? That would mean that the order of events are always\r\n    //       guarenteed\r\n    this.register(this._terminal.addDisposableListener('dprchange', () => this._refreshRowsDimensions()));\r\n    this.register(this._terminal.renderer.addDisposableListener('resize', () => this._refreshRowsDimensions()));\r\n    // This shouldn't be needed on modern browsers but is present in case the\r\n    // media query that drives the dprchange event isn't supported\r\n    this.register(addDisposableDomListener(window, 'resize', () => this._refreshRowsDimensions()));\r\n  }\r\n\r\n  public dispose(): void {\r\n    super.dispose();\r\n    this._terminal.element.removeChild(this._accessibilityTreeRoot);\r\n    this._rowElements.length = 0;\r\n  }\r\n\r\n  private _onBoundaryFocus(e: FocusEvent, position: BoundaryPosition): void {\r\n    const boundaryElement = <HTMLElement>e.target;\r\n    const beforeBoundaryElement = this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2];\r\n\r\n    // Don't scroll if the buffer top has reached the end in that direction\r\n    const posInSet = boundaryElement.getAttribute('aria-posinset');\r\n    const lastRowPos = position === BoundaryPosition.TOP ? '1' : `${this._terminal.buffer.lines.length}`;\r\n    if (posInSet === lastRowPos) {\r\n      return;\r\n    }\r\n\r\n    // Don't scroll when the last focused item was not the second row (focus is going the other\r\n    // direction)\r\n    if (e.relatedTarget !== beforeBoundaryElement) {\r\n      return;\r\n    }\r\n\r\n    // Remove old boundary element from array\r\n    let topBoundaryElement: HTMLElement;\r\n    let bottomBoundaryElement: HTMLElement;\r\n    if (position === BoundaryPosition.TOP) {\r\n      topBoundaryElement = boundaryElement;\r\n      bottomBoundaryElement = this._rowElements.pop()!;\r\n      this._rowContainer.removeChild(bottomBoundaryElement);\r\n    } else {\r\n      topBoundaryElement = this._rowElements.shift()!;\r\n      bottomBoundaryElement = boundaryElement;\r\n      this._rowContainer.removeChild(topBoundaryElement);\r\n    }\r\n\r\n    // Remove listeners from old boundary elements\r\n    topBoundaryElement.removeEventListener('focus', this._topBoundaryFocusListener);\r\n    bottomBoundaryElement.removeEventListener('focus', this._bottomBoundaryFocusListener);\r\n\r\n    // Add new element to array/DOM\r\n    if (position === BoundaryPosition.TOP) {\r\n      const newElement = this._createAccessibilityTreeNode();\r\n      this._rowElements.unshift(newElement);\r\n      this._rowContainer.insertAdjacentElement('afterbegin', newElement);\r\n    } else {\r\n      const newElement = this._createAccessibilityTreeNode();\r\n      this._rowElements.push(newElement);\r\n      this._rowContainer.appendChild(newElement);\r\n    }\r\n\r\n    // Add listeners to new boundary elements\r\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\r\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\r\n\r\n    // Scroll up\r\n    this._terminal.scrollLines(position === BoundaryPosition.TOP ? -1 : 1);\r\n\r\n    // Focus new boundary before element\r\n    this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2].focus();\r\n\r\n    // Prevent the standard behavior\r\n    e.preventDefault();\r\n    e.stopImmediatePropagation();\r\n  }\r\n\r\n  private _onResize(rows: number): void {\r\n    // Remove bottom boundary listener\r\n    this._rowElements[this._rowElements.length - 1].removeEventListener('focus', this._bottomBoundaryFocusListener);\r\n\r\n    // Grow rows as required\r\n    for (let i = this._rowContainer.children.length; i < this._terminal.rows; i++) {\r\n      this._rowElements[i] = this._createAccessibilityTreeNode();\r\n      this._rowContainer.appendChild(this._rowElements[i]);\r\n    }\r\n    // Shrink rows as required\r\n    while (this._rowElements.length > rows) {\r\n      this._rowContainer.removeChild(this._rowElements.pop()!);\r\n    }\r\n\r\n    // Add bottom boundary listener\r\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\r\n\r\n    this._refreshRowsDimensions();\r\n  }\r\n\r\n  private _createAccessibilityTreeNode(): HTMLElement {\r\n    const element = document.createElement('div');\r\n    element.setAttribute('role', 'listitem');\r\n    element.tabIndex = -1;\r\n    this._refreshRowDimensions(element);\r\n    return element;\r\n  }\r\n\r\n  private _onTab(spaceCount: number): void {\r\n    for (let i = 0; i < spaceCount; i++) {\r\n      this._onChar(' ');\r\n    }\r\n  }\r\n\r\n  private _onChar(char: string): void {\r\n    if (this._liveRegionLineCount < MAX_ROWS_TO_READ + 1) {\r\n      if (this._charsToConsume.length > 0) {\r\n        // Have the screen reader ignore the char if it was just input\r\n        const shiftedChar = this._charsToConsume.shift();\r\n        if (shiftedChar !== char) {\r\n          this._announceCharacter(char);\r\n        }\r\n      } else {\r\n        this._announceCharacter(char);\r\n      }\r\n\r\n      if (char === '\\n') {\r\n        this._liveRegionLineCount++;\r\n        if (this._liveRegionLineCount === MAX_ROWS_TO_READ + 1) {\r\n          this._liveRegion.textContent += Strings.tooMuchOutput;\r\n        }\r\n      }\r\n\r\n      // Only detach/attach on mac as otherwise messages can go unaccounced\r\n      if (isMac) {\r\n        if (this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode) {\r\n          setTimeout(() => {\r\n            this._accessibilityTreeRoot.appendChild(this._liveRegion);\r\n          }, 0);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private _clearLiveRegion(): void {\r\n    this._liveRegion.textContent = '';\r\n    this._liveRegionLineCount = 0;\r\n\r\n    // Only detach/attach on mac as otherwise messages can go unaccounced\r\n    if (isMac) {\r\n      if (this._liveRegion.parentNode) {\r\n        this._accessibilityTreeRoot.removeChild(this._liveRegion);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _onKey(keyChar: string): void {\r\n    this._clearLiveRegion();\r\n    this._charsToConsume.push(keyChar);\r\n  }\r\n\r\n  private _refreshRows(start?: number, end?: number): void {\r\n    this._renderRowsDebouncer.refresh(start, end);\r\n  }\r\n\r\n  private _renderRows(start: number, end: number): void {\r\n    const buffer: IBuffer = this._terminal.buffer;\r\n    const setSize = buffer.lines.length.toString();\r\n    for (let i = start; i <= end; i++) {\r\n      const lineData = buffer.translateBufferLineToString(buffer.ydisp + i, true);\r\n      const posInSet = (buffer.ydisp + i + 1).toString();\r\n      const element = this._rowElements[i];\r\n      element.textContent = lineData.length === 0 ? Strings.blankLine : lineData;\r\n      element.setAttribute('aria-posinset', posInSet);\r\n      element.setAttribute('aria-setsize', setSize);\r\n    }\r\n  }\r\n\r\n  private _refreshRowsDimensions(): void {\r\n    if (!this._terminal.renderer.dimensions.actualCellHeight) {\r\n      return;\r\n    }\r\n    if (this._rowElements.length !== this._terminal.rows) {\r\n      this._onResize(this._terminal.rows);\r\n    }\r\n    for (let i = 0; i < this._terminal.rows; i++) {\r\n      this._refreshRowDimensions(this._rowElements[i]);\r\n    }\r\n  }\r\n\r\n  private _refreshRowDimensions(element: HTMLElement): void {\r\n    element.style.height = `${this._terminal.renderer.dimensions.actualCellHeight}px`;\r\n  }\r\n\r\n  private _announceCharacter(char: string): void {\r\n    if (char === ' ') {\r\n      // Always use nbsp for spaces in order to preserve the space between characters in\r\n      // voiceover's caption window\r\n      this._liveRegion.innerHTML += '&nbsp;';\r\n    } else {\r\n      this._liveRegion.textContent += char;\r\n    }\r\n  }\r\n}\r\n",null],"names":[],"mappings":"AwDAA;;;;;;;;;;;;;;;;ADKA;AAEA;AACA;AACA;AACA;AAEA;AAOA;AAAA;AAuBA;AAAA;AAAA;AAlBA;AAgBA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAGA;AAGA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAvQa;;;;;;;;;;;;;;;;;;ADdb;AAEA;AAEA;AACA;AACA;AAEa;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AASb;AAsBA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;;;AAAA;AAOA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAGA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAjhBa;AAmhBb;AAAA;AAQA;AAAA;AACA;AANA;AACA;;AAQA;AANA;AAAA;;;AAAA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AArBA;AAsBA;AAAA;AAvBa;AAqCb;AAGA;AAGA;AACA;AACA;AACA;AALA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA3Ca;;;;;ADxlBb;AAIA;AAUA;AAKA;AAKA;AAAA;AAAA;AAJA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAhNa;;;;;ADhBb;AAaA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA3EA;AAkFA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AAmCA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAZA;AA4BA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAhCA;;;;;;;;;;;;;;;;;;ADhKA;AACA;AAMA;AAAA;AASA;AAAA;AAAA;AAEA;AACA;AAIA;AACA;AAEA;;AACA;AAKA;AAAA;AACA;AACA;;;AAAA;AAKA;AAAA;AACA;AACA;;;AAAA;AAKA;AAAA;AACA;AACA;;;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AApGa;;;;;ADRb;AAEa;AAGb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;;;;;AD9HA;AAwnNa;;;;;;;;;;;;;;;;;;ADVb;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAGA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;AAhCa;AAsCb;AACA;AACA;AACA;AAEA;AAMa;AACbcA;AAAA;AA4BA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAAA;AAvZa;;;;;;;;;;;;;;;;;;ADvNb;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAKA;AAaA;AAGA;AAAA;AAFA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AA6BA;AAAA;AAIA;AAEA;AAFA;AACA;AACA;AALA;AACA;AAQA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAMA;AAGA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AARA;AAAA;AAQA;AAKA;AACA;AACA;AACA;AAKA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AAGA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAOA;AACA;AACA;AAMA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AASA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AAOA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAauCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAwFA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoFA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAIA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAIA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAIA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAyBA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AAQA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAkBA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAQA;AACA;AACA;AASA;AACA;AACA;AASA;AACA;AACA;AAOA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AAAA;AA92Da;;;;;;;;;;;;;;;;;;ADjGb;AACA;AACA;AACA;AAKA;AAAA;AAsBA;AAAA;AACA;AARA;AAIA;AAOA;AACA;AACA;AACA;;AACA;AAMA;AACA;AACA;AAOA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAYA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAEA;AACA;AACA;;AAEA;AACA;AAIA;AACA;AACA;AACA;;AAEA;AAMA;AACA;AACA;;AAGA;AAGA;AACA;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;AApDA;;;;AAoDA;AACA;AAUA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAtSA;AAOA;AAgSA;AAAA;AA7Sa;;;;;;;;;;;;;;;;;;ADRb;AACA;AAEA;AACA;AACA;AACA;AAMA;AAKA;AAKA;AAMA;AAMA;AAEA;AACA;AA4BA;AAAA;AAoCA;AAAA;AACA;AACA;AAVA;AAaA;AACA;AAEA;AACA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAKA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAAA;;;AAAA;AACA;AAAA;;;AAAA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;;;AAAA;AAKA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAOA;AAIA;AAIA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAGA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA30Ba;;;;;AD7Db;AAuBA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AAAA;AAMA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AA5Ha;;;;;ADAA;AAEb;AAeA;AACA;AAEA;AAfA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAAA;AApDa;;;;;ADRF;AACA;AACA;;;;;;;;;;;;;;;;;;ADmBX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAOA;AAMA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAoHA;AACA;AADA;AAlGA;AAiFA;AAqBA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAGA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;;;AAAA;AAKA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAGA;AACA;AAGA;AAGA;AAGA;AAIA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAOA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AAIA;AACA;AAKA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AAQA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAKA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAQA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AAWA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAMA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAAA;AACA;AAAA;AAOA;AAKA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AAAA;AAnyDa;AAyyDb;AACA;AACA;AACA;AACA;AASA;AAGA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ADt6DA;AACA;AAEA;AAMA;AAAA;AAwBA;AAAA;AACA;AACA;AACA;AACA;AA3BA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AAoBA;AACA;AAGA;;AACA;AAEA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AAEA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA3Na;;;;;;;;;;;;;;;;;;ADZb;AAiBA;AAAA;AAKA;AAAA;AACA;AAGA;AACA;AACA;;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAjBA;AAmBA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AATA;AAma;;;;;ADdb;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AAnBA;;;;;;;;;;;;;;;;;;ADDA;AAEA;AAAA;AAGA;AAAA;AAIA;;AACA;AAEA;AACA;AACA;AACA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAzFa;;;;;ADEb;AAIA;AAHA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAnCsB;;;;;ADGtB;AAEA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;ADrCA;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAMA;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;;;;;ADhJA;AACA;AACA;AAEa;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAOb;AACA;AACA;;;;;ADjBa;AAKA;AAYbtPA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAjUA;;;;;AD7BA;AAAA;AACA;AA8DA;AAzDA;AACA;AACA;AAUA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA/Da;AAoEb;AACA;AAEA;AACA;AACA;AACA;AACA;AAPA;AAcA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAjBA;;;;;ADpFA;AASA;AAOA;;AACA;AACA;AAEA;AACA;AACA;AAEA;AASA;AACA;;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAGA;AACA;AAOA;AACA;AACA;AACA;AACA;AAIA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAWA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAMA;AACA;AACA;AACA;AACA;AAAA;AA5Oa;AAoPb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ADpQA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAAA;;;AAAA;AACA;AAAA;;;AAAA;AACA;AAAA;;;AAAA;AACA;AAAA;;;AAAA;AACA;AAAA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAAA;AACA;AAAA;AArJa;;;;;ADHb;AAEA;AACA;AACA;AAEA;AAyBA;AACA;AAGA;AACA;AA3BA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAWA;AACA;AAKA;AAQA;AAAA;AACA;AAKA;AAQA;AACA;AAKA;AAQA;AACA;AACA;AAKA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AAKA;AAAA;AACA;AACA;AAKA;AACA;AAYA;AACA;AACA;AACA;AACA;AAIA;AAgBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAIA;AACA;AAOA;AACA;AACA;AAKA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAAA;AA/UsB;;;;;ADbta;;;;;ADIb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIa;AACb;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAiBA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAtGa;;;;;;;;;;;;;;;;;;AD9Eb;AAEA;AAcA;AAEA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AApMa;AAsMb;AAcA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;ADzVA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA3Ba;;;;;;;;;;;;;;;;;;ADEb;AACA;AACA;AAEA;AAAA;AAGA;AAAA;AAFA;AAIA;AACA;;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AA1Da;;;;;;;;;;;;;;;;;;ADNb;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAaA;AAAA;AAAA;AAPA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AAGA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAMA;AAKA;AAMA;AAIA;AAGA;AAIA;AAIA;AACA;AAOA;AACA;AAQA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AA1Pa;;;;;;;;;;;;;;;;;;ADXb;AASA;AAAA;AAGA;AAAA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AArGa;;;;;;;;;;;;;;;;;;ADXb;AAGA;AACA;AACA;AACA;AASA;AAAA;AAOA;AAAA;AAHA;AAKA;AACA;;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AAKA;AACA;AACA;AAIA;AAMA;AACA;AAGA;AACA;AAMA;AAQA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAWA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAKA;AAGA;AAGA;AACA;AACA;AAgBA;AAAA;AA/Sa;;;;;ADZb;AAAA;AACA;AA8CA;AA5CA;AAMA;AACA;AACA;AACA;AACA;AACA;AAMA;AASA;AAkBA;AAAA;;;;;;ADhDA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAUA;AAQA;AAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AA/CA;AAqDA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAfA;;;;;ADnFA;AAEA;AAQA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AAvFA;AA6FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;;;;;ADzHA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;AACA;AACA;AAFA;;;;;;;;;;;;;;;;;;ADjDA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAQA;AAMA;AAQA;AAUA;AACA;AAXA;AAaA;AAAA;AA2BA;AAAA;AAAA;AAXA;AAGA;AAGA;AAGA;AAIA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AAIA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAKA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;AD7TA;AAOA;AAAA;AANA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;AD/HA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;ADlBA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAKA;AACA;;AAXA;AAaA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AAYA;AAEA;AACA;AACA;AAAA;;;;;;AD3Fa;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;ADJb;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAAA;AAcA;AAAA;AAAA;AAXA;AAKA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAxVa;;;;;AD1Bb;AAGA;AAEa;AACA;AACA;AACA;AACA;AACA;AAEb;AACA;AACA;AAEA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAjGa;;;;;;;;;;;;;;;;;;ADXb;AAOA;AAAA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA1Ca;;;;;ADOb;AACA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AALA;AAWA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AATA;AAgBA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AAgCA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AA8BA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAVA;;;;;ADzGA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;;;;;ADJA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAeA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAYA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AArEa;;;;;;;;;;;;;;;;;;ADDb;AACA;AAEA;AAUA;AAAA;AAWA;AAAA;AACA;AAXA;AAEA;AAIA;AACA;AACA;AAOA;AAGA;AACA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA1La;AA4Lb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAba;;;;;AD1Mb;AAKA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAjDa;;;;;;;;;;;;;;;;;;ADDb;AAcA;AAAA;AAAA;;AA0CA;AApCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA1Ca;;;;;ADZb;AAEA;"}