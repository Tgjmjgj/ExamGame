{"version":3,"file":"fit.js","sources":["../../../src/addons/fit/fit.ts","../../../node_modules/browser-pack/_prelude.js"],"sourcesContent":["/**\r\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n *\r\n * Fit terminal columns and rows to the dimensions of its DOM element.\r\n *\r\n * ## Approach\r\n *\r\n *    Rows: Truncate the division of the terminal parent element height by the\r\n *          terminal row height.\r\n * Columns: Truncate the division of the terminal parent element width by the\r\n *          terminal character width (apply display: inline at the terminal\r\n *          row and truncate its width with the current number of columns).\r\n */\r\n\r\nimport { Terminal } from 'xterm';\r\n\r\nexport interface IGeometry {\r\n  rows: number;\r\n  cols: number;\r\n}\r\n\r\nexport function proposeGeometry(term: Terminal): IGeometry {\r\n  if (!term.element.parentElement) {\r\n    return null;\r\n  }\r\n  const parentElementStyle = window.getComputedStyle(term.element.parentElement);\r\n  const parentElementHeight = parseInt(parentElementStyle.getPropertyValue('height'));\r\n  const parentElementWidth = Math.max(0, parseInt(parentElementStyle.getPropertyValue('width')));\r\n  const elementStyle = window.getComputedStyle(term.element);\r\n  const elementPadding = {\r\n    top: parseInt(elementStyle.getPropertyValue('padding-top')),\r\n    bottom: parseInt(elementStyle.getPropertyValue('padding-bottom')),\r\n    right: parseInt(elementStyle.getPropertyValue('padding-right')),\r\n    left: parseInt(elementStyle.getPropertyValue('padding-left'))\r\n  };\r\n  const elementPaddingVer = elementPadding.top + elementPadding.bottom;\r\n  const elementPaddingHor = elementPadding.right + elementPadding.left;\r\n  const availableHeight = parentElementHeight - elementPaddingVer;\r\n  const availableWidth = parentElementWidth - elementPaddingHor - (<any>term)._core.viewport.scrollBarWidth;\r\n  const geometry = {\r\n    cols: Math.floor(availableWidth / (<any>term)._core.renderer.dimensions.actualCellWidth),\r\n    rows: Math.floor(availableHeight / (<any>term)._core.renderer.dimensions.actualCellHeight)\r\n  };\r\n  return geometry;\r\n}\r\n\r\nexport function fit(term: Terminal): void {\r\n  const geometry = proposeGeometry(term);\r\n  if (geometry) {\r\n    // Force a full render\r\n    if (term.rows !== geometry.rows || term.cols !== geometry.cols) {\r\n      (<any>term)._core.renderer.clear();\r\n      term.resize(geometry.cols, geometry.rows);\r\n    }\r\n  }\r\n}\r\n\r\nexport function apply(terminalConstructor: typeof Terminal): void {\r\n  (<any>terminalConstructor.prototype).proposeGeometry = function (): IGeometry {\r\n    return proposeGeometry(this);\r\n  };\r\n\r\n  (<any>terminalConstructor.prototype).fit = function (): void {\r\n    fit(this);\r\n  };\r\n}\r\n",null],"names":[],"mappings":"ACAA;;;ADsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AARA;"}